name: Continuous Delivery of Python package

on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
  workflow_dispatch:
    inputs:
      production_release:
        description: "Production release?"
        type: boolean
        required: true
        default: true

concurrency: release

permissions:
  contents: write
  packages: read

jobs:
  ci-check-python:
    name: Check Python
    uses: ./.github/workflows/check-python.yaml

  ci-build-python:
    name: Build Python
    uses: ./.github/workflows/build-python.yaml
    needs: ci-check-python

  release:
    name: Release Library
    needs: ci-build-python
    runs-on: ubuntu-latest
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      contents: write
      packages: read

    steps:
      - name: Generate bot token
        uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}

      - uses: actions/checkout@v3
        with:
          # Fetch entire repository history so we can determine version number from it
          fetch-depth: 0

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Get branch name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: get_branch

      - name: Set Git user
        run: |
          git config user.name "engineering-ci[bot]"
          git config user.email "179917785+engineering-ci[bot]@users.noreply.github.com"

      - name: Create Continuous Deployment - Beta (non-prod)
        if: steps.get_branch.outputs.branch == 'main' && !inputs.production_release
        run: |
          poetry run semantic-release \
            -v DEBUG \
            --prerelease \
            --define=branch=main \
            publish
          gh release edit --prerelease "v$(poetry run semantic-release print-version --current)"
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}

      - name: Create Continuous Deployment - Production
        if: steps.get_branch.outputs.branch == 'main' && inputs.production_release
        run: |
          poetry run semantic-release \
            -v DEBUG \
            --define=version_source="commit" \
            --define=patch_without_tag=true \
            --define=branch=main \
            publish
        env:
          GH_TOKEN: ${{ steps.app_token.outputs.token }}

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
