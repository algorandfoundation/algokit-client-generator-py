# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [], "bareActions": {"call": ["DeleteApplication"], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "signature"}], "name": "get_preconditions", "returns": {"type": "(uint64,uint64,uint64,uint64)", "struct": "VotingPreconditions"}, "events": [], "readonly": true}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "string", "name": "vote_id"}, {"type": "byte[]", "name": "snapshot_public_key"}, {"type": "string", "name": "metadata_ipfs_cid"}, {"type": "uint64", "name": "start_time"}, {"type": "uint64", "name": "end_time"}, {"type": "uint8[]", "name": "option_counts"}, {"type": "uint64", "name": "quorum"}, {"type": "string", "name": "nft_image_url"}], "name": "create", "returns": {"type": "void"}, "events": []}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "fund_min_bal_req"}], "name": "bootstrap", "returns": {"type": "void"}, "events": []}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "close", "returns": {"type": "void"}, "events": []}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "fund_min_bal_req"}, {"type": "byte[]", "name": "signature"}, {"type": "uint8[]", "name": "answer_ids"}], "name": "vote", "returns": {"type": "void"}, "events": []}], "name": "VotingRound", "state": {"keys": {"box": {}, "global": {"close_time": {"key": "Y2xvc2VfdGltZQ==", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The unix timestamp of the time the vote was closed"}, "end_time": {"key": "ZW5kX3RpbWU=", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The unix timestamp of the ending time of voting_round"}, "is_bootstrapped": {"key": "aXNfYm9vdHN0cmFwcGVk", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "Whether or not the contract has been bootstrapped with answers"}, "metadata_ipfs_cid": {"key": "bWV0YWRhdGFfaXBmc19jaWQ=", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The IPFS content ID of the voting_round metadata file"}, "nft_asset_id": {"key": "bmZ0X2Fzc2V0X2lk", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The asset ID of a result NFT if one has been created"}, "nft_image_url": {"key": "bmZ0X2ltYWdlX3VybA==", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The IPFS URL of the default image to use as the media of the result NFT"}, "option_counts": {"key": "b3B0aW9uX2NvdW50cw==", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The number of options for each question"}, "quorum": {"key": "cXVvcnVt", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The minimum number of voters to reach quorum"}, "snapshot_public_key": {"key": "c25hcHNob3RfcHVibGljX2tleQ==", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot"}, "start_time": {"key": "c3RhcnRfdGltZQ==", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The unix timestamp of the starting time of voting_round"}, "total_options": {"key": "dG90YWxfb3B0aW9ucw==", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The total number of options"}, "vote_id": {"key": "dm90ZV9pZA==", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The identifier of this voting_round round"}, "voter_count": {"key": "dm90ZXJfY291bnQ=", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The minimum number of voters who have voted"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 8, "ints": 5}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"VotingPreconditions": [{"name": "is_voting_open", "type": "uint64"}, {"name": "is_allowed_to_vote", "type": "uint64"}, {"name": "has_already_voted", "type": "uint64"}, {"name": "current_time", "type": "uint64"}]}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: typing.Any | None = None) -> list[typing.Any] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: typing.Any) -> typing.Any:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

ON_COMPLETE_TYPES = typing.Literal[
    OnComplete.NoOpOC,
    OnComplete.UpdateApplicationOC,
    OnComplete.DeleteApplicationOC,
    OnComplete.OptInOC,
    OnComplete.CloseOutOC,
]


@dataclasses.dataclass(frozen=True)
class VotingPreconditions:
    """Struct for VotingPreconditions"""
    is_voting_open: int
    is_allowed_to_vote: int
    has_already_voted: int
    current_time: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPreconditionsArgs:
    """Dataclass for get_preconditions arguments"""
    signature: bytes | str

@dataclasses.dataclass(frozen=True, kw_only=True)
class BootstrapArgs:
    """Dataclass for bootstrap arguments"""
    fund_min_bal_req: algokit_utils.AppMethodCallTransactionArgument

@dataclasses.dataclass(frozen=True, kw_only=True)
class VoteArgs:
    """Dataclass for vote arguments"""
    fund_min_bal_req: algokit_utils.AppMethodCallTransactionArgument
    signature: bytes | str
    answer_ids: list[int]

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateArgs:
    """Dataclass for create arguments"""
    vote_id: str
    snapshot_public_key: bytes | str
    metadata_ipfs_cid: str
    start_time: int
    end_time: int
    option_counts: list[int]
    quorum: int
    nft_image_url: str


@dataclasses.dataclass(frozen=True, kw_only=True)
class CommonAppCallParams:
    """Common configuration for app call transaction parameters

    :ivar account_references: List of account addresses to reference
    :ivar app_references: List of app IDs to reference
    :ivar asset_references: List of asset IDs to reference
    :ivar box_references: List of box references to include
    :ivar extra_fee: Additional fee to add to transaction
    :ivar lease: Transaction lease value
    :ivar max_fee: Maximum fee allowed for transaction
    :ivar note: Arbitrary note for the transaction
    :ivar rekey_to: Address to rekey account to
    :ivar sender: Sender address override
    :ivar signer: Custom transaction signer
    :ivar static_fee: Fixed fee for transaction
    :ivar validity_window: Number of rounds valid
    :ivar first_valid_round: First valid round number
    :ivar last_valid_round: Last valid round number"""

    account_references: list[str] | None = None
    app_references: list[int] | None = None
    asset_references: list[int] | None = None
    box_references: list[algokit_utils.BoxReference | algokit_utils.BoxIdentifier] | None = None
    extra_fee: algokit_utils.AlgoAmount | None = None
    lease: bytes | None = None
    max_fee: algokit_utils.AlgoAmount | None = None
    note: bytes | None = None
    rekey_to: str | None = None
    sender: str | None = None
    signer: TransactionSigner | None = None
    static_fee: algokit_utils.AlgoAmount | None = None
    validity_window: int | None = None
    first_valid_round: int | None = None
    last_valid_round: int | None = None

@dataclasses.dataclass(frozen=True, kw_only=True)
class CommonAppFactoryCallParams(CommonAppCallParams):
    """Common configuration for app factory call related transaction parameters"""
    on_complete: ON_COMPLETE_TYPES | None = None


class _VotingRoundDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self, params: algokit_utils.AppClientBareCallParams | None = None
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.delete(params)


class VotingRoundParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_VotingRoundDelete":
        return _VotingRoundDelete(self.app_client)

    def get_preconditions(
        self,
        args: tuple[bytes | str] | GetPreconditionsArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_preconditions(byte[])(uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def bootstrap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap(pay)void",
            "args": method_args,
        }))

    def close(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close()void",
        }))

    def vote(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, bytes | str, list[int]] | VoteArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(pay,byte[],uint8[])void",
            "args": method_args,
        }))

    def create(
        self,
        args: tuple[str, bytes | str, str, int, int, list[int], int, str] | CreateArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _VotingRoundDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(self, params: algokit_utils.AppClientBareCallParams | None = None) -> Transaction:
        return self.app_client.create_transaction.bare.delete(params)


class VotingRoundCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_VotingRoundDeleteTransaction":
        return _VotingRoundDeleteTransaction(self.app_client)

    def get_preconditions(
        self,
        args: tuple[bytes | str] | GetPreconditionsArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_preconditions(byte[])(uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def bootstrap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap(pay)void",
            "args": method_args,
        }))

    def close(
        self,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close()void",
        }))

    def vote(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, bytes | str, list[int]] | VoteArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(pay,byte[],uint8[])void",
            "args": method_args,
        }))

    def create(
        self,
        args: tuple[str, bytes | str, str, int, int, list[int], int, str] | CreateArgs,
        params: CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _VotingRoundDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def bare(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        
    ) -> algokit_utils.SendAppTransactionResult:
        return self.app_client.send.bare.delete(
            params=params,
            send_params=send_params,
            
        )


class VotingRoundSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_VotingRoundDeleteSend":
        return _VotingRoundDeleteSend(self.app_client)

    def get_preconditions(
        self,
        args: tuple[bytes | str] | GetPreconditionsArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[VotingPreconditions]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_preconditions(byte[])(uint64,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=VotingPreconditions(**typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[VotingPreconditions], parsed_response)

    def bootstrap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def close(
        self,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def vote(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, bytes | str, list[int]] | VoteArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(pay,byte[],uint8[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create(
        self,
        args: tuple[str, bytes | str, str, int, int, list[int], int, str] | CreateArgs,
        params: CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    close_time: int
    end_time: bytes
    is_bootstrapped: int
    metadata_ipfs_cid: bytes
    nft_asset_id: int
    nft_image_url: bytes
    option_counts: bytes
    quorum: bytes
    snapshot_public_key: bytes
    start_time: bytes
    total_options: int
    vote_id: bytes
    voter_count: int

class VotingRoundState:
    """Methods to access state for the current VotingRound app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                struct_class(**value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def close_time(self) -> int:
        """Get the current value of the close_time key in global_state state"""
        value = self.app_client.state.global_state.get_value("close_time")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def end_time(self) -> bytes:
        """Get the current value of the end_time key in global_state state"""
        value = self.app_client.state.global_state.get_value("end_time")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def is_bootstrapped(self) -> int:
        """Get the current value of the is_bootstrapped key in global_state state"""
        value = self.app_client.state.global_state.get_value("is_bootstrapped")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def metadata_ipfs_cid(self) -> bytes:
        """Get the current value of the metadata_ipfs_cid key in global_state state"""
        value = self.app_client.state.global_state.get_value("metadata_ipfs_cid")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def nft_asset_id(self) -> int:
        """Get the current value of the nft_asset_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("nft_asset_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def nft_image_url(self) -> bytes:
        """Get the current value of the nft_image_url key in global_state state"""
        value = self.app_client.state.global_state.get_value("nft_image_url")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def option_counts(self) -> bytes:
        """Get the current value of the option_counts key in global_state state"""
        value = self.app_client.state.global_state.get_value("option_counts")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def quorum(self) -> bytes:
        """Get the current value of the quorum key in global_state state"""
        value = self.app_client.state.global_state.get_value("quorum")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def snapshot_public_key(self) -> bytes:
        """Get the current value of the snapshot_public_key key in global_state state"""
        value = self.app_client.state.global_state.get_value("snapshot_public_key")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def start_time(self) -> bytes:
        """Get the current value of the start_time key in global_state state"""
        value = self.app_client.state.global_state.get_value("start_time")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def total_options(self) -> int:
        """Get the current value of the total_options key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_options")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

    @property
    def vote_id(self) -> bytes:
        """Get the current value of the vote_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("vote_id")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return self._struct_classes["AVMBytes"](**value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def voter_count(self) -> int:
        """Get the current value of the voter_count key in global_state state"""
        value = self.app_client.state.global_state.get_value("voter_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return self._struct_classes["AVMUint64"](**value)  # type: ignore
        return typing.cast(int, value)

class VotingRoundClient:
    """Client for interacting with VotingRound smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = VotingRoundParams(self.app_client)
        self.create_transaction = VotingRoundCreateTransactionParams(self.app_client)
        self.send = VotingRoundSend(self.app_client)
        self.state = VotingRoundState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "VotingRoundClient":
        return VotingRoundClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "VotingRoundClient":
        return VotingRoundClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "VotingRoundClient":
        return VotingRoundClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "VotingRoundComposer":
        return VotingRoundComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_preconditions(byte[])(uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> VotingPreconditions | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bootstrap(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["close()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vote(pay,byte[],uint8[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | VotingPreconditions:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class VotingRoundMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        tuple[str, bytes | str, str, int, int, list[int], int, str] | CreateArgs,
        typing.Literal["create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void"],
    ]
):
    """Parameters for creating VotingRound contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class VotingRoundBareCallDeleteParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for calling VotingRound contract with bare calls"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallParams:
        return algokit_utils.AppClientBareCallParams(**self.__dict__)

class VotingRoundFactory(algokit_utils.TypedAppFactoryProtocol[VotingRoundMethodCallCreateParams, None, VotingRoundBareCallDeleteParams]):
    """Factory for deploying and managing VotingRoundClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = VotingRoundFactoryParams(self.app_factory)
        self.create_transaction = VotingRoundFactoryCreateTransaction(self.app_factory)
        self.send = VotingRoundFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: VotingRoundMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: VotingRoundBareCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[VotingRoundClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return VotingRoundClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> VotingRoundClient:
        """Get an app client by creator address and name"""
        return VotingRoundClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> VotingRoundClient:
        """Get an app client by app ID"""
        return VotingRoundClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class VotingRoundFactoryParams:
    """Parameters for creating transactions for VotingRound contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = VotingRoundFactoryCreateParams(app_factory)
        self.update = VotingRoundFactoryUpdateParams(app_factory)
        self.delete = VotingRoundFactoryDeleteParams(app_factory)

class VotingRoundFactoryCreateParams:
    """Parameters for 'create' operations of VotingRound contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def get_preconditions(
        self,
        args: tuple[bytes | str] | GetPreconditionsArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_preconditions(byte[])(uint64,uint64,uint64,uint64) ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_preconditions(byte[])(uint64,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def bootstrap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the bootstrap(pay)void ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "bootstrap(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def close(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the close()void ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "close()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def vote(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, bytes | str, list[int]] | VoteArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vote(pay,byte[],uint8[])void ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vote(pay,byte[],uint8[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create(
        self,
        args: tuple[str, bytes | str, str, int, int, list[int], int, str] | CreateArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class VotingRoundFactoryUpdateParams:
    """Parameters for 'update' operations of VotingRound contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            )

class VotingRoundFactoryDeleteParams:
    """Parameters for 'delete' operations of VotingRound contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            )


class VotingRoundFactoryCreateTransaction:
    """Create transactions for VotingRound contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = VotingRoundFactoryCreateTransactionCreate(app_factory)


class VotingRoundFactoryCreateTransactionCreate:
    """Create new instances of VotingRound contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: CommonAppFactoryCallParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class VotingRoundFactorySend:
    """Send calls to VotingRound contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = VotingRoundFactorySendCreate(app_factory)


class VotingRoundFactorySendCreate:
    """Send create calls to VotingRound contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: CommonAppFactoryCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[VotingRoundClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or CommonAppFactoryCallParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return VotingRoundClient(result[0]), result[1]

    def create(
        self,
        args: tuple[str, bytes | str, str, int, int, list[int], int, str] | CreateArgs,
        *,
        params: CommonAppFactoryCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[VotingRoundClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void ABI method"""
            params = params or CommonAppFactoryCallParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return VotingRoundClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _VotingRoundDeleteComposer:
    def __init__(self, composer: "VotingRoundComposer"):
        self.composer = composer


class VotingRoundComposer:
    """Composer for creating transaction groups for VotingRound contract calls"""

    def __init__(self, client: "VotingRoundClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], typing.Any] | None] = []

    @property
    def delete(self) -> "_VotingRoundDeleteComposer":
        return _VotingRoundDeleteComposer(self)

    def get_preconditions(
        self,
        args: tuple[bytes | str] | GetPreconditionsArgs,
        params: CommonAppCallParams | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_preconditions(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_preconditions(byte[])(uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def bootstrap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapArgs,
        params: CommonAppCallParams | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bootstrap(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bootstrap(pay)void", v
            )
        )
        return self

    def close(
        self,
        params: CommonAppCallParams | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_app_call_method_call(
            self.client.params.close(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "close()void", v
            )
        )
        return self

    def vote(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, bytes | str, list[int]] | VoteArgs,
        params: CommonAppCallParams | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vote(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vote(pay,byte[],uint8[])void", v
            )
        )
        return self

    def create(
        self,
        args: tuple[str, bytes | str, str, int, int, list[int], int, str] | CreateArgs,
        params: CommonAppCallParams | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: CommonAppCallParams | None = None,
    ) -> "VotingRoundComposer":
        params=params or CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
