# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [], "bareActions": {"call": ["DeleteApplication"], "create": []}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "signature"}], "name": "get_preconditions", "returns": {"type": "(uint64,uint64,uint64,uint64)", "struct": "VotingPreconditions"}, "events": [], "readonly": true}, {"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "string", "name": "vote_id"}, {"type": "byte[]", "name": "snapshot_public_key"}, {"type": "string", "name": "metadata_ipfs_cid"}, {"type": "uint64", "name": "start_time"}, {"type": "uint64", "name": "end_time"}, {"type": "uint8[]", "name": "option_counts"}, {"type": "uint64", "name": "quorum"}, {"type": "string", "name": "nft_image_url"}], "name": "create", "returns": {"type": "void"}, "events": []}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "fund_min_bal_req"}], "name": "bootstrap", "returns": {"type": "void"}, "events": []}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "close", "returns": {"type": "void"}, "events": []}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "fund_min_bal_req"}, {"type": "byte[]", "name": "signature"}, {"type": "uint8[]", "name": "answer_ids"}], "name": "vote", "returns": {"type": "void"}, "events": []}], "name": "VotingRound", "state": {"keys": {"box": {}, "global": {"close_time": {"key": "Y2xvc2VfdGltZQ==", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The unix timestamp of the time the vote was closed"}, "end_time": {"key": "ZW5kX3RpbWU=", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The unix timestamp of the ending time of voting_round"}, "is_bootstrapped": {"key": "aXNfYm9vdHN0cmFwcGVk", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "Whether or not the contract has been bootstrapped with answers"}, "metadata_ipfs_cid": {"key": "bWV0YWRhdGFfaXBmc19jaWQ=", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The IPFS content ID of the voting_round metadata file"}, "nft_asset_id": {"key": "bmZ0X2Fzc2V0X2lk", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The asset ID of a result NFT if one has been created"}, "nft_image_url": {"key": "bmZ0X2ltYWdlX3VybA==", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The IPFS URL of the default image to use as the media of the result NFT"}, "option_counts": {"key": "b3B0aW9uX2NvdW50cw==", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The number of options for each question"}, "quorum": {"key": "cXVvcnVt", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The minimum number of voters to reach quorum"}, "snapshot_public_key": {"key": "c25hcHNob3RfcHVibGljX2tleQ==", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The public key of the Ed25519 compatible private key that was used to encrypt entries in the vote gating snapshot"}, "start_time": {"key": "c3RhcnRfdGltZQ==", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The unix timestamp of the starting time of voting_round"}, "total_options": {"key": "dG90YWxfb3B0aW9ucw==", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The total number of options"}, "vote_id": {"key": "dm90ZV9pZA==", "keyType": "AVMString", "valueType": "AVMBytes", "desc": "The identifier of this voting_round round"}, "voter_count": {"key": "dm90ZXJfY291bnQ=", "keyType": "AVMString", "valueType": "AVMUint64", "desc": "The minimum number of voters who have voted"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 5, "ints": 8}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"VotingPreconditions": [{"name": "is_voting_open", "type": "uint64"}, {"name": "is_allowed_to_vote", "type": "uint64"}, {"name": "has_already_voted", "type": "uint64"}, {"name": "current_time", "type": "uint64"}]}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class VotingPreconditions:
    """Struct for VotingPreconditions"""
    is_voting_open: int
    is_allowed_to_vote: int
    has_already_voted: int
    current_time: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPreconditionsArgs:
    """Dataclass for get_preconditions arguments"""
    signature: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "get_preconditions(byte[])(uint64,uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BootstrapArgs:
    """Dataclass for bootstrap arguments"""
    fund_min_bal_req: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "bootstrap(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VoteArgs:
    """Dataclass for vote arguments"""
    fund_min_bal_req: algokit_utils.AppMethodCallTransactionArgument
    signature: bytes | str
    answer_ids: list[int]

    @property
    def abi_method_signature(self) -> str:
        return "vote(pay,byte[],uint8[])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateArgs:
    """Dataclass for create arguments"""
    vote_id: str
    snapshot_public_key: bytes | str
    metadata_ipfs_cid: str
    start_time: int
    end_time: int
    option_counts: list[int]
    quorum: int
    nft_image_url: str

    @property
    def abi_method_signature(self) -> str:
        return "create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void"


class VotingRoundParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def get_preconditions(
        self,
        args: tuple[bytes | str] | GetPreconditionsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_preconditions(byte[])(uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def bootstrap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap(pay)void",
            "args": method_args,
        }))

    def close(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close()void",
        }))

    def vote(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, bytes | str, list[int]] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(pay,byte[],uint8[])void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class VotingRoundCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def get_preconditions(
        self,
        args: tuple[bytes | str] | GetPreconditionsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_preconditions(byte[])(uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def bootstrap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap(pay)void",
            "args": method_args,
        }))

    def close(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close()void",
        }))

    def vote(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, bytes | str, list[int]] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(pay,byte[],uint8[])void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class VotingRoundSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def get_preconditions(
        self,
        args: tuple[bytes | str] | GetPreconditionsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[VotingPreconditions]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_preconditions(byte[])(uint64,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(VotingPreconditions, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[VotingPreconditions], parsed_response)

    def bootstrap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "bootstrap(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def close(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def vote(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, bytes | str, list[int]] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vote(pay,byte[],uint8[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    close_time: int
    end_time: int
    is_bootstrapped: int
    metadata_ipfs_cid: bytes
    nft_asset_id: int
    nft_image_url: bytes
    option_counts: bytes
    quorum: int
    snapshot_public_key: bytes
    start_time: int
    total_options: int
    vote_id: bytes
    voter_count: int

class VotingRoundState:
    """Methods to access state for the current VotingRound app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def close_time(self) -> int:
        """Get the current value of the close_time key in global_state state"""
        value = self.app_client.state.global_state.get_value("close_time")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def end_time(self) -> int:
        """Get the current value of the end_time key in global_state state"""
        value = self.app_client.state.global_state.get_value("end_time")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def is_bootstrapped(self) -> int:
        """Get the current value of the is_bootstrapped key in global_state state"""
        value = self.app_client.state.global_state.get_value("is_bootstrapped")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def metadata_ipfs_cid(self) -> bytes:
        """Get the current value of the metadata_ipfs_cid key in global_state state"""
        value = self.app_client.state.global_state.get_value("metadata_ipfs_cid")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def nft_asset_id(self) -> int:
        """Get the current value of the nft_asset_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("nft_asset_id")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def nft_image_url(self) -> bytes:
        """Get the current value of the nft_image_url key in global_state state"""
        value = self.app_client.state.global_state.get_value("nft_image_url")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def option_counts(self) -> bytes:
        """Get the current value of the option_counts key in global_state state"""
        value = self.app_client.state.global_state.get_value("option_counts")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def quorum(self) -> int:
        """Get the current value of the quorum key in global_state state"""
        value = self.app_client.state.global_state.get_value("quorum")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def snapshot_public_key(self) -> bytes:
        """Get the current value of the snapshot_public_key key in global_state state"""
        value = self.app_client.state.global_state.get_value("snapshot_public_key")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def start_time(self) -> int:
        """Get the current value of the start_time key in global_state state"""
        value = self.app_client.state.global_state.get_value("start_time")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_options(self) -> int:
        """Get the current value of the total_options key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_options")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def vote_id(self) -> bytes:
        """Get the current value of the vote_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("vote_id")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def voter_count(self) -> int:
        """Get the current value of the voter_count key in global_state state"""
        value = self.app_client.state.global_state.get_value("voter_count")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class VotingRoundClient:
    """Client for interacting with VotingRound smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = VotingRoundParams(self.app_client)
        self.create_transaction = VotingRoundCreateTransactionParams(self.app_client)
        self.send = VotingRoundSend(self.app_client)
        self.state = VotingRoundState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "VotingRoundClient":
        return VotingRoundClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "VotingRoundClient":
        return VotingRoundClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "VotingRoundClient":
        return VotingRoundClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "VotingRoundComposer":
        return VotingRoundComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_preconditions(byte[])(uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> VotingPreconditions | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["bootstrap(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["close()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vote(pay,byte[],uint8[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create(string,byte[],string,uint64,uint64,uint8[],uint64,string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | VotingPreconditions:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


class VotingRoundComposer:
    """Composer for creating transaction groups for VotingRound contract calls"""

    def __init__(self, client: "VotingRoundClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def get_preconditions(
        self,
        args: tuple[bytes | str] | GetPreconditionsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_preconditions(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_preconditions(byte[])(uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def bootstrap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | BootstrapArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_app_call_method_call(
            self.client.params.bootstrap(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "bootstrap(pay)void", v
            )
        )
        return self

    def close(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_app_call_method_call(
            self.client.params.close(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "close()void", v
            )
        )
        return self

    def vote(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, bytes | str, list[int]] | VoteArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vote(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vote(pay,byte[],uint8[])void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "VotingRoundComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "VotingRoundComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
