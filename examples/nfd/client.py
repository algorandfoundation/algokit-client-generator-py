# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [4, 56], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [{"type": "string", "name": "nfdName"}, {"type": "address", "name": "seller"}, {"type": "address", "name": "buyer"}, {"type": "uint64", "name": "purchaseAmount"}, {"type": "uint64", "name": "expTime"}, {"type": "address", "name": "commission1Addr"}, {"type": "uint64", "name": "commission1Pct"}, {"type": "address", "name": "commission2Addr"}, {"type": "uint64", "name": "commission2Pct"}, {"type": "uint64", "name": "segmentRootAppId"}, {"type": "address", "name": "segmentRootCommissionAddr"}], "name": "createApplication", "returns": {"type": "void"}}, {"actions": {"call": ["UpdateApplication"], "create": []}, "args": [{"type": "string", "name": "versionNum"}], "name": "updateApplication", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "gas", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "nfdName"}, {"type": "string", "name": "url"}], "name": "mintAsa", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[][]", "name": "fieldNames"}], "name": "deleteFields", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "childNfdName"}, {"type": "uint64", "name": "childNfdAppID"}], "name": "updateSegmentCount", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[][]", "name": "fieldAndVals"}], "name": "getFieldUpdateCost", "returns": {"type": "uint64"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[][]", "name": "fieldAndVals"}], "name": "updateFields", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "fieldName"}], "name": "readField", "returns": {"type": "byte[]"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "sellAmount"}, {"type": "address", "name": "reservedFor"}], "name": "offerForSale", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "seller"}, {"type": "uint64", "name": "amount"}, {"type": "address", "name": "reservedFor"}], "name": "nfd_offerForSale", "desc": ""}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "cancelSale", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}], "name": "nfd_saleCancelled", "desc": ""}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "offer"}, {"type": "string", "name": "note"}], "name": "postOffer", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "sender"}, {"type": "uint64", "name": "amount"}, {"type": "string", "name": "note"}], "name": "nfd_postedOffer", "desc": ""}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "oneYearPrice"}, {"type": "uint64", "name": "segmentPlatformCostInAlgo"}], "name": "mintPayout", "returns": {"type": "(uint64,address,uint64,address,uint64)", "struct": "PayoutInfo"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment"}], "name": "purchase", "returns": {"type": "void"}, "events": [{"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "seller"}, {"type": "address", "name": "buyer"}, {"type": "uint64", "name": "sellAmount"}, {"type": "uint64", "name": "offerAmount"}, {"type": "uint64", "name": "overpaymentRefund"}, {"type": "address", "name": "convFeeAddr"}, {"type": "uint64", "name": "convFeeAmount"}], "name": "nfd_purchased", "desc": ""}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "fieldName"}, {"type": "address", "name": "address"}], "name": "isAddressInField", "returns": {"type": "bool"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "getRenewPrice", "returns": {"type": "uint64"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "hash"}], "name": "updateHash", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "bool", "name": "lock"}], "name": "contractLock", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "bool", "name": "lock"}, {"type": "uint64", "name": "usdPrice"}], "name": "segmentLock", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "bool", "name": "lock"}], "name": "vaultOptInLock", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64[]", "name": "assets"}], "name": "vaultOptIn", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "amount"}, {"type": "address", "name": "receiver"}, {"type": "string", "name": "note"}, {"type": "uint64", "name": "asset"}, {"type": "uint64[]", "name": "otherAssets"}], "name": "vaultSend", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "desc": "The payment transaction from which the renewal period is determined..", "name": "payment"}], "name": "renew", "returns": {"type": "void"}, "desc": "Renew adds more time to an existing NFDs expiration, or renews it if expired.\n\n\nAs part of v2-v3 upgrade, the NFDs are converted from lifetime NFDs to renewal NFDs. The v2 contract is upgraded\nto v3, then renew is called on the (now v3) nfd to turn it into a renewal (note the if curExpiration === 0 check)\n\n\nIf already renewal, then it extends the current expiration time by the time specified (minimum 1 yr) (365 / price paid * mint price)\nExpirations can never be more than NFD_MAX_EXPIRATION_DAYS days in the future.\n\n\nIF the NFD is expired:\n    x The current owner can take it back over at base price - and NFD metadata doesn't have to be cleared - they\n    get it back as-is.\n    x If not current owner, then the price goes from high of base price * 10,000 down to base price over 24 hrs where\n    'buyer' has to pay at least that price.  The NFD MUST ALREADY HAVE ITS METADATA CLEARED!", "events": [{"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}], "name": "nfd_saleCancelled", "desc": ""}, {"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "origOwner"}, {"type": "address", "name": "buyer"}, {"type": "uint64", "name": "priceOneYear"}, {"type": "uint64", "name": "renewAmount"}, {"type": "uint64", "name": "expTime"}], "name": "nfd_renewed", "desc": ""}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "fieldName"}, {"type": "address", "name": "address"}], "name": "setPrimaryAddress", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "- MUST START with u.cav. (!)\ngets 'added' to 'set' in next arg - must be fixed-sized bytes", "name": "fieldBeingVerified"}, {"type": "string", "desc": "(must BE v.ca[...].as)", "name": "fieldSetName"}], "name": "registryAddingVerifiedAddress", "returns": {"type": "bool", "desc": "true if added or already present, false otherwise"}, "desc": "Approved call from registry instructing us to move the specified u.cav.xx field and add to the specified\nverified field.", "events": [{"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "address"}], "name": "nfd_addressLinked", "desc": ""}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "desc": "The field being changed in the address registry.", "name": "fieldBeingChanged"}, {"type": "address", "desc": "The address to be removed from the field.", "name": "address"}, {"type": "address", "desc": "the address to send reclaimed MBR (if any)\n boolean - true if valid removed", "name": "mbrRefundDest"}], "name": "registryRemovingVerifiedAddress", "returns": {"type": "bool"}, "desc": "Approved call from registry instructing us to REMOVE an address from the specified verified address set", "events": [{"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "address"}], "name": "nfd_addressUnlinked", "desc": ""}]}], "name": "NFDInstance", "state": {"keys": {"box": {}, "global": {}, "local": {}}, "maps": {"box": {"boxes": {"keyType": "AVMBytes", "valueType": "AVMBytes"}}, "global": {"global_state": {"keyType": "AVMBytes", "valueType": "AVMBytes"}}, "local": {}}, "schema": {"global": {"bytes": 30, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"PayoutInfo": [{"name": "amountToSeller", "type": "uint64"}, {"name": "commissionAddress", "type": "address"}, {"name": "amountToCommission", "type": "uint64"}, {"name": "segmentRootOwner", "type": "address"}, {"name": "amountToSegmentRoot", "type": "uint64"}]}, "compilerInfo": {"compiler": "algod", "compilerVersion": {"commitHash": "43cb5632", "major": 3, "minor": 26, "patch": 229321}}, "desc": "", "events": [{"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "seller"}, {"type": "uint64", "name": "amount"}, {"type": "address", "name": "reservedFor"}], "name": "nfd_offerForSale", "desc": ""}, {"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}], "name": "nfd_saleCancelled", "desc": ""}, {"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "sender"}, {"type": "uint64", "name": "amount"}, {"type": "string", "name": "note"}], "name": "nfd_postedOffer", "desc": ""}, {"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "seller"}, {"type": "address", "name": "buyer"}, {"type": "uint64", "name": "sellAmount"}, {"type": "uint64", "name": "offerAmount"}, {"type": "uint64", "name": "overpaymentRefund"}, {"type": "address", "name": "convFeeAddr"}, {"type": "uint64", "name": "convFeeAmount"}], "name": "nfd_purchased", "desc": ""}, {"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "origOwner"}, {"type": "address", "name": "buyer"}, {"type": "uint64", "name": "priceOneYear"}, {"type": "uint64", "name": "renewAmount"}, {"type": "uint64", "name": "expTime"}], "name": "nfd_renewed", "desc": ""}, {"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "address"}], "name": "nfd_addressLinked", "desc": ""}, {"args": [{"type": "uint64", "name": "appId"}, {"type": "string", "name": "name"}, {"type": "address", "name": "address"}], "name": "nfd_addressUnlinked", "desc": ""}], "scratchVariables": {"admin_asa_id": {"slot": 200, "type": "uint64"}, "registry_app_id": {"slot": 201, "type": "uint64"}}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [1, 2], "source": "contracts/NFDInstance.algo.ts:17", "teal": 15}, {"pc": [3], "source": "contracts/NFDInstance.algo.ts:17", "teal": 16}, {"pc": [4, 5], "source": "contracts/NFDInstance.algo.ts:17", "teal": 17}, {"pc": [6], "source": "contracts/NFDInstance.algo.ts:17", "teal": 18}, {"pc": [7, 8], "source": "contracts/NFDInstance.algo.ts:17", "teal": 19}, {"pc": [9], "source": "contracts/NFDInstance.algo.ts:17", "teal": 20}, {"pc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "source": "contracts/NFDInstance.algo.ts:17", "teal": 21}, {"pc": [36], "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?", "source": "contracts/NFDInstance.algo.ts:17", "teal": 25}, {"pc": [37, 38, 39], "source": "contracts/NFDInstance.algo.ts:43", "teal": 30}, {"pc": [40], "source": "contracts/NFDInstance.algo.ts:43", "teal": 31}, {"pc": [41], "source": "contracts/NFDInstance.algo.ts:43", "teal": 32}, {"pc": [42], "source": "contracts/NFDInstance.algo.ts:43", "teal": 33}, {"pc": [43], "source": "contracts/NFDInstance.algo.ts:43", "teal": 34}, {"pc": [44], "errorMessage": "argument 0 (segmentRootCommissionAddr) for createApplication must be a address", "source": "contracts/NFDInstance.algo.ts:43", "teal": 37}, {"pc": [45, 46, 47], "source": "contracts/NFDInstance.algo.ts:42", "teal": 40}, {"pc": [48], "source": "contracts/NFDInstance.algo.ts:42", "teal": 41}, {"pc": [49, 50, 51], "source": "contracts/NFDInstance.algo.ts:41", "teal": 44}, {"pc": [52], "source": "contracts/NFDInstance.algo.ts:41", "teal": 45}, {"pc": [53, 54, 55], "source": "contracts/NFDInstance.algo.ts:40", "teal": 48}, {"pc": [56], "source": "contracts/NFDInstance.algo.ts:40", "teal": 49}, {"pc": [57], "source": "contracts/NFDInstance.algo.ts:40", "teal": 50}, {"pc": [58], "source": "contracts/NFDInstance.algo.ts:40", "teal": 51}, {"pc": [59], "source": "contracts/NFDInstance.algo.ts:40", "teal": 52}, {"pc": [60], "errorMessage": "argument 3 (commission2Addr) for createApplication must be a address", "source": "contracts/NFDInstance.algo.ts:40", "teal": 55}, {"pc": [61, 62, 63], "source": "contracts/NFDInstance.algo.ts:39", "teal": 58}, {"pc": [64], "source": "contracts/NFDInstance.algo.ts:39", "teal": 59}, {"pc": [65, 66, 67], "source": "contracts/NFDInstance.algo.ts:38", "teal": 62}, {"pc": [68], "source": "contracts/NFDInstance.algo.ts:38", "teal": 63}, {"pc": [69], "source": "contracts/NFDInstance.algo.ts:38", "teal": 64}, {"pc": [70], "source": "contracts/NFDInstance.algo.ts:38", "teal": 65}, {"pc": [71], "source": "contracts/NFDInstance.algo.ts:38", "teal": 66}, {"pc": [72], "errorMessage": "argument 5 (commission1Addr) for createApplication must be a address", "source": "contracts/NFDInstance.algo.ts:38", "teal": 69}, {"pc": [73, 74, 75], "source": "contracts/NFDInstance.algo.ts:37", "teal": 72}, {"pc": [76], "source": "contracts/NFDInstance.algo.ts:37", "teal": 73}, {"pc": [77, 78, 79], "source": "contracts/NFDInstance.algo.ts:36", "teal": 76}, {"pc": [80], "source": "contracts/NFDInstance.algo.ts:36", "teal": 77}, {"pc": [81, 82, 83], "source": "contracts/NFDInstance.algo.ts:35", "teal": 80}, {"pc": [84], "source": "contracts/NFDInstance.algo.ts:35", "teal": 81}, {"pc": [85], "source": "contracts/NFDInstance.algo.ts:35", "teal": 82}, {"pc": [86], "source": "contracts/NFDInstance.algo.ts:35", "teal": 83}, {"pc": [87], "source": "contracts/NFDInstance.algo.ts:35", "teal": 84}, {"pc": [88], "errorMessage": "argument 8 (buyer) for createApplication must be a address", "source": "contracts/NFDInstance.algo.ts:35", "teal": 87}, {"pc": [89, 90, 91], "source": "contracts/NFDInstance.algo.ts:34", "teal": 90}, {"pc": [92], "source": "contracts/NFDInstance.algo.ts:34", "teal": 91}, {"pc": [93], "source": "contracts/NFDInstance.algo.ts:34", "teal": 92}, {"pc": [94], "source": "contracts/NFDInstance.algo.ts:34", "teal": 93}, {"pc": [95], "source": "contracts/NFDInstance.algo.ts:34", "teal": 94}, {"pc": [96], "errorMessage": "argument 9 (seller) for createApplication must be a address", "source": "contracts/NFDInstance.algo.ts:34", "teal": 97}, {"pc": [97, 98, 99], "source": "contracts/NFDInstance.algo.ts:33", "teal": 100}, {"pc": [100, 101, 102], "source": "contracts/NFDInstance.algo.ts:33", "teal": 101}, {"pc": [103, 104, 105], "source": "contracts/NFDInstance.algo.ts:32", "teal": 104}, {"pc": [106], "source": "contracts/NFDInstance.algo.ts:32", "teal": 105}, {"pc": [107], "source": "contracts/NFDInstance.algo.ts:32", "teal": 106}, {"pc": [108, 109, 110], "source": "contracts/NFDInstance.algo.ts:32", "teal": 110}, {"pc": [111], "source": "contracts/NFDInstance.algo.ts:32", "teal": 113}, {"pc": [112, 113], "source": "contracts/NFDInstance.algo.ts:45", "teal": 117}, {"pc": [114, 115], "source": "contracts/NFDInstance.algo.ts:45", "teal": 118}, {"pc": [116], "source": "contracts/NFDInstance.algo.ts:45", "teal": 119}, {"pc": [117], "errorMessage": "caller must be NFD registry!", "source": "contracts/NFDInstance.algo.ts:45", "teal": 122}, {"pc": [118, 119], "source": "contracts/NFDInstance.algo.ts:46", "teal": 126}, {"pc": [120], "source": "contracts/NFDInstance.algo.ts:46", "teal": 127}, {"pc": [121], "source": "contracts/NFDInstance.algo.ts:46", "teal": 128}, {"pc": [122], "source": "contracts/NFDInstance.algo.ts:46", "teal": 129}, {"pc": [123, 124], "source": "contracts/NFDInstance.algo.ts:48", "teal": 133}, {"pc": [125, 126], "source": "contracts/NFDInstance.algo.ts:48", "teal": 134}, {"pc": [127], "source": "contracts/NFDInstance.algo.ts:48", "teal": 135}, {"pc": [128, 129], "source": "contracts/NFDInstance.algo.ts:49", "teal": 139}, {"pc": [130, 131, 132, 133, 134], "source": "contracts/NFDInstance.algo.ts:49", "teal": 140}, {"pc": [135], "source": "contracts/NFDInstance.algo.ts:49", "teal": 141}, {"pc": [136], "source": "contracts/NFDInstance.algo.ts:50", "teal": 145}, {"pc": [137, 138], "source": "contracts/NFDInstance.algo.ts:50", "teal": 146}, {"pc": [139], "source": "contracts/NFDInstance.algo.ts:50", "teal": 147}, {"pc": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154], "source": "contracts/NFDInstance.algo.ts:51", "teal": 151}, {"pc": [155, 156], "source": "contracts/NFDInstance.algo.ts:51", "teal": 152}, {"pc": [157], "source": "contracts/NFDInstance.algo.ts:51", "teal": 153}, {"pc": [158], "source": "contracts/NFDInstance.algo.ts:51", "teal": 154}, {"pc": [159], "source": "contracts/NFDInstance.algo.ts:52", "teal": 158}, {"pc": [160, 161], "source": "contracts/NFDInstance.algo.ts:52", "teal": 159}, {"pc": [162], "source": "contracts/NFDInstance.algo.ts:52", "teal": 160}, {"pc": [163], "source": "contracts/NFDInstance.algo.ts:52", "teal": 161}, {"pc": [164, 165], "source": "contracts/NFDInstance.algo.ts:53", "teal": 165}, {"pc": [166, 167], "source": "contracts/NFDInstance.algo.ts:53", "teal": 166}, {"pc": [168], "source": "contracts/NFDInstance.algo.ts:53", "teal": 167}, {"pc": [169], "source": "contracts/NFDInstance.algo.ts:53", "teal": 168}, {"pc": [170, 171], "source": "contracts/NFDInstance.algo.ts:54", "teal": 172}, {"pc": [172, 173], "source": "contracts/NFDInstance.algo.ts:54", "teal": 173}, {"pc": [174], "source": "contracts/NFDInstance.algo.ts:54", "teal": 174}, {"pc": [175, 176], "source": "contracts/NFDInstance.algo.ts:55", "teal": 178}, {"pc": [177, 178], "source": "contracts/NFDInstance.algo.ts:55", "teal": 179}, {"pc": [179], "source": "contracts/NFDInstance.algo.ts:55", "teal": 180}, {"pc": [180], "source": "contracts/NFDInstance.algo.ts:56", "teal": 184}, {"pc": [181, 182], "source": "contracts/NFDInstance.algo.ts:56", "teal": 185}, {"pc": [183], "source": "contracts/NFDInstance.algo.ts:56", "teal": 186}, {"pc": [184, 185], "source": "contracts/NFDInstance.algo.ts:57", "teal": 190}, {"pc": [186, 187], "source": "contracts/NFDInstance.algo.ts:57", "teal": 191}, {"pc": [188], "source": "contracts/NFDInstance.algo.ts:57", "teal": 192}, {"pc": [189, 190], "source": "contracts/NFDInstance.algo.ts:58", "teal": 196}, {"pc": [191, 192], "source": "contracts/NFDInstance.algo.ts:58", "teal": 197}, {"pc": [193], "source": "contracts/NFDInstance.algo.ts:58", "teal": 198}, {"pc": [194], "source": "contracts/NFDInstance.algo.ts:58", "teal": 199}, {"pc": [195, 196], "source": "contracts/NFDInstance.algo.ts:59", "teal": 204}, {"pc": [197, 198], "source": "contracts/NFDInstance.algo.ts:59", "teal": 205}, {"pc": [199], "source": "contracts/NFDInstance.algo.ts:59", "teal": 206}, {"pc": [200, 201, 202], "source": "contracts/NFDInstance.algo.ts:59", "teal": 207}, {"pc": [203, 204], "source": "contracts/NFDInstance.algo.ts:60", "teal": 212}, {"pc": [205], "source": "contracts/NFDInstance.algo.ts:60", "teal": 213}, {"pc": [206], "source": "contracts/NFDInstance.algo.ts:60", "teal": 214}, {"pc": [207], "source": "contracts/NFDInstance.algo.ts:60", "teal": 215}, {"pc": [208, 209, 210], "source": "contracts/NFDInstance.algo.ts:60", "teal": 216}, {"pc": [211, 212], "source": "contracts/NFDInstance.algo.ts:60", "teal": 217}, {"pc": [213, 214], "source": "contracts/NFDInstance.algo.ts:60", "teal": 218}, {"pc": [215], "source": "contracts/NFDInstance.algo.ts:60", "teal": 219}, {"pc": [216], "source": "contracts/NFDInstance.algo.ts:60", "teal": 220}, {"pc": [217], "errorMessage": "commission must be between 1 and 50%", "source": "contracts/NFDInstance.algo.ts:60", "teal": 224}, {"pc": [218, 219], "source": "contracts/NFDInstance.algo.ts:61", "teal": 228}, {"pc": [220, 221], "source": "contracts/NFDInstance.algo.ts:61", "teal": 229}, {"pc": [222], "source": "contracts/NFDInstance.algo.ts:61", "teal": 230}, {"pc": [223, 224], "source": "contracts/NFDInstance.algo.ts:62", "teal": 234}, {"pc": [225, 226], "source": "contracts/NFDInstance.algo.ts:62", "teal": 235}, {"pc": [227], "source": "contracts/NFDInstance.algo.ts:62", "teal": 236}, {"pc": [228], "source": "contracts/NFDInstance.algo.ts:62", "teal": 237}, {"pc": [229, 230], "source": "contracts/NFDInstance.algo.ts:63", "teal": 242}, {"pc": [231, 232], "source": "contracts/NFDInstance.algo.ts:63", "teal": 243}, {"pc": [233], "source": "contracts/NFDInstance.algo.ts:63", "teal": 244}, {"pc": [234, 235, 236], "source": "contracts/NFDInstance.algo.ts:63", "teal": 245}, {"pc": [237, 238], "source": "contracts/NFDInstance.algo.ts:64", "teal": 250}, {"pc": [239], "source": "contracts/NFDInstance.algo.ts:64", "teal": 251}, {"pc": [240], "source": "contracts/NFDInstance.algo.ts:64", "teal": 252}, {"pc": [241], "source": "contracts/NFDInstance.algo.ts:64", "teal": 253}, {"pc": [242, 243, 244], "source": "contracts/NFDInstance.algo.ts:64", "teal": 254}, {"pc": [245, 246], "source": "contracts/NFDInstance.algo.ts:64", "teal": 255}, {"pc": [247, 248], "source": "contracts/NFDInstance.algo.ts:64", "teal": 256}, {"pc": [249], "source": "contracts/NFDInstance.algo.ts:64", "teal": 257}, {"pc": [250], "source": "contracts/NFDInstance.algo.ts:64", "teal": 258}, {"pc": [251], "errorMessage": "commission must be between 1 and 50%", "source": "contracts/NFDInstance.algo.ts:64", "teal": 262}, {"pc": [252, 253], "source": "contracts/NFDInstance.algo.ts:65", "teal": 266}, {"pc": [254, 255], "source": "contracts/NFDInstance.algo.ts:65", "teal": 267}, {"pc": [256], "source": "contracts/NFDInstance.algo.ts:65", "teal": 268}, {"pc": [257, 258], "source": "contracts/NFDInstance.algo.ts:66", "teal": 272}, {"pc": [259, 260], "source": "contracts/NFDInstance.algo.ts:66", "teal": 273}, {"pc": [261], "source": "contracts/NFDInstance.algo.ts:66", "teal": 274}, {"pc": [262], "source": "contracts/NFDInstance.algo.ts:66", "teal": 275}, {"pc": [263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "source": "contracts/NFDInstance.algo.ts:69", "teal": 282}, {"pc": [275, 276, 277, 278, 279, 280, 281, 282], "source": "contracts/NFDInstance.algo.ts:69", "teal": 283}, {"pc": [283], "source": "contracts/NFDInstance.algo.ts:69", "teal": 284}, {"pc": [284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "source": "contracts/NFDInstance.algo.ts:70", "teal": 288}, {"pc": [296, 297, 298, 299, 300, 301, 302, 303, 304, 305], "source": "contracts/NFDInstance.algo.ts:70", "teal": 289}, {"pc": [306], "source": "contracts/NFDInstance.algo.ts:70", "teal": 290}, {"pc": [307, 308], "source": "contracts/NFDInstance.algo.ts:72", "teal": 294}, {"pc": [309, 310], "source": "contracts/NFDInstance.algo.ts:72", "teal": 295}, {"pc": [311], "source": "contracts/NFDInstance.algo.ts:72", "teal": 296}, {"pc": [312], "source": "contracts/NFDInstance.algo.ts:72", "teal": 297}, {"pc": [313, 314], "source": "contracts/NFDInstance.algo.ts:75", "teal": 301}, {"pc": [315, 316], "source": "contracts/NFDInstance.algo.ts:75", "teal": 302}, {"pc": [317], "source": "contracts/NFDInstance.algo.ts:75", "teal": 303}, {"pc": [318, 319], "source": "contracts/NFDInstance.algo.ts:77", "teal": 308}, {"pc": [320], "source": "contracts/NFDInstance.algo.ts:77", "teal": 309}, {"pc": [321], "source": "contracts/NFDInstance.algo.ts:77", "teal": 310}, {"pc": [322, 323, 324], "source": "contracts/NFDInstance.algo.ts:77", "teal": 311}, {"pc": [325, 326], "source": "contracts/NFDInstance.algo.ts:78", "teal": 316}, {"pc": [327, 328], "source": "contracts/NFDInstance.algo.ts:78", "teal": 317}, {"pc": [329], "source": "contracts/NFDInstance.algo.ts:78", "teal": 318}, {"pc": [330], "source": "contracts/NFDInstance.algo.ts:78", "teal": 319}, {"pc": [331, 332], "source": "contracts/NFDInstance.algo.ts:81", "teal": 323}, {"pc": [333, 334], "source": "contracts/NFDInstance.algo.ts:81", "teal": 324}, {"pc": [335, 336, 337], "source": "contracts/NFDInstance.algo.ts:81", "teal": 325}, {"pc": [338, 339], "source": "contracts/NFDInstance.algo.ts:81", "teal": 326}, {"pc": [340, 341], "source": "contracts/NFDInstance.algo.ts:84", "teal": 330}, {"pc": [342, 343], "source": "contracts/NFDInstance.algo.ts:84", "teal": 331}, {"pc": [344], "source": "contracts/NFDInstance.algo.ts:84", "teal": 332}, {"pc": [345, 346], "source": "contracts/NFDInstance.algo.ts:84", "teal": 333}, {"pc": [347], "source": "contracts/NFDInstance.algo.ts:84", "teal": 334}, {"pc": [348], "source": "contracts/NFDInstance.algo.ts:84", "teal": 335}, {"pc": [349], "source": "contracts/NFDInstance.algo.ts:84", "teal": 336}, {"pc": [350], "source": "contracts/NFDInstance.algo.ts:84", "teal": 337}, {"pc": [351, 352], "source": "contracts/NFDInstance.algo.ts:84", "teal": 338}, {"pc": [353], "source": "contracts/NFDInstance.algo.ts:84", "teal": 339}, {"pc": [354], "source": "contracts/NFDInstance.algo.ts:84", "teal": 340}, {"pc": [355], "source": "contracts/NFDInstance.algo.ts:84", "teal": 341}, {"pc": [356], "source": "contracts/NFDInstance.algo.ts:84", "teal": 342}, {"pc": [357, 358], "source": "contracts/NFDInstance.algo.ts:84", "teal": 343}, {"pc": [359, 360], "source": "contracts/NFDInstance.algo.ts:84", "teal": 344}, {"pc": [361], "source": "contracts/NFDInstance.algo.ts:84", "teal": 345}, {"pc": [362], "source": "contracts/NFDInstance.algo.ts:84", "teal": 346}, {"pc": [363], "source": "contracts/NFDInstance.algo.ts:84", "teal": 347}, {"pc": [364, 365], "source": "contracts/NFDInstance.algo.ts:88", "teal": 352}, {"pc": [366, 367], "source": "contracts/NFDInstance.algo.ts:88", "teal": 353}, {"pc": [368, 369, 370], "source": "contracts/NFDInstance.algo.ts:88", "teal": 354}, {"pc": [371, 372], "source": "contracts/NFDInstance.algo.ts:88", "teal": 355}, {"pc": [373], "source": "contracts/NFDInstance.algo.ts:88", "teal": 356}, {"pc": [374, 375, 376], "source": "contracts/NFDInstance.algo.ts:88", "teal": 357}, {"pc": [377, 378], "source": "contracts/NFDInstance.algo.ts:91", "teal": 365}, {"pc": [379, 380], "source": "contracts/NFDInstance.algo.ts:91", "teal": 366}, {"pc": [381], "source": "contracts/NFDInstance.algo.ts:91", "teal": 367}, {"pc": [382], "errorMessage": "parent commission address must be set if parent app id is set and parent is unlocked", "source": "contracts/NFDInstance.algo.ts:90", "teal": 370}, {"pc": [383, 384], "source": "contracts/NFDInstance.algo.ts:98", "teal": 377}, {"pc": [385, 386], "source": "contracts/NFDInstance.algo.ts:98", "teal": 378}, {"pc": [387, 388, 389], "source": "contracts/NFDInstance.algo.ts:98", "teal": 379}, {"pc": [390, 391], "source": "contracts/NFDInstance.algo.ts:98", "teal": 380}, {"pc": [392], "source": "contracts/NFDInstance.algo.ts:98", "teal": 381}, {"pc": [393], "errorMessage": "the segment commission agent should be the parent nfd's seller", "source": "contracts/NFDInstance.algo.ts:97", "teal": 384}, {"pc": [394, 395], "source": "contracts/NFDInstance.algo.ts:101", "teal": 388}, {"pc": [396, 397], "source": "contracts/NFDInstance.algo.ts:101", "teal": 389}, {"pc": [398], "source": "contracts/NFDInstance.algo.ts:101", "teal": 390}, {"pc": [399], "source": "contracts/NFDInstance.algo.ts:32", "teal": 395}, {"pc": [400, 401, 402], "source": "contracts/NFDInstance.algo.ts:106", "teal": 400}, {"pc": [403, 404, 405], "source": "contracts/NFDInstance.algo.ts:106", "teal": 401}, {"pc": [406, 407, 408], "source": "contracts/NFDInstance.algo.ts:106", "teal": 404}, {"pc": [409], "source": "contracts/NFDInstance.algo.ts:106", "teal": 405}, {"pc": [410], "source": "contracts/NFDInstance.algo.ts:106", "teal": 406}, {"pc": [411, 412, 413], "source": "contracts/NFDInstance.algo.ts:106", "teal": 410}, {"pc": [414, 415], "source": "contracts/NFDInstance.algo.ts:110", "teal": 414}, {"pc": [416], "source": "contracts/NFDInstance.algo.ts:110", "teal": 415}, {"pc": [417, 418], "source": "contracts/NFDInstance.algo.ts:110", "teal": 416}, {"pc": [419], "source": "contracts/NFDInstance.algo.ts:110", "teal": 417}, {"pc": [420], "errorMessage": "contract must be unlocked to upgrade", "source": "contracts/NFDInstance.algo.ts:110", "teal": 420}, {"pc": [421, 422], "source": "contracts/NFDInstance.algo.ts:113", "teal": 424}, {"pc": [423, 424], "source": "contracts/NFDInstance.algo.ts:113", "teal": 425}, {"pc": [425], "source": "contracts/NFDInstance.algo.ts:113", "teal": 426}, {"pc": [426], "errorMessage": "caller must be NFD registry!", "source": "contracts/NFDInstance.algo.ts:113", "teal": 429}, {"pc": [427, 428], "source": "contracts/NFDInstance.algo.ts:114", "teal": 433}, {"pc": [429, 430], "source": "contracts/NFDInstance.algo.ts:114", "teal": 434}, {"pc": [431], "source": "contracts/NFDInstance.algo.ts:114", "teal": 435}, {"pc": [432], "source": "contracts/NFDInstance.algo.ts:115", "teal": 439}, {"pc": [433, 434], "source": "contracts/NFDInstance.algo.ts:115", "teal": 440}, {"pc": [435], "source": "contracts/NFDInstance.algo.ts:115", "teal": 441}, {"pc": [436], "source": "contracts/NFDInstance.algo.ts:115", "teal": 442}, {"pc": [437], "source": "contracts/NFDInstance.algo.ts:106", "teal": 443}, {"pc": [438, 439, 440], "source": "contracts/NFDInstance.algo.ts:118", "teal": 447}, {"pc": [441, 442, 443], "source": "contracts/NFDInstance.algo.ts:120", "teal": 451}, {"pc": [444], "source": "contracts/NFDInstance.algo.ts:120", "teal": 452}, {"pc": [445], "source": "contracts/NFDInstance.algo.ts:120", "teal": 453}, {"pc": [446], "source": "contracts/NFDInstance.algo.ts:120", "teal": 454}, {"pc": [447], "source": "contracts/NFDInstance.algo.ts:120", "teal": 455}, {"pc": [448], "source": "contracts/NFDInstance.algo.ts:120", "teal": 456}, {"pc": [449], "errorMessage": "can't still be in minting state", "source": "contracts/NFDInstance.algo.ts:120", "teal": 459}, {"pc": [450, 451, 452], "source": "contracts/NFDInstance.algo.ts:121", "teal": 464}, {"pc": [453, 454, 455, 456, 457], "source": "contracts/NFDInstance.algo.ts:121", "teal": 465}, {"pc": [458], "source": "contracts/NFDInstance.algo.ts:121", "teal": 466}, {"pc": [459, 460, 461], "source": "contracts/NFDInstance.algo.ts:121", "teal": 467}, {"pc": [462], "source": "contracts/NFDInstance.algo.ts:121", "teal": 472}, {"pc": [463, 464, 465], "source": "contracts/NFDInstance.algo.ts:125", "teal": 477}, {"pc": [466], "source": "contracts/NFDInstance.algo.ts:125", "teal": 478}, {"pc": [467], "errorMessage": "NFD can't be expired for these v1/v2 operations", "source": "contracts/NFDInstance.algo.ts:125", "teal": 481}, {"pc": [468, 469], "source": "contracts/NFDInstance.algo.ts:127", "teal": 486}, {"pc": [470, 471], "source": "contracts/NFDInstance.algo.ts:127", "teal": 487}, {"pc": [472], "source": "contracts/NFDInstance.algo.ts:127", "teal": 488}, {"pc": [473], "source": "contracts/NFDInstance.algo.ts:127", "teal": 489}, {"pc": [474, 475, 476], "source": "contracts/NFDInstance.algo.ts:127", "teal": 490}, {"pc": [477, 478, 479], "source": "contracts/NFDInstance.algo.ts:127", "teal": 491}, {"pc": [480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493], "source": "contracts/NFDInstance.algo.ts:127", "teal": 492}, {"pc": [494], "source": "contracts/NFDInstance.algo.ts:127", "teal": 493}, {"pc": [495], "source": "contracts/NFDInstance.algo.ts:127", "teal": 494}, {"pc": [496, 497, 498], "source": "contracts/NFDInstance.algo.ts:127", "teal": 497}, {"pc": [499, 500, 501], "source": "contracts/NFDInstance.algo.ts:133", "teal": 502}, {"pc": [502], "source": "contracts/NFDInstance.algo.ts:134", "teal": 506}, {"pc": [503, 504], "source": "contracts/NFDInstance.algo.ts:136", "teal": 512}, {"pc": [505], "source": "contracts/NFDInstance.algo.ts:136", "teal": 513}, {"pc": [506], "source": "contracts/NFDInstance.algo.ts:136", "teal": 514}, {"pc": [507], "source": "contracts/NFDInstance.algo.ts:136", "teal": 515}, {"pc": [508, 509, 510], "source": "contracts/NFDInstance.algo.ts:136", "teal": 516}, {"pc": [511, 512, 513], "source": "contracts/NFDInstance.algo.ts:136", "teal": 517}, {"pc": [514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527], "source": "contracts/NFDInstance.algo.ts:136", "teal": 518}, {"pc": [528], "source": "contracts/NFDInstance.algo.ts:136", "teal": 519}, {"pc": [529], "source": "contracts/NFDInstance.algo.ts:136", "teal": 520}, {"pc": [530, 531, 532], "source": "contracts/NFDInstance.algo.ts:136", "teal": 523}, {"pc": [533, 534, 535], "source": "contracts/NFDInstance.algo.ts:141", "teal": 528}, {"pc": [536], "source": "contracts/NFDInstance.algo.ts:142", "teal": 532}, {"pc": [537, 538], "source": "contracts/NFDInstance.algo.ts:144", "teal": 538}, {"pc": [539], "source": "contracts/NFDInstance.algo.ts:144", "teal": 539}, {"pc": [540], "source": "contracts/NFDInstance.algo.ts:144", "teal": 540}, {"pc": [541], "source": "contracts/NFDInstance.algo.ts:144", "teal": 541}, {"pc": [542, 543, 544], "source": "contracts/NFDInstance.algo.ts:144", "teal": 542}, {"pc": [545, 546, 547], "source": "contracts/NFDInstance.algo.ts:144", "teal": 543}, {"pc": [548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562], "source": "contracts/NFDInstance.algo.ts:144", "teal": 544}, {"pc": [563], "source": "contracts/NFDInstance.algo.ts:144", "teal": 545}, {"pc": [564], "source": "contracts/NFDInstance.algo.ts:144", "teal": 546}, {"pc": [565, 566, 567], "source": "contracts/NFDInstance.algo.ts:144", "teal": 549}, {"pc": [568, 569, 570], "source": "contracts/NFDInstance.algo.ts:149", "teal": 554}, {"pc": [571, 572, 573], "source": "contracts/NFDInstance.algo.ts:149", "teal": 555}, {"pc": [574], "source": "contracts/NFDInstance.algo.ts:149", "teal": 556}, {"pc": [575], "source": "contracts/NFDInstance.algo.ts:150", "teal": 560}, {"pc": [576, 577], "source": "contracts/NFDInstance.algo.ts:153", "teal": 566}, {"pc": [578], "source": "contracts/NFDInstance.algo.ts:153", "teal": 567}, {"pc": [579], "source": "contracts/NFDInstance.algo.ts:153", "teal": 568}, {"pc": [580], "source": "contracts/NFDInstance.algo.ts:153", "teal": 569}, {"pc": [581, 582, 583], "source": "contracts/NFDInstance.algo.ts:153", "teal": 570}, {"pc": [584, 585, 586], "source": "contracts/NFDInstance.algo.ts:153", "teal": 571}, {"pc": [587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599], "source": "contracts/NFDInstance.algo.ts:153", "teal": 572}, {"pc": [600], "source": "contracts/NFDInstance.algo.ts:153", "teal": 573}, {"pc": [601], "source": "contracts/NFDInstance.algo.ts:153", "teal": 574}, {"pc": [602, 603, 604], "source": "contracts/NFDInstance.algo.ts:153", "teal": 577}, {"pc": [605, 606, 607], "source": "contracts/NFDInstance.algo.ts:154", "teal": 582}, {"pc": [608, 609, 610], "source": "contracts/NFDInstance.algo.ts:154", "teal": 583}, {"pc": [611], "source": "contracts/NFDInstance.algo.ts:155", "teal": 587}, {"pc": [612, 613], "source": "contracts/NFDInstance.algo.ts:159", "teal": 593}, {"pc": [614], "source": "contracts/NFDInstance.algo.ts:159", "teal": 594}, {"pc": [615], "source": "contracts/NFDInstance.algo.ts:159", "teal": 595}, {"pc": [616], "source": "contracts/NFDInstance.algo.ts:159", "teal": 596}, {"pc": [617, 618, 619], "source": "contracts/NFDInstance.algo.ts:159", "teal": 597}, {"pc": [620, 621, 622], "source": "contracts/NFDInstance.algo.ts:159", "teal": 598}, {"pc": [623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637], "source": "contracts/NFDInstance.algo.ts:159", "teal": 599}, {"pc": [638], "source": "contracts/NFDInstance.algo.ts:159", "teal": 600}, {"pc": [639], "source": "contracts/NFDInstance.algo.ts:159", "teal": 601}, {"pc": [640, 641, 642], "source": "contracts/NFDInstance.algo.ts:159", "teal": 604}, {"pc": [643, 644, 645], "source": "contracts/NFDInstance.algo.ts:160", "teal": 609}, {"pc": [646, 647], "source": "contracts/NFDInstance.algo.ts:160", "teal": 610}, {"pc": [648], "source": "contracts/NFDInstance.algo.ts:160", "teal": 611}, {"pc": [649, 650, 651], "source": "contracts/NFDInstance.algo.ts:160", "teal": 612}, {"pc": [652], "source": "contracts/NFDInstance.algo.ts:161", "teal": 616}, {"pc": [653, 654], "source": "contracts/NFDInstance.algo.ts:166", "teal": 622}, {"pc": [655, 656], "source": "contracts/NFDInstance.algo.ts:166", "teal": 623}, {"pc": [657], "source": "contracts/NFDInstance.algo.ts:166", "teal": 624}, {"pc": [658], "source": "contracts/NFDInstance.algo.ts:166", "teal": 625}, {"pc": [659, 660, 661], "source": "contracts/NFDInstance.algo.ts:166", "teal": 626}, {"pc": [662, 663, 664], "source": "contracts/NFDInstance.algo.ts:166", "teal": 627}, {"pc": [665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678], "source": "contracts/NFDInstance.algo.ts:166", "teal": 628}, {"pc": [679], "source": "contracts/NFDInstance.algo.ts:166", "teal": 629}, {"pc": [680], "source": "contracts/NFDInstance.algo.ts:166", "teal": 630}, {"pc": [681, 682, 683], "source": "contracts/NFDInstance.algo.ts:166", "teal": 633}, {"pc": [684, 685, 686], "source": "contracts/NFDInstance.algo.ts:167", "teal": 638}, {"pc": [687], "source": "contracts/NFDInstance.algo.ts:167", "teal": 639}, {"pc": [688, 689, 690], "source": "contracts/NFDInstance.algo.ts:167", "teal": 640}, {"pc": [691, 692], "source": "contracts/NFDInstance.algo.ts:167", "teal": 641}, {"pc": [693], "source": "contracts/NFDInstance.algo.ts:167", "teal": 642}, {"pc": [694, 695, 696], "source": "contracts/NFDInstance.algo.ts:167", "teal": 643}, {"pc": [697], "source": "contracts/NFDInstance.algo.ts:168", "teal": 647}, {"pc": [698, 699], "source": "contracts/NFDInstance.algo.ts:175", "teal": 653}, {"pc": [700], "source": "contracts/NFDInstance.algo.ts:175", "teal": 654}, {"pc": [701], "source": "contracts/NFDInstance.algo.ts:175", "teal": 655}, {"pc": [702], "source": "contracts/NFDInstance.algo.ts:175", "teal": 656}, {"pc": [703, 704, 705], "source": "contracts/NFDInstance.algo.ts:175", "teal": 657}, {"pc": [706, 707, 708], "source": "contracts/NFDInstance.algo.ts:175", "teal": 658}, {"pc": [709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721], "source": "contracts/NFDInstance.algo.ts:175", "teal": 659}, {"pc": [722], "source": "contracts/NFDInstance.algo.ts:175", "teal": 660}, {"pc": [723], "source": "contracts/NFDInstance.algo.ts:175", "teal": 661}, {"pc": [724, 725, 726], "source": "contracts/NFDInstance.algo.ts:175", "teal": 664}, {"pc": [727, 728, 729], "source": "contracts/NFDInstance.algo.ts:176", "teal": 669}, {"pc": [730], "source": "contracts/NFDInstance.algo.ts:177", "teal": 673}, {"pc": [731], "errorMessage": "unknown method", "source": "contracts/NFDInstance.algo.ts:180", "teal": 677}, {"pc": [732], "source": "contracts/NFDInstance.algo.ts:118", "teal": 678}, {"pc": [733, 734, 735], "source": "contracts/NFDInstance.algo.ts:184", "teal": 683}, {"pc": [736], "source": "contracts/NFDInstance.algo.ts:184", "teal": 684}, {"pc": [737], "source": "contracts/NFDInstance.algo.ts:184", "teal": 685}, {"pc": [738, 739, 740], "source": "contracts/NFDInstance.algo.ts:184", "teal": 689}, {"pc": [741], "source": "contracts/NFDInstance.algo.ts:184", "teal": 690}, {"pc": [742, 743, 744], "source": "contracts/NFDInstance.algo.ts:189", "teal": 695}, {"pc": [745, 746, 747], "source": "contracts/NFDInstance.algo.ts:189", "teal": 696}, {"pc": [748, 749, 750], "source": "contracts/NFDInstance.algo.ts:189", "teal": 699}, {"pc": [751, 752, 753], "source": "contracts/NFDInstance.algo.ts:189", "teal": 700}, {"pc": [754, 755, 756], "source": "contracts/NFDInstance.algo.ts:189", "teal": 703}, {"pc": [757], "source": "contracts/NFDInstance.algo.ts:189", "teal": 704}, {"pc": [758], "source": "contracts/NFDInstance.algo.ts:189", "teal": 705}, {"pc": [759, 760, 761], "source": "contracts/NFDInstance.algo.ts:189", "teal": 709}, {"pc": [762], "source": "contracts/NFDInstance.algo.ts:189", "teal": 712}, {"pc": [763, 764], "source": "contracts/NFDInstance.algo.ts:190", "teal": 716}, {"pc": [765, 766], "source": "contracts/NFDInstance.algo.ts:190", "teal": 717}, {"pc": [767], "source": "contracts/NFDInstance.algo.ts:190", "teal": 718}, {"pc": [768], "errorMessage": "caller must be NFD registry!", "source": "contracts/NFDInstance.algo.ts:190", "teal": 721}, {"pc": [769], "source": "contracts/NFDInstance.algo.ts:191", "teal": 725}, {"pc": [770], "source": "contracts/NFDInstance.algo.ts:191", "teal": 726}, {"pc": [771, 772], "source": "contracts/NFDInstance.algo.ts:191", "teal": 727}, {"pc": [773], "source": "contracts/NFDInstance.algo.ts:191", "teal": 728}, {"pc": [774], "source": "contracts/NFDInstance.algo.ts:191", "teal": 729}, {"pc": [775], "source": "contracts/NFDInstance.algo.ts:193", "teal": 743}, {"pc": [776, 777], "source": "contracts/NFDInstance.algo.ts:193", "teal": 744}, {"pc": [778, 779], "source": "contracts/NFDInstance.algo.ts:193", "teal": 745}, {"pc": [780, 781, 782, 783, 784], "source": "contracts/NFDInstance.algo.ts:194", "teal": 749}, {"pc": [785, 786], "source": "contracts/NFDInstance.algo.ts:194", "teal": 750}, {"pc": [787, 788], "source": "contracts/NFDInstance.algo.ts:195", "teal": 754}, {"pc": [789, 790], "source": "contracts/NFDInstance.algo.ts:195", "teal": 755}, {"pc": [791], "source": "contracts/NFDInstance.algo.ts:196", "teal": 759}, {"pc": [792, 793], "source": "contracts/NFDInstance.algo.ts:196", "teal": 760}, {"pc": [794], "source": "contracts/NFDInstance.algo.ts:197", "teal": 764}, {"pc": [795, 796], "source": "contracts/NFDInstance.algo.ts:197", "teal": 765}, {"pc": [797], "source": "contracts/NFDInstance.algo.ts:198", "teal": 769}, {"pc": [798, 799], "source": "contracts/NFDInstance.algo.ts:198", "teal": 770}, {"pc": [800, 801], "source": "contracts/NFDInstance.algo.ts:199", "teal": 774}, {"pc": [802, 803], "source": "contracts/NFDInstance.algo.ts:199", "teal": 775}, {"pc": [804, 805], "source": "contracts/NFDInstance.algo.ts:200", "teal": 779}, {"pc": [806, 807], "source": "contracts/NFDInstance.algo.ts:200", "teal": 780}, {"pc": [808, 809], "source": "contracts/NFDInstance.algo.ts:201", "teal": 784}, {"pc": [810, 811], "source": "contracts/NFDInstance.algo.ts:201", "teal": 785}, {"pc": [812, 813], "source": "contracts/NFDInstance.algo.ts:202", "teal": 789}, {"pc": [814, 815], "source": "contracts/NFDInstance.algo.ts:202", "teal": 790}, {"pc": [816], "source": "contracts/NFDInstance.algo.ts:193", "teal": 793}, {"pc": [817, 818], "source": "contracts/NFDInstance.algo.ts:193", "teal": 794}, {"pc": [819], "source": "contracts/NFDInstance.algo.ts:193", "teal": 797}, {"pc": [820, 821], "source": "contracts/NFDInstance.algo.ts:193", "teal": 798}, {"pc": [822, 823], "source": "contracts/NFDInstance.algo.ts:193", "teal": 799}, {"pc": [824, 825], "source": "contracts/NFDInstance.algo.ts:204", "teal": 803}, {"pc": [826, 827], "source": "contracts/NFDInstance.algo.ts:204", "teal": 804}, {"pc": [828], "source": "contracts/NFDInstance.algo.ts:204", "teal": 805}, {"pc": [829], "source": "contracts/NFDInstance.algo.ts:204", "teal": 806}, {"pc": [830], "source": "contracts/NFDInstance.algo.ts:205", "teal": 810}, {"pc": [831, 832], "source": "contracts/NFDInstance.algo.ts:205", "teal": 811}, {"pc": [833], "source": "contracts/NFDInstance.algo.ts:205", "teal": 812}, {"pc": [834, 835], "source": "contracts/NFDInstance.algo.ts:206", "teal": 816}, {"pc": [836], "source": "contracts/NFDInstance.algo.ts:206", "teal": 817}, {"pc": [837], "source": "contracts/NFDInstance.algo.ts:206", "teal": 818}, {"pc": [838], "source": "contracts/NFDInstance.algo.ts:189", "teal": 819}, {"pc": [839, 840, 841], "source": "contracts/NFDInstance.algo.ts:213", "teal": 824}, {"pc": [842, 843, 844], "source": "contracts/NFDInstance.algo.ts:213", "teal": 827}, {"pc": [845], "source": "contracts/NFDInstance.algo.ts:213", "teal": 828}, {"pc": [846], "source": "contracts/NFDInstance.algo.ts:213", "teal": 829}, {"pc": [847, 848, 849], "source": "contracts/NFDInstance.algo.ts:213", "teal": 833}, {"pc": [850], "source": "contracts/NFDInstance.algo.ts:213", "teal": 836}, {"pc": [851, 852], "source": "contracts/NFDInstance.algo.ts:213", "teal": 837}, {"pc": [853, 854, 855], "source": "contracts/NFDInstance.algo.ts:214", "teal": 841}, {"pc": [856], "source": "contracts/NFDInstance.algo.ts:214", "teal": 842}, {"pc": [857], "source": "contracts/NFDInstance.algo.ts:214", "teal": 843}, {"pc": [858], "source": "contracts/NFDInstance.algo.ts:214", "teal": 844}, {"pc": [859], "source": "contracts/NFDInstance.algo.ts:214", "teal": 845}, {"pc": [860], "source": "contracts/NFDInstance.algo.ts:214", "teal": 846}, {"pc": [861], "source": "contracts/NFDInstance.algo.ts:214", "teal": 847}, {"pc": [862], "source": "contracts/NFDInstance.algo.ts:215", "teal": 851}, {"pc": [863, 864], "source": "contracts/NFDInstance.algo.ts:215", "teal": 852}, {"pc": [865], "source": "contracts/NFDInstance.algo.ts:215", "teal": 853}, {"pc": [866], "source": "contracts/NFDInstance.algo.ts:215", "teal": 854}, {"pc": [867, 868, 869], "source": "contracts/NFDInstance.algo.ts:217", "teal": 858}, {"pc": [870, 871], "source": "contracts/NFDInstance.algo.ts:217", "teal": 859}, {"pc": [872], "source": "contracts/NFDInstance.algo.ts:218", "teal": 863}, {"pc": [873, 874], "source": "contracts/NFDInstance.algo.ts:218", "teal": 864}, {"pc": [875], "source": "contracts/NFDInstance.algo.ts:219", "teal": 868}, {"pc": [876, 877], "source": "contracts/NFDInstance.algo.ts:219", "teal": 869}, {"pc": [878, 879], "source": "contracts/NFDInstance.algo.ts:219", "teal": 874}, {"pc": [880, 881], "source": "contracts/NFDInstance.algo.ts:219", "teal": 875}, {"pc": [882], "source": "contracts/NFDInstance.algo.ts:219", "teal": 876}, {"pc": [883], "source": "contracts/NFDInstance.algo.ts:219", "teal": 877}, {"pc": [884], "source": "contracts/NFDInstance.algo.ts:219", "teal": 878}, {"pc": [885, 886, 887], "source": "contracts/NFDInstance.algo.ts:219", "teal": 879}, {"pc": [888, 889], "source": "contracts/NFDInstance.algo.ts:220", "teal": 884}, {"pc": [890, 891], "source": "contracts/NFDInstance.algo.ts:220", "teal": 885}, {"pc": [892], "source": "contracts/NFDInstance.algo.ts:220", "teal": 886}, {"pc": [893, 894, 895], "source": "contracts/NFDInstance.algo.ts:220", "teal": 887}, {"pc": [896], "source": "contracts/NFDInstance.algo.ts:221", "teal": 892}, {"pc": [897, 898], "source": "contracts/NFDInstance.algo.ts:221", "teal": 893}, {"pc": [899, 900], "source": "contracts/NFDInstance.algo.ts:221", "teal": 894}, {"pc": [901], "source": "contracts/NFDInstance.algo.ts:221", "teal": 895}, {"pc": [902, 903], "source": "contracts/NFDInstance.algo.ts:221", "teal": 896}, {"pc": [904, 905], "source": "contracts/NFDInstance.algo.ts:221", "teal": 897}, {"pc": [906], "source": "contracts/NFDInstance.algo.ts:221", "teal": 898}, {"pc": [907, 908], "source": "contracts/NFDInstance.algo.ts:221", "teal": 899}, {"pc": [909, 910], "source": "contracts/NFDInstance.algo.ts:221", "teal": 900}, {"pc": [911, 912], "source": "contracts/NFDInstance.algo.ts:221", "teal": 901}, {"pc": [913, 914], "source": "contracts/NFDInstance.algo.ts:221", "teal": 902}, {"pc": [915], "source": "contracts/NFDInstance.algo.ts:221", "teal": 903}, {"pc": [916, 917], "source": "contracts/NFDInstance.algo.ts:223", "teal": 908}, {"pc": [918, 919], "source": "contracts/NFDInstance.algo.ts:223", "teal": 909}, {"pc": [920], "source": "contracts/NFDInstance.algo.ts:223", "teal": 910}, {"pc": [921, 922], "source": "contracts/NFDInstance.algo.ts:223", "teal": 911}, {"pc": [923], "source": "contracts/NFDInstance.algo.ts:223", "teal": 912}, {"pc": [924], "source": "contracts/NFDInstance.algo.ts:223", "teal": 913}, {"pc": [925], "source": "contracts/NFDInstance.algo.ts:223", "teal": 914}, {"pc": [926], "source": "contracts/NFDInstance.algo.ts:223", "teal": 915}, {"pc": [927], "source": "contracts/NFDInstance.algo.ts:223", "teal": 916}, {"pc": [928, 929], "source": "contracts/NFDInstance.algo.ts:223", "teal": 917}, {"pc": [930, 931], "source": "contracts/NFDInstance.algo.ts:223", "teal": 918}, {"pc": [932, 933], "source": "contracts/NFDInstance.algo.ts:223", "teal": 919}, {"pc": [934], "source": "contracts/NFDInstance.algo.ts:223", "teal": 920}, {"pc": [935], "source": "contracts/NFDInstance.algo.ts:223", "teal": 921}, {"pc": [936], "source": "contracts/NFDInstance.algo.ts:223", "teal": 922}, {"pc": [937], "source": "contracts/NFDInstance.algo.ts:223", "teal": 923}, {"pc": [938, 939], "source": "contracts/NFDInstance.algo.ts:223", "teal": 924}, {"pc": [940], "source": "contracts/NFDInstance.algo.ts:223", "teal": 925}, {"pc": [941], "source": "contracts/NFDInstance.algo.ts:223", "teal": 926}, {"pc": [942], "source": "contracts/NFDInstance.algo.ts:223", "teal": 927}, {"pc": [943], "source": "contracts/NFDInstance.algo.ts:223", "teal": 928}, {"pc": [944], "source": "contracts/NFDInstance.algo.ts:223", "teal": 929}, {"pc": [945], "source": "contracts/NFDInstance.algo.ts:223", "teal": 930}, {"pc": [946], "source": "contracts/NFDInstance.algo.ts:223", "teal": 931}, {"pc": [947, 948, 949], "source": "contracts/NFDInstance.algo.ts:223", "teal": 932}, {"pc": [950, 951], "source": "contracts/NFDInstance.algo.ts:223", "teal": 933}, {"pc": [952, 953], "source": "contracts/NFDInstance.algo.ts:224", "teal": 937}, {"pc": [954, 955], "source": "contracts/NFDInstance.algo.ts:224", "teal": 938}, {"pc": [956, 957, 958], "source": "contracts/NFDInstance.algo.ts:224", "teal": 939}, {"pc": [959], "errorMessage": "field not removable or no permissions to remove", "source": "contracts/NFDInstance.algo.ts:224", "teal": 942}, {"pc": [960, 961], "source": "contracts/NFDInstance.algo.ts:225", "teal": 946}, {"pc": [962], "source": "contracts/NFDInstance.algo.ts:225", "teal": 947}, {"pc": [963], "errorMessage": "box value does not exist: this.boxes(name).size", "source": "contracts/NFDInstance.algo.ts:225", "teal": 950}, {"pc": [964, 965], "source": "contracts/NFDInstance.algo.ts:225", "teal": 951}, {"pc": [966, 967], "source": "contracts/NFDInstance.algo.ts:226", "teal": 955}, {"pc": [968], "source": "contracts/NFDInstance.algo.ts:226", "teal": 956}, {"pc": [969, 970], "source": "contracts/NFDInstance.algo.ts:227", "teal": 960}, {"pc": [971, 972], "source": "contracts/NFDInstance.algo.ts:227", "teal": 961}, {"pc": [973, 974], "source": "contracts/NFDInstance.algo.ts:227", "teal": 962}, {"pc": [975], "source": "contracts/NFDInstance.algo.ts:227", "teal": 963}, {"pc": [976, 977], "source": "contracts/NFDInstance.algo.ts:227", "teal": 964}, {"pc": [978], "source": "contracts/NFDInstance.algo.ts:227", "teal": 965}, {"pc": [979, 980], "source": "contracts/NFDInstance.algo.ts:227", "teal": 966}, {"pc": [981], "source": "contracts/NFDInstance.algo.ts:227", "teal": 967}, {"pc": [982], "source": "contracts/NFDInstance.algo.ts:227", "teal": 968}, {"pc": [983], "source": "contracts/NFDInstance.algo.ts:227", "teal": 969}, {"pc": [984, 985], "source": "contracts/NFDInstance.algo.ts:227", "teal": 970}, {"pc": [986, 987], "source": "contracts/NFDInstance.algo.ts:219", "teal": 975}, {"pc": [988], "source": "contracts/NFDInstance.algo.ts:219", "teal": 976}, {"pc": [989], "source": "contracts/NFDInstance.algo.ts:219", "teal": 977}, {"pc": [990, 991], "source": "contracts/NFDInstance.algo.ts:219", "teal": 978}, {"pc": [992, 993, 994], "source": "contracts/NFDInstance.algo.ts:219", "teal": 979}, {"pc": [995, 996], "source": "contracts/NFDInstance.algo.ts:229", "teal": 985}, {"pc": [997], "source": "contracts/NFDInstance.algo.ts:229", "teal": 986}, {"pc": [998], "source": "contracts/NFDInstance.algo.ts:229", "teal": 987}, {"pc": [999, 1000, 1001], "source": "contracts/NFDInstance.algo.ts:229", "teal": 988}, {"pc": [1002], "source": "contracts/NFDInstance.algo.ts:230", "teal": 997}, {"pc": [1003], "source": "contracts/NFDInstance.algo.ts:230", "teal": 998}, {"pc": [1004, 1005], "source": "contracts/NFDInstance.algo.ts:230", "teal": 999}, {"pc": [1006, 1007], "source": "contracts/NFDInstance.algo.ts:231", "teal": 1003}, {"pc": [1008, 1009], "source": "contracts/NFDInstance.algo.ts:231", "teal": 1004}, {"pc": [1010, 1011], "source": "contracts/NFDInstance.algo.ts:232", "teal": 1008}, {"pc": [1012, 1013], "source": "contracts/NFDInstance.algo.ts:232", "teal": 1009}, {"pc": [1014, 1015], "source": "contracts/NFDInstance.algo.ts:233", "teal": 1013}, {"pc": [1016, 1017], "source": "contracts/NFDInstance.algo.ts:233", "teal": 1014}, {"pc": [1018], "source": "contracts/NFDInstance.algo.ts:230", "teal": 1017}, {"pc": [1019, 1020], "source": "contracts/NFDInstance.algo.ts:230", "teal": 1018}, {"pc": [1021], "source": "contracts/NFDInstance.algo.ts:230", "teal": 1021}, {"pc": [1022], "source": "contracts/NFDInstance.algo.ts:213", "teal": 1024}, {"pc": [1023, 1024, 1025], "source": "contracts/NFDInstance.algo.ts:238", "teal": 1028}, {"pc": [1026], "source": "contracts/NFDInstance.algo.ts:238", "teal": 1031}, {"pc": [1027, 1028], "source": "contracts/NFDInstance.algo.ts:238", "teal": 1032}, {"pc": [1029, 1030, 1031], "source": "contracts/NFDInstance.algo.ts:239", "teal": 1036}, {"pc": [1032], "source": "contracts/NFDInstance.algo.ts:239", "teal": 1037}, {"pc": [1033], "source": "contracts/NFDInstance.algo.ts:239", "teal": 1038}, {"pc": [1034], "source": "contracts/NFDInstance.algo.ts:239", "teal": 1039}, {"pc": [1035], "source": "contracts/NFDInstance.algo.ts:239", "teal": 1040}, {"pc": [1036], "source": "contracts/NFDInstance.algo.ts:239", "teal": 1041}, {"pc": [1037], "source": "contracts/NFDInstance.algo.ts:239", "teal": 1042}, {"pc": [1038, 1039, 1040], "source": "contracts/NFDInstance.algo.ts:241", "teal": 1046}, {"pc": [1041, 1042], "source": "contracts/NFDInstance.algo.ts:241", "teal": 1047}, {"pc": [1043], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1051}, {"pc": [1044, 1045], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1052}, {"pc": [1046, 1047], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1057}, {"pc": [1048, 1049], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1058}, {"pc": [1050], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1059}, {"pc": [1051, 1052, 1053], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1060}, {"pc": [1054, 1055], "source": "contracts/NFDInstance.algo.ts:243", "teal": 1064}, {"pc": [1056, 1057], "source": "contracts/NFDInstance.algo.ts:243", "teal": 1065}, {"pc": [1058, 1059], "source": "contracts/NFDInstance.algo.ts:243", "teal": 1066}, {"pc": [1060, 1061], "source": "contracts/NFDInstance.algo.ts:244", "teal": 1070}, {"pc": [1062, 1063], "source": "contracts/NFDInstance.algo.ts:244", "teal": 1071}, {"pc": [1064, 1065, 1066], "source": "contracts/NFDInstance.algo.ts:244", "teal": 1072}, {"pc": [1067], "errorMessage": "field not removable or no permissions to remove", "source": "contracts/NFDInstance.algo.ts:244", "teal": 1075}, {"pc": [1068, 1069], "source": "contracts/NFDInstance.algo.ts:245", "teal": 1079}, {"pc": [1070], "source": "contracts/NFDInstance.algo.ts:245", "teal": 1080}, {"pc": [1071, 1072], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1085}, {"pc": [1073], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1086}, {"pc": [1074], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1087}, {"pc": [1075, 1076], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1088}, {"pc": [1077, 1078, 1079], "source": "contracts/NFDInstance.algo.ts:242", "teal": 1089}, {"pc": [1080], "source": "contracts/NFDInstance.algo.ts:247", "teal": 1094}, {"pc": [1081, 1082], "source": "contracts/NFDInstance.algo.ts:247", "teal": 1095}, {"pc": [1083], "source": "contracts/NFDInstance.algo.ts:247", "teal": 1096}, {"pc": [1084], "source": "contracts/NFDInstance.algo.ts:247", "teal": 1097}, {"pc": [1085], "source": "contracts/NFDInstance.algo.ts:238", "teal": 1098}, {"pc": [1086, 1087, 1088], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1103}, {"pc": [1089], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1104}, {"pc": [1090, 1091, 1092], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1107}, {"pc": [1093, 1094, 1095], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1108}, {"pc": [1096, 1097, 1098], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1111}, {"pc": [1099], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1112}, {"pc": [1100], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1113}, {"pc": [1101, 1102, 1103], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1117}, {"pc": [1104], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1120}, {"pc": [1105], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1121}, {"pc": [1106, 1107], "source": "contracts/NFDInstance.algo.ts:258", "teal": 1125}, {"pc": [1108, 1109], "source": "contracts/NFDInstance.algo.ts:258", "teal": 1126}, {"pc": [1110], "source": "contracts/NFDInstance.algo.ts:258", "teal": 1127}, {"pc": [1111], "errorMessage": "caller must be NFD registry!", "source": "contracts/NFDInstance.algo.ts:258", "teal": 1130}, {"pc": [1112], "source": "contracts/NFDInstance.algo.ts:260", "teal": 1137}, {"pc": [1113, 1114], "source": "contracts/NFDInstance.algo.ts:260", "teal": 1138}, {"pc": [1115, 1116, 1117], "source": "contracts/NFDInstance.algo.ts:260", "teal": 1139}, {"pc": [1118, 1119], "source": "contracts/NFDInstance.algo.ts:260", "teal": 1140}, {"pc": [1120], "source": "contracts/NFDInstance.algo.ts:260", "teal": 1141}, {"pc": [1121], "errorMessage": "child NFD MUST still be in pre-claim state!", "source": "contracts/NFDInstance.algo.ts:259", "teal": 1144}, {"pc": [1122, 1123, 1124], "source": "contracts/NFDInstance.algo.ts:263", "teal": 1148}, {"pc": [1125], "source": "contracts/NFDInstance.algo.ts:263", "teal": 1149}, {"pc": [1126], "source": "contracts/NFDInstance.algo.ts:263", "teal": 1150}, {"pc": [1127], "source": "contracts/NFDInstance.algo.ts:263", "teal": 1151}, {"pc": [1128], "source": "contracts/NFDInstance.algo.ts:263", "teal": 1152}, {"pc": [1129], "source": "contracts/NFDInstance.algo.ts:263", "teal": 1153}, {"pc": [1130], "source": "contracts/NFDInstance.algo.ts:263", "teal": 1154}, {"pc": [1131, 1132, 1133], "source": "contracts/NFDInstance.algo.ts:264", "teal": 1158}, {"pc": [1134, 1135], "source": "contracts/NFDInstance.algo.ts:267", "teal": 1165}, {"pc": [1136, 1137], "source": "contracts/NFDInstance.algo.ts:267", "teal": 1166}, {"pc": [1138, 1139, 1140], "source": "contracts/NFDInstance.algo.ts:267", "teal": 1167}, {"pc": [1141, 1142], "source": "contracts/NFDInstance.algo.ts:267", "teal": 1168}, {"pc": [1143], "source": "contracts/NFDInstance.algo.ts:267", "teal": 1169}, {"pc": [1144], "errorMessage": "passed in child name must match name in created nfd state", "source": "contracts/NFDInstance.algo.ts:266", "teal": 1172}, {"pc": [1145, 1146], "source": "contracts/NFDInstance.algo.ts:270", "teal": 1176}, {"pc": [1147], "source": "contracts/NFDInstance.algo.ts:270", "teal": 1177}, {"pc": [1148, 1149], "source": "contracts/NFDInstance.algo.ts:270", "teal": 1178}, {"pc": [1150, 1151], "source": "contracts/NFDInstance.algo.ts:275", "teal": 1182}, {"pc": [1152], "source": "contracts/NFDInstance.algo.ts:275", "teal": 1183}, {"pc": [1153, 1154], "source": "contracts/NFDInstance.algo.ts:275", "teal": 1184}, {"pc": [1155], "source": "contracts/NFDInstance.algo.ts:275", "teal": 1185}, {"pc": [1156], "source": "contracts/NFDInstance.algo.ts:275", "teal": 1186}, {"pc": [1157], "source": "contracts/NFDInstance.algo.ts:275", "teal": 1187}, {"pc": [1158], "source": "contracts/NFDInstance.algo.ts:275", "teal": 1188}, {"pc": [1159, 1160], "source": "contracts/NFDInstance.algo.ts:275", "teal": 1189}, {"pc": [1161, 1162], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1196}, {"pc": [1163, 1164], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1197}, {"pc": [1165, 1166], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1198}, {"pc": [1167], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1199}, {"pc": [1168], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1200}, {"pc": [1169], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1201}, {"pc": [1170], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1202}, {"pc": [1171, 1172], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1203}, {"pc": [1173, 1174], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1204}, {"pc": [1175], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1205}, {"pc": [1176], "source": "contracts/NFDInstance.algo.ts:277", "teal": 1206}, {"pc": [1177], "errorMessage": "parent must be suffix of child", "source": "contracts/NFDInstance.algo.ts:276", "teal": 1209}, {"pc": [1178, 1179], "source": "contracts/NFDInstance.algo.ts:280", "teal": 1213}, {"pc": [1180, 1181], "source": "contracts/NFDInstance.algo.ts:280", "teal": 1214}, {"pc": [1182, 1183, 1184], "source": "contracts/NFDInstance.algo.ts:280", "teal": 1215}, {"pc": [1185], "source": "contracts/NFDInstance.algo.ts:280", "teal": 1216}, {"pc": [1186, 1187], "source": "contracts/NFDInstance.algo.ts:281", "teal": 1220}, {"pc": [1188], "source": "contracts/NFDInstance.algo.ts:281", "teal": 1221}, {"pc": [1189, 1190, 1191], "source": "contracts/NFDInstance.algo.ts:281", "teal": 1222}, {"pc": [1192], "source": "contracts/NFDInstance.algo.ts:281", "teal": 1223}, {"pc": [1193], "source": "contracts/NFDInstance.algo.ts:281", "teal": 1224}, {"pc": [1194], "source": "contracts/NFDInstance.algo.ts:281", "teal": 1225}, {"pc": [1195], "source": "contracts/NFDInstance.algo.ts:281", "teal": 1226}, {"pc": [1196], "source": "contracts/NFDInstance.algo.ts:282", "teal": 1230}, {"pc": [1197, 1198], "source": "contracts/NFDInstance.algo.ts:282", "teal": 1231}, {"pc": [1199], "source": "contracts/NFDInstance.algo.ts:282", "teal": 1232}, {"pc": [1200], "source": "contracts/NFDInstance.algo.ts:282", "teal": 1233}, {"pc": [1201], "source": "contracts/NFDInstance.algo.ts:257", "teal": 1234}, {"pc": [1202, 1203], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1239}, {"pc": [1204, 1205, 1206], "source": "contracts/NFDInstance.algo.ts:286", "teal": 1242}, {"pc": [1207, 1208, 1209], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1245}, {"pc": [1210], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1246}, {"pc": [1211], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1247}, {"pc": [1212], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1248}, {"pc": [1213], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1249}, {"pc": [1214], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1250}, {"pc": [1215, 1216, 1217], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1254}, {"pc": [1218], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1257}, {"pc": [1219, 1220], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1258}, {"pc": [1221], "source": "contracts/NFDInstance.algo.ts:287", "teal": 1262}, {"pc": [1222, 1223], "source": "contracts/NFDInstance.algo.ts:287", "teal": 1263}, {"pc": [1224], "source": "contracts/NFDInstance.algo.ts:288", "teal": 1267}, {"pc": [1225, 1226], "source": "contracts/NFDInstance.algo.ts:288", "teal": 1268}, {"pc": [1227], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1272}, {"pc": [1228, 1229], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1273}, {"pc": [1230, 1231], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1278}, {"pc": [1232, 1233], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1279}, {"pc": [1234], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1280}, {"pc": [1235], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1281}, {"pc": [1236], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1282}, {"pc": [1237, 1238, 1239], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1283}, {"pc": [1240, 1241], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1287}, {"pc": [1242, 1243], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1288}, {"pc": [1244], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1289}, {"pc": [1245, 1246], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1290}, {"pc": [1247], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1291}, {"pc": [1248], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1292}, {"pc": [1249], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1293}, {"pc": [1250], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1294}, {"pc": [1251], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1295}, {"pc": [1252, 1253], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1296}, {"pc": [1254, 1255], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1297}, {"pc": [1256, 1257], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1298}, {"pc": [1258], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1299}, {"pc": [1259], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1300}, {"pc": [1260], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1301}, {"pc": [1261], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1302}, {"pc": [1262, 1263], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1303}, {"pc": [1264], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1304}, {"pc": [1265], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1305}, {"pc": [1266], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1306}, {"pc": [1267], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1307}, {"pc": [1268], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1308}, {"pc": [1269], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1309}, {"pc": [1270], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1310}, {"pc": [1271, 1272, 1273], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1311}, {"pc": [1274, 1275], "source": "contracts/NFDInstance.algo.ts:291", "teal": 1312}, {"pc": [1276, 1277], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1316}, {"pc": [1278, 1279], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1317}, {"pc": [1280], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1318}, {"pc": [1281, 1282], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1319}, {"pc": [1283], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1320}, {"pc": [1284], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1321}, {"pc": [1285], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1322}, {"pc": [1286], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1323}, {"pc": [1287], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1324}, {"pc": [1288], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1325}, {"pc": [1289], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1326}, {"pc": [1290, 1291], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1327}, {"pc": [1292, 1293], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1328}, {"pc": [1294, 1295], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1329}, {"pc": [1296], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1330}, {"pc": [1297], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1331}, {"pc": [1298], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1332}, {"pc": [1299], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1333}, {"pc": [1300, 1301], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1334}, {"pc": [1302], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1335}, {"pc": [1303], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1336}, {"pc": [1304], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1337}, {"pc": [1305], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1338}, {"pc": [1306], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1339}, {"pc": [1307], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1340}, {"pc": [1308], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1341}, {"pc": [1309, 1310, 1311], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1342}, {"pc": [1312, 1313], "source": "contracts/NFDInstance.algo.ts:292", "teal": 1343}, {"pc": [1314, 1315], "source": "contracts/NFDInstance.algo.ts:293", "teal": 1347}, {"pc": [1316], "source": "contracts/NFDInstance.algo.ts:293", "teal": 1348}, {"pc": [1317], "source": "contracts/NFDInstance.algo.ts:293", "teal": 1349}, {"pc": [1318], "source": "contracts/NFDInstance.algo.ts:293", "teal": 1350}, {"pc": [1319, 1320], "source": "contracts/NFDInstance.algo.ts:293", "teal": 1351}, {"pc": [1321, 1322], "source": "contracts/NFDInstance.algo.ts:295", "teal": 1356}, {"pc": [1323], "source": "contracts/NFDInstance.algo.ts:295", "teal": 1357}, {"pc": [1324], "source": "contracts/NFDInstance.algo.ts:295", "teal": 1358}, {"pc": [1325], "source": "contracts/NFDInstance.algo.ts:295", "teal": 1359}, {"pc": [1326, 1327, 1328], "source": "contracts/NFDInstance.algo.ts:295", "teal": 1360}, {"pc": [1329, 1330], "source": "contracts/NFDInstance.algo.ts:296", "teal": 1366}, {"pc": [1331, 1332, 1333], "source": "contracts/NFDInstance.algo.ts:296", "teal": 1367}, {"pc": [1334, 1335], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1372}, {"pc": [1336, 1337], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1373}, {"pc": [1338, 1339], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1374}, {"pc": [1340, 1341], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1375}, {"pc": [1342], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1376}, {"pc": [1343, 1344], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1377}, {"pc": [1345], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1378}, {"pc": [1346], "errorMessage": "box value does not exist: this.boxes(name).size", "source": "contracts/NFDInstance.algo.ts:298", "teal": 1381}, {"pc": [1347], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1382}, {"pc": [1348], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1383}, {"pc": [1349], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1384}, {"pc": [1350], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1385}, {"pc": [1351, 1352], "source": "contracts/NFDInstance.algo.ts:298", "teal": 1386}, {"pc": [1353, 1354, 1355], "source": "contracts/NFDInstance.algo.ts:300", "teal": 1389}, {"pc": [1356, 1357], "source": "contracts/NFDInstance.algo.ts:302", "teal": 1395}, {"pc": [1358], "source": "contracts/NFDInstance.algo.ts:302", "teal": 1396}, {"pc": [1359, 1360, 1361], "source": "contracts/NFDInstance.algo.ts:302", "teal": 1397}, {"pc": [1362, 1363], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1402}, {"pc": [1364, 1365], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1403}, {"pc": [1366, 1367], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1404}, {"pc": [1368, 1369], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1405}, {"pc": [1370], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1406}, {"pc": [1371, 1372], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1407}, {"pc": [1373], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1408}, {"pc": [1374], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1409}, {"pc": [1375], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1410}, {"pc": [1376], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1411}, {"pc": [1377], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1412}, {"pc": [1378, 1379], "source": "contracts/NFDInstance.algo.ts:304", "teal": 1413}, {"pc": [1380, 1381, 1382], "source": "contracts/NFDInstance.algo.ts:305", "teal": 1414}, {"pc": [1383, 1384], "source": "contracts/NFDInstance.algo.ts:307", "teal": 1419}, {"pc": [1385], "source": "contracts/NFDInstance.algo.ts:307", "teal": 1420}, {"pc": [1386], "errorMessage": "box value does not exist: this.boxes(name).size", "source": "contracts/NFDInstance.algo.ts:307", "teal": 1423}, {"pc": [1387, 1388], "source": "contracts/NFDInstance.algo.ts:307", "teal": 1424}, {"pc": [1389, 1390], "source": "contracts/NFDInstance.algo.ts:308", "teal": 1429}, {"pc": [1391], "source": "contracts/NFDInstance.algo.ts:308", "teal": 1430}, {"pc": [1392, 1393], "source": "contracts/NFDInstance.algo.ts:308", "teal": 1431}, {"pc": [1394], "source": "contracts/NFDInstance.algo.ts:308", "teal": 1432}, {"pc": [1395, 1396, 1397], "source": "contracts/NFDInstance.algo.ts:308", "teal": 1433}, {"pc": [1398, 1399], "source": "contracts/NFDInstance.algo.ts:309", "teal": 1438}, {"pc": [1400, 1401], "source": "contracts/NFDInstance.algo.ts:309", "teal": 1439}, {"pc": [1402, 1403], "source": "contracts/NFDInstance.algo.ts:309", "teal": 1440}, {"pc": [1404, 1405], "source": "contracts/NFDInstance.algo.ts:309", "teal": 1441}, {"pc": [1406], "source": "contracts/NFDInstance.algo.ts:309", "teal": 1442}, {"pc": [1407], "source": "contracts/NFDInstance.algo.ts:309", "teal": 1443}, {"pc": [1408], "source": "contracts/NFDInstance.algo.ts:309", "teal": 1444}, {"pc": [1409], "source": "contracts/NFDInstance.algo.ts:309", "teal": 1445}, {"pc": [1410, 1411], "source": "contracts/NFDInstance.algo.ts:309", "teal": 1446}, {"pc": [1412, 1413, 1414], "source": "contracts/NFDInstance.algo.ts:308", "teal": 1447}, {"pc": [1415, 1416], "source": "contracts/NFDInstance.algo.ts:311", "teal": 1452}, {"pc": [1417, 1418], "source": "contracts/NFDInstance.algo.ts:311", "teal": 1453}, {"pc": [1419, 1420], "source": "contracts/NFDInstance.algo.ts:311", "teal": 1454}, {"pc": [1421], "source": "contracts/NFDInstance.algo.ts:311", "teal": 1455}, {"pc": [1422, 1423], "source": "contracts/NFDInstance.algo.ts:311", "teal": 1456}, {"pc": [1424], "source": "contracts/NFDInstance.algo.ts:311", "teal": 1457}, {"pc": [1425], "source": "contracts/NFDInstance.algo.ts:311", "teal": 1458}, {"pc": [1426], "source": "contracts/NFDInstance.algo.ts:311", "teal": 1459}, {"pc": [1427, 1428], "source": "contracts/NFDInstance.algo.ts:311", "teal": 1460}, {"pc": [1429, 1430], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1467}, {"pc": [1431], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1468}, {"pc": [1432], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1469}, {"pc": [1433, 1434], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1470}, {"pc": [1435, 1436, 1437], "source": "contracts/NFDInstance.algo.ts:290", "teal": 1471}, {"pc": [1438, 1439], "source": "contracts/NFDInstance.algo.ts:315", "teal": 1477}, {"pc": [1440, 1441], "source": "contracts/NFDInstance.algo.ts:315", "teal": 1478}, {"pc": [1442], "source": "contracts/NFDInstance.algo.ts:315", "teal": 1479}, {"pc": [1443, 1444, 1445], "source": "contracts/NFDInstance.algo.ts:315", "teal": 1480}, {"pc": [1446], "source": "contracts/NFDInstance.algo.ts:316", "teal": 1485}, {"pc": [1447, 1448, 1449], "source": "contracts/NFDInstance.algo.ts:316", "teal": 1486}, {"pc": [1450, 1451], "source": "contracts/NFDInstance.algo.ts:318", "teal": 1491}, {"pc": [1452, 1453], "source": "contracts/NFDInstance.algo.ts:318", "teal": 1492}, {"pc": [1454], "source": "contracts/NFDInstance.algo.ts:318", "teal": 1493}, {"pc": [1455, 1456], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1497}, {"pc": [1457, 1458], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1500}, {"pc": [1459], "source": "contracts/NFDInstance.algo.ts:285", "teal": 1501}, {"pc": [1460, 1461, 1462], "source": "contracts/NFDInstance.algo.ts:321", "teal": 1506}, {"pc": [1463, 1464, 1465], "source": "contracts/NFDInstance.algo.ts:321", "teal": 1509}, {"pc": [1466], "source": "contracts/NFDInstance.algo.ts:321", "teal": 1510}, {"pc": [1467], "source": "contracts/NFDInstance.algo.ts:321", "teal": 1511}, {"pc": [1468, 1469, 1470], "source": "contracts/NFDInstance.algo.ts:321", "teal": 1515}, {"pc": [1471], "source": "contracts/NFDInstance.algo.ts:321", "teal": 1518}, {"pc": [1472, 1473], "source": "contracts/NFDInstance.algo.ts:321", "teal": 1519}, {"pc": [1474, 1475, 1476], "source": "contracts/NFDInstance.algo.ts:322", "teal": 1523}, {"pc": [1477], "source": "contracts/NFDInstance.algo.ts:322", "teal": 1524}, {"pc": [1478], "source": "contracts/NFDInstance.algo.ts:322", "teal": 1525}, {"pc": [1479], "source": "contracts/NFDInstance.algo.ts:322", "teal": 1526}, {"pc": [1480], "source": "contracts/NFDInstance.algo.ts:322", "teal": 1527}, {"pc": [1481], "source": "contracts/NFDInstance.algo.ts:322", "teal": 1528}, {"pc": [1482], "source": "contracts/NFDInstance.algo.ts:322", "teal": 1529}, {"pc": [1483, 1484, 1485], "source": "contracts/NFDInstance.algo.ts:323", "teal": 1533}, {"pc": [1486], "source": "contracts/NFDInstance.algo.ts:323", "teal": 1534}, {"pc": [1487], "errorMessage": "can't update fields if NFD expired", "source": "contracts/NFDInstance.algo.ts:323", "teal": 1537}, {"pc": [1488], "source": "contracts/NFDInstance.algo.ts:325", "teal": 1541}, {"pc": [1489, 1490], "source": "contracts/NFDInstance.algo.ts:325", "teal": 1542}, {"pc": [1491], "source": "contracts/NFDInstance.algo.ts:325", "teal": 1543}, {"pc": [1492], "source": "contracts/NFDInstance.algo.ts:325", "teal": 1544}, {"pc": [1493, 1494], "source": "contracts/NFDInstance.algo.ts:328", "teal": 1549}, {"pc": [1495, 1496], "source": "contracts/NFDInstance.algo.ts:328", "teal": 1550}, {"pc": [1497], "source": "contracts/NFDInstance.algo.ts:328", "teal": 1551}, {"pc": [1498, 1499, 1500], "source": "contracts/NFDInstance.algo.ts:328", "teal": 1552}, {"pc": [1501, 1502], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1558}, {"pc": [1503], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1559}, {"pc": [1504], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1560}, {"pc": [1505], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1561}, {"pc": [1506], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1562}, {"pc": [1507], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1563}, {"pc": [1508, 1509, 1510], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1564}, {"pc": [1511, 1512], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1565}, {"pc": [1513, 1514], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1566}, {"pc": [1515], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1567}, {"pc": [1516, 1517], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1568}, {"pc": [1518, 1519], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1569}, {"pc": [1520, 1521], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1570}, {"pc": [1522], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1571}, {"pc": [1523], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1572}, {"pc": [1524], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1573}, {"pc": [1525], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1574}, {"pc": [1526, 1527], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1575}, {"pc": [1528], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1576}, {"pc": [1529], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1577}, {"pc": [1530], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1578}, {"pc": [1531], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1579}, {"pc": [1532], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1580}, {"pc": [1533], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1581}, {"pc": [1534], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1582}, {"pc": [1535, 1536, 1537], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1583}, {"pc": [1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1584}, {"pc": [1552], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1585}, {"pc": [1553], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1586}, {"pc": [1554, 1555, 1556], "source": "contracts/NFDInstance.algo.ts:329", "teal": 1589}, {"pc": [1557, 1558], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1594}, {"pc": [1559, 1560], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1595}, {"pc": [1561], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1596}, {"pc": [1562, 1563], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1597}, {"pc": [1564, 1565], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1598}, {"pc": [1566, 1567], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1599}, {"pc": [1568], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1600}, {"pc": [1569], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1601}, {"pc": [1570], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1602}, {"pc": [1571], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1603}, {"pc": [1572, 1573], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1604}, {"pc": [1574], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1605}, {"pc": [1575], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1606}, {"pc": [1576], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1607}, {"pc": [1577], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1608}, {"pc": [1578], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1609}, {"pc": [1579], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1610}, {"pc": [1580], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1611}, {"pc": [1581, 1582, 1583], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1612}, {"pc": [1584, 1585], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1613}, {"pc": [1586, 1587], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1614}, {"pc": [1588, 1589], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1615}, {"pc": [1590, 1591], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1616}, {"pc": [1592, 1593], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1617}, {"pc": [1594, 1595], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1618}, {"pc": [1596], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1619}, {"pc": [1597], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1620}, {"pc": [1598], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1621}, {"pc": [1599], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1622}, {"pc": [1600, 1601], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1623}, {"pc": [1602], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1624}, {"pc": [1603], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1625}, {"pc": [1604], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1626}, {"pc": [1605], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1627}, {"pc": [1606], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1628}, {"pc": [1607], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1629}, {"pc": [1608], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1630}, {"pc": [1609, 1610, 1611], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1631}, {"pc": [1612], "source": "contracts/NFDInstance.algo.ts:330", "teal": 1632}, {"pc": [1613], "source": "contracts/NFDInstance.algo.ts:331", "teal": 1636}, {"pc": [1614], "source": "contracts/NFDInstance.algo.ts:333", "teal": 1641}, {"pc": [1615], "errorMessage": "invalid update call by registry", "source": "contracts/NFDInstance.algo.ts:333", "teal": 1644}, {"pc": [1616, 1617, 1618], "source": "contracts/NFDInstance.algo.ts:336", "teal": 1649}, {"pc": [1619, 1620], "source": "contracts/NFDInstance.algo.ts:336", "teal": 1650}, {"pc": [1621], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1654}, {"pc": [1622, 1623], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1655}, {"pc": [1624, 1625], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1660}, {"pc": [1626, 1627], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1661}, {"pc": [1628], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1662}, {"pc": [1629], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1663}, {"pc": [1630], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1664}, {"pc": [1631, 1632, 1633], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1665}, {"pc": [1634, 1635], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1669}, {"pc": [1636, 1637], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1670}, {"pc": [1638], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1671}, {"pc": [1639, 1640], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1672}, {"pc": [1641], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1673}, {"pc": [1642], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1674}, {"pc": [1643], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1675}, {"pc": [1644], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1676}, {"pc": [1645], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1677}, {"pc": [1646, 1647], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1678}, {"pc": [1648, 1649], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1679}, {"pc": [1650, 1651], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1680}, {"pc": [1652], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1681}, {"pc": [1653], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1682}, {"pc": [1654], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1683}, {"pc": [1655], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1684}, {"pc": [1656, 1657], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1685}, {"pc": [1658], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1686}, {"pc": [1659], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1687}, {"pc": [1660], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1688}, {"pc": [1661], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1689}, {"pc": [1662], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1690}, {"pc": [1663], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1691}, {"pc": [1664], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1692}, {"pc": [1665, 1666, 1667], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1693}, {"pc": [1668, 1669], "source": "contracts/NFDInstance.algo.ts:338", "teal": 1694}, {"pc": [1670, 1671], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1698}, {"pc": [1672, 1673], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1699}, {"pc": [1674], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1700}, {"pc": [1675, 1676], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1701}, {"pc": [1677], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1702}, {"pc": [1678], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1703}, {"pc": [1679], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1704}, {"pc": [1680], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1705}, {"pc": [1681], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1706}, {"pc": [1682], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1707}, {"pc": [1683], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1708}, {"pc": [1684, 1685], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1709}, {"pc": [1686, 1687], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1710}, {"pc": [1688, 1689], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1711}, {"pc": [1690], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1712}, {"pc": [1691], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1713}, {"pc": [1692], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1714}, {"pc": [1693], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1715}, {"pc": [1694, 1695], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1716}, {"pc": [1696], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1717}, {"pc": [1697], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1718}, {"pc": [1698], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1719}, {"pc": [1699], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1720}, {"pc": [1700], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1721}, {"pc": [1701], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1722}, {"pc": [1702], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1723}, {"pc": [1703, 1704, 1705], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1724}, {"pc": [1706, 1707], "source": "contracts/NFDInstance.algo.ts:339", "teal": 1725}, {"pc": [1708, 1709], "source": "contracts/NFDInstance.algo.ts:341", "teal": 1732}, {"pc": [1710, 1711], "source": "contracts/NFDInstance.algo.ts:341", "teal": 1733}, {"pc": [1712, 1713], "source": "contracts/NFDInstance.algo.ts:341", "teal": 1734}, {"pc": [1714, 1715, 1716], "source": "contracts/NFDInstance.algo.ts:341", "teal": 1735}, {"pc": [1717], "errorMessage": "field not updatable or no permissions to update", "source": "contracts/NFDInstance.algo.ts:340", "teal": 1738}, {"pc": [1718, 1719], "source": "contracts/NFDInstance.algo.ts:344", "teal": 1742}, {"pc": [1720], "source": "contracts/NFDInstance.algo.ts:344", "teal": 1743}, {"pc": [1721, 1722], "source": "contracts/NFDInstance.algo.ts:345", "teal": 1748}, {"pc": [1723], "source": "contracts/NFDInstance.algo.ts:345", "teal": 1749}, {"pc": [1724], "source": "contracts/NFDInstance.algo.ts:345", "teal": 1750}, {"pc": [1725], "source": "contracts/NFDInstance.algo.ts:345", "teal": 1751}, {"pc": [1726, 1727, 1728], "source": "contracts/NFDInstance.algo.ts:345", "teal": 1752}, {"pc": [1729, 1730], "source": "contracts/NFDInstance.algo.ts:346", "teal": 1757}, {"pc": [1731, 1732], "source": "contracts/NFDInstance.algo.ts:346", "teal": 1758}, {"pc": [1733], "source": "contracts/NFDInstance.algo.ts:346", "teal": 1759}, {"pc": [1734, 1735], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1766}, {"pc": [1736], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1767}, {"pc": [1737], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1768}, {"pc": [1738, 1739], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1769}, {"pc": [1740, 1741, 1742], "source": "contracts/NFDInstance.algo.ts:337", "teal": 1770}, {"pc": [1743], "source": "contracts/NFDInstance.algo.ts:321", "teal": 1773}, {"pc": [1744, 1745, 1746], "source": "contracts/NFDInstance.algo.ts:351", "teal": 1777}, {"pc": [1747], "source": "contracts/NFDInstance.algo.ts:351", "teal": 1780}, {"pc": [1748, 1749], "source": "contracts/NFDInstance.algo.ts:351", "teal": 1781}, {"pc": [1750, 1751, 1752], "source": "contracts/NFDInstance.algo.ts:352", "teal": 1785}, {"pc": [1753], "source": "contracts/NFDInstance.algo.ts:352", "teal": 1786}, {"pc": [1754], "source": "contracts/NFDInstance.algo.ts:352", "teal": 1787}, {"pc": [1755], "source": "contracts/NFDInstance.algo.ts:352", "teal": 1788}, {"pc": [1756], "source": "contracts/NFDInstance.algo.ts:352", "teal": 1789}, {"pc": [1757], "source": "contracts/NFDInstance.algo.ts:352", "teal": 1790}, {"pc": [1758], "source": "contracts/NFDInstance.algo.ts:352", "teal": 1791}, {"pc": [1759, 1760, 1761], "source": "contracts/NFDInstance.algo.ts:353", "teal": 1795}, {"pc": [1762], "source": "contracts/NFDInstance.algo.ts:353", "teal": 1796}, {"pc": [1763], "errorMessage": "can't update fields if NFD expired", "source": "contracts/NFDInstance.algo.ts:353", "teal": 1799}, {"pc": [1764, 1765, 1766], "source": "contracts/NFDInstance.algo.ts:355", "teal": 1803}, {"pc": [1767, 1768], "source": "contracts/NFDInstance.algo.ts:355", "teal": 1804}, {"pc": [1769], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1808}, {"pc": [1770, 1771], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1809}, {"pc": [1772, 1773], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1814}, {"pc": [1774, 1775], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1815}, {"pc": [1776], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1816}, {"pc": [1777, 1778, 1779], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1817}, {"pc": [1780, 1781], "source": "contracts/NFDInstance.algo.ts:357", "teal": 1821}, {"pc": [1782, 1783], "source": "contracts/NFDInstance.algo.ts:357", "teal": 1822}, {"pc": [1784, 1785], "source": "contracts/NFDInstance.algo.ts:357", "teal": 1823}, {"pc": [1786, 1787], "source": "contracts/NFDInstance.algo.ts:358", "teal": 1827}, {"pc": [1788], "source": "contracts/NFDInstance.algo.ts:358", "teal": 1828}, {"pc": [1789], "source": "contracts/NFDInstance.algo.ts:358", "teal": 1829}, {"pc": [1790, 1791], "source": "contracts/NFDInstance.algo.ts:358", "teal": 1830}, {"pc": [1792, 1793], "source": "contracts/NFDInstance.algo.ts:358", "teal": 1831}, {"pc": [1794, 1795], "source": "contracts/NFDInstance.algo.ts:360", "teal": 1838}, {"pc": [1796, 1797], "source": "contracts/NFDInstance.algo.ts:360", "teal": 1839}, {"pc": [1798, 1799], "source": "contracts/NFDInstance.algo.ts:360", "teal": 1840}, {"pc": [1800, 1801, 1802], "source": "contracts/NFDInstance.algo.ts:360", "teal": 1841}, {"pc": [1803], "errorMessage": "field not updatable or no permissions to update", "source": "contracts/NFDInstance.algo.ts:359", "teal": 1844}, {"pc": [1804, 1805], "source": "contracts/NFDInstance.algo.ts:363", "teal": 1848}, {"pc": [1806], "source": "contracts/NFDInstance.algo.ts:363", "teal": 1849}, {"pc": [1807, 1808], "source": "contracts/NFDInstance.algo.ts:364", "teal": 1854}, {"pc": [1809], "source": "contracts/NFDInstance.algo.ts:364", "teal": 1855}, {"pc": [1810], "source": "contracts/NFDInstance.algo.ts:364", "teal": 1856}, {"pc": [1811], "source": "contracts/NFDInstance.algo.ts:364", "teal": 1857}, {"pc": [1812, 1813, 1814], "source": "contracts/NFDInstance.algo.ts:364", "teal": 1858}, {"pc": [1815, 1816], "source": "contracts/NFDInstance.algo.ts:365", "teal": 1863}, {"pc": [1817, 1818], "source": "contracts/NFDInstance.algo.ts:365", "teal": 1864}, {"pc": [1819], "source": "contracts/NFDInstance.algo.ts:365", "teal": 1865}, {"pc": [1820, 1821], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1872}, {"pc": [1822], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1873}, {"pc": [1823], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1874}, {"pc": [1824, 1825], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1875}, {"pc": [1826, 1827, 1828], "source": "contracts/NFDInstance.algo.ts:356", "teal": 1876}, {"pc": [1829], "source": "contracts/NFDInstance.algo.ts:368", "teal": 1881}, {"pc": [1830, 1831], "source": "contracts/NFDInstance.algo.ts:368", "teal": 1882}, {"pc": [1832], "source": "contracts/NFDInstance.algo.ts:368", "teal": 1883}, {"pc": [1833], "source": "contracts/NFDInstance.algo.ts:368", "teal": 1884}, {"pc": [1834], "source": "contracts/NFDInstance.algo.ts:351", "teal": 1885}, {"pc": [1835, 1836], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1890}, {"pc": [1837, 1838, 1839], "source": "contracts/NFDInstance.algo.ts:372", "teal": 1893}, {"pc": [1840, 1841, 1842], "source": "contracts/NFDInstance.algo.ts:372", "teal": 1894}, {"pc": [1843, 1844, 1845], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1897}, {"pc": [1846], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1898}, {"pc": [1847], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1899}, {"pc": [1848], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1900}, {"pc": [1849, 1850, 1851], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1901}, {"pc": [1852], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1902}, {"pc": [1853], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1903}, {"pc": [1854], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1904}, {"pc": [1855], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1905}, {"pc": [1856], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1906}, {"pc": [1857], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1907}, {"pc": [1858, 1859, 1860], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1911}, {"pc": [1861], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1914}, {"pc": [1862, 1863], "source": "contracts/NFDInstance.algo.ts:371", "teal": 1915}, {"pc": [1864, 1865], "source": "contracts/NFDInstance.algo.ts:374", "teal": 1919}, {"pc": [1866, 1867, 1868], "source": "contracts/NFDInstance.algo.ts:374", "teal": 1920}, {"pc": [1869, 1870], "source": "contracts/NFDInstance.algo.ts:374", "teal": 1921}, {"pc": [1871, 1872], "source": "contracts/NFDInstance.algo.ts:376", "teal": 1926}, {"pc": [1873, 1874, 1875], "source": "contracts/NFDInstance.algo.ts:376", "teal": 1927}, {"pc": [1876, 1877, 1878], "source": "contracts/NFDInstance.algo.ts:376", "teal": 1928}, {"pc": [1879, 1880], "source": "contracts/NFDInstance.algo.ts:377", "teal": 1933}, {"pc": [1881, 1882, 1883], "source": "contracts/NFDInstance.algo.ts:377", "teal": 1934}, {"pc": [1884, 1885, 1886], "source": "contracts/NFDInstance.algo.ts:377", "teal": 1935}, {"pc": [1887, 1888], "source": "contracts/NFDInstance.algo.ts:380", "teal": 1943}, {"pc": [1889, 1890, 1891], "source": "contracts/NFDInstance.algo.ts:380", "teal": 1944}, {"pc": [1892], "source": "contracts/NFDInstance.algo.ts:380", "teal": 1945}, {"pc": [1893, 1894, 1895], "source": "contracts/NFDInstance.algo.ts:380", "teal": 1946}, {"pc": [1896, 1897], "source": "contracts/NFDInstance.algo.ts:380", "teal": 1947}, {"pc": [1898, 1899, 1900], "source": "contracts/NFDInstance.algo.ts:380", "teal": 1948}, {"pc": [1901], "source": "contracts/NFDInstance.algo.ts:380", "teal": 1949}, {"pc": [1902], "errorMessage": "must be user-defined or verified field to fetch", "source": "contracts/NFDInstance.algo.ts:379", "teal": 1953}, {"pc": [1903, 1904], "source": "contracts/NFDInstance.algo.ts:383", "teal": 1958}, {"pc": [1905], "source": "contracts/NFDInstance.algo.ts:383", "teal": 1959}, {"pc": [1906], "source": "contracts/NFDInstance.algo.ts:383", "teal": 1960}, {"pc": [1907], "source": "contracts/NFDInstance.algo.ts:383", "teal": 1961}, {"pc": [1908, 1909, 1910], "source": "contracts/NFDInstance.algo.ts:383", "teal": 1962}, {"pc": [1911, 1912], "source": "contracts/NFDInstance.algo.ts:384", "teal": 1967}, {"pc": [1913], "source": "contracts/NFDInstance.algo.ts:384", "teal": 1968}, {"pc": [1914], "errorMessage": "box value does not exist: this.boxes(fieldName).value", "source": "contracts/NFDInstance.algo.ts:384", "teal": 1971}, {"pc": [1915, 1916, 1917], "source": "contracts/NFDInstance.algo.ts:384", "teal": 1972}, {"pc": [1918, 1919], "source": "contracts/NFDInstance.algo.ts:387", "teal": 1977}, {"pc": [1920, 1921, 1922, 1923, 1924], "source": "contracts/NFDInstance.algo.ts:387", "teal": 1978}, {"pc": [1925], "source": "contracts/NFDInstance.algo.ts:387", "teal": 1979}, {"pc": [1926, 1927], "source": "contracts/NFDInstance.algo.ts:387", "teal": 1980}, {"pc": [1928, 1929], "source": "contracts/NFDInstance.algo.ts:388", "teal": 1985}, {"pc": [1930], "source": "contracts/NFDInstance.algo.ts:388", "teal": 1986}, {"pc": [1931], "source": "contracts/NFDInstance.algo.ts:388", "teal": 1987}, {"pc": [1932], "source": "contracts/NFDInstance.algo.ts:388", "teal": 1988}, {"pc": [1933], "source": "contracts/NFDInstance.algo.ts:388", "teal": 1989}, {"pc": [1934, 1935, 1936], "source": "contracts/NFDInstance.algo.ts:388", "teal": 1990}, {"pc": [1937], "source": "contracts/NFDInstance.algo.ts:389", "teal": 1995}, {"pc": [1938, 1939, 1940], "source": "contracts/NFDInstance.algo.ts:389", "teal": 1996}, {"pc": [1941, 1942], "source": "contracts/NFDInstance.algo.ts:392", "teal": 2001}, {"pc": [1943], "source": "contracts/NFDInstance.algo.ts:392", "teal": 2002}, {"pc": [1944], "errorMessage": "box value does not exist: this.boxes(boxName).value", "source": "contracts/NFDInstance.algo.ts:392", "teal": 2005}, {"pc": [1945, 1946], "source": "contracts/NFDInstance.algo.ts:392", "teal": 2006}, {"pc": [1947, 1948], "source": "contracts/NFDInstance.algo.ts:393", "teal": 2010}, {"pc": [1949, 1950, 1951, 1952], "source": "contracts/NFDInstance.algo.ts:393", "teal": 2011}, {"pc": [1953], "source": "contracts/NFDInstance.algo.ts:393", "teal": 2012}, {"pc": [1954, 1955], "source": "contracts/NFDInstance.algo.ts:393", "teal": 2013}, {"pc": [1956], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2017}, {"pc": [1957, 1958], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2018}, {"pc": [1959, 1960], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2023}, {"pc": [1961, 1962], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2024}, {"pc": [1963], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2025}, {"pc": [1964, 1965, 1966], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2026}, {"pc": [1967, 1968], "source": "contracts/NFDInstance.algo.ts:395", "teal": 2030}, {"pc": [1969, 1970], "source": "contracts/NFDInstance.algo.ts:395", "teal": 2031}, {"pc": [1971, 1972, 1973], "source": "contracts/NFDInstance.algo.ts:395", "teal": 2032}, {"pc": [1974], "source": "contracts/NFDInstance.algo.ts:395", "teal": 2033}, {"pc": [1975, 1976], "source": "contracts/NFDInstance.algo.ts:395", "teal": 2034}, {"pc": [1977, 1978], "source": "contracts/NFDInstance.algo.ts:396", "teal": 2039}, {"pc": [1979], "source": "contracts/NFDInstance.algo.ts:396", "teal": 2040}, {"pc": [1980], "source": "contracts/NFDInstance.algo.ts:396", "teal": 2041}, {"pc": [1981], "source": "contracts/NFDInstance.algo.ts:396", "teal": 2042}, {"pc": [1982], "source": "contracts/NFDInstance.algo.ts:396", "teal": 2043}, {"pc": [1983, 1984, 1985], "source": "contracts/NFDInstance.algo.ts:396", "teal": 2044}, {"pc": [1986, 1987, 1988], "source": "contracts/NFDInstance.algo.ts:397", "teal": 2047}, {"pc": [1989, 1990], "source": "contracts/NFDInstance.algo.ts:400", "teal": 2052}, {"pc": [1991, 1992], "source": "contracts/NFDInstance.algo.ts:400", "teal": 2053}, {"pc": [1993], "source": "contracts/NFDInstance.algo.ts:400", "teal": 2054}, {"pc": [1994], "errorMessage": "box value does not exist: this.boxes(boxName).value", "source": "contracts/NFDInstance.algo.ts:400", "teal": 2057}, {"pc": [1995], "source": "contracts/NFDInstance.algo.ts:400", "teal": 2058}, {"pc": [1996, 1997], "source": "contracts/NFDInstance.algo.ts:400", "teal": 2059}, {"pc": [1998, 1999], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2064}, {"pc": [2000], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2065}, {"pc": [2001], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2066}, {"pc": [2002, 2003], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2067}, {"pc": [2004, 2005, 2006], "source": "contracts/NFDInstance.algo.ts:394", "teal": 2068}, {"pc": [2007, 2008], "source": "contracts/NFDInstance.algo.ts:402", "teal": 2073}, {"pc": [2009, 2010], "source": "contracts/NFDInstance.algo.ts:371", "teal": 2077}, {"pc": [2011, 2012], "source": "contracts/NFDInstance.algo.ts:371", "teal": 2080}, {"pc": [2013], "source": "contracts/NFDInstance.algo.ts:371", "teal": 2081}, {"pc": [2014, 2015, 2016], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2086}, {"pc": [2017], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2087}, {"pc": [2018], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2088}, {"pc": [2019], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2089}, {"pc": [2020], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2090}, {"pc": [2021], "errorMessage": "argument 0 (reservedFor) for offerForSale must be a address", "source": "contracts/NFDInstance.algo.ts:407", "teal": 2093}, {"pc": [2022, 2023, 2024], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2096}, {"pc": [2025], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2097}, {"pc": [2026, 2027, 2028], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2100}, {"pc": [2029], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2101}, {"pc": [2030], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2102}, {"pc": [2031, 2032, 2033], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2106}, {"pc": [2034], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2109}, {"pc": [2035, 2036, 2037], "source": "contracts/NFDInstance.algo.ts:408", "teal": 2113}, {"pc": [2038], "source": "contracts/NFDInstance.algo.ts:408", "teal": 2114}, {"pc": [2039], "errorMessage": "can't sell if NFD expired", "source": "contracts/NFDInstance.algo.ts:408", "teal": 2117}, {"pc": [2040, 2041, 2042], "source": "contracts/NFDInstance.algo.ts:409", "teal": 2121}, {"pc": [2043], "source": "contracts/NFDInstance.algo.ts:409", "teal": 2122}, {"pc": [2044], "source": "contracts/NFDInstance.algo.ts:409", "teal": 2123}, {"pc": [2045], "source": "contracts/NFDInstance.algo.ts:409", "teal": 2124}, {"pc": [2046], "source": "contracts/NFDInstance.algo.ts:409", "teal": 2125}, {"pc": [2047], "source": "contracts/NFDInstance.algo.ts:409", "teal": 2126}, {"pc": [2048], "source": "contracts/NFDInstance.algo.ts:409", "teal": 2127}, {"pc": [2049, 2050, 2051], "source": "contracts/NFDInstance.algo.ts:410", "teal": 2131}, {"pc": [2052, 2053], "source": "contracts/NFDInstance.algo.ts:411", "teal": 2135}, {"pc": [2054, 2055], "source": "contracts/NFDInstance.algo.ts:411", "teal": 2136}, {"pc": [2056], "source": "contracts/NFDInstance.algo.ts:411", "teal": 2137}, {"pc": [2057, 2058], "source": "contracts/NFDInstance.algo.ts:411", "teal": 2138}, {"pc": [2059, 2060], "source": "contracts/NFDInstance.algo.ts:416", "teal": 2143}, {"pc": [2061], "source": "contracts/NFDInstance.algo.ts:416", "teal": 2144}, {"pc": [2062], "source": "contracts/NFDInstance.algo.ts:416", "teal": 2145}, {"pc": [2063, 2064, 2065], "source": "contracts/NFDInstance.algo.ts:416", "teal": 2146}, {"pc": [2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077], "source": "contracts/NFDInstance.algo.ts:417", "teal": 2151}, {"pc": [2078, 2079], "source": "contracts/NFDInstance.algo.ts:417", "teal": 2152}, {"pc": [2080, 2081, 2082], "source": "contracts/NFDInstance.algo.ts:417", "teal": 2153}, {"pc": [2083], "source": "contracts/NFDInstance.algo.ts:417", "teal": 2154}, {"pc": [2084], "source": "contracts/NFDInstance.algo.ts:417", "teal": 2155}, {"pc": [2085, 2086], "source": "contracts/NFDInstance.algo.ts:419", "teal": 2160}, {"pc": [2087], "source": "contracts/NFDInstance.algo.ts:419", "teal": 2161}, {"pc": [2088], "source": "contracts/NFDInstance.algo.ts:419", "teal": 2162}, {"pc": [2089], "errorMessage": "can only be sold if no user-defined or verified properties remain", "source": "contracts/NFDInstance.algo.ts:419", "teal": 2165}, {"pc": [2090, 2091], "source": "contracts/NFDInstance.algo.ts:422", "teal": 2170}, {"pc": [2092, 2093, 2094], "source": "contracts/NFDInstance.algo.ts:422", "teal": 2171}, {"pc": [2095], "source": "contracts/NFDInstance.algo.ts:422", "teal": 2172}, {"pc": [2096], "source": "contracts/NFDInstance.algo.ts:422", "teal": 2173}, {"pc": [2097], "source": "contracts/NFDInstance.algo.ts:422", "teal": 2174}, {"pc": [2098, 2099, 2100], "source": "contracts/NFDInstance.algo.ts:422", "teal": 2175}, {"pc": [2101, 2102], "source": "contracts/NFDInstance.algo.ts:423", "teal": 2180}, {"pc": [2103, 2104], "source": "contracts/NFDInstance.algo.ts:423", "teal": 2181}, {"pc": [2105], "source": "contracts/NFDInstance.algo.ts:423", "teal": 2182}, {"pc": [2106], "errorMessage": "must be sold for at least MIN amount", "source": "contracts/NFDInstance.algo.ts:423", "teal": 2185}, {"pc": [2107], "source": "contracts/NFDInstance.algo.ts:425", "teal": 2190}, {"pc": [2108, 2109], "source": "contracts/NFDInstance.algo.ts:425", "teal": 2191}, {"pc": [2110], "source": "contracts/NFDInstance.algo.ts:425", "teal": 2192}, {"pc": [2111], "source": "contracts/NFDInstance.algo.ts:425", "teal": 2193}, {"pc": [2112, 2113], "source": "contracts/NFDInstance.algo.ts:427", "teal": 2197}, {"pc": [2114, 2115], "source": "contracts/NFDInstance.algo.ts:427", "teal": 2198}, {"pc": [2116], "source": "contracts/NFDInstance.algo.ts:427", "teal": 2199}, {"pc": [2117, 2118], "source": "contracts/NFDInstance.algo.ts:432", "teal": 2203}, {"pc": [2119, 2120], "source": "contracts/NFDInstance.algo.ts:432", "teal": 2204}, {"pc": [2121], "source": "contracts/NFDInstance.algo.ts:432", "teal": 2205}, {"pc": [2122], "source": "contracts/NFDInstance.algo.ts:432", "teal": 2206}, {"pc": [2123, 2124], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2211}, {"pc": [2125, 2126], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2212}, {"pc": [2127], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2213}, {"pc": [2128], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2214}, {"pc": [2129, 2130, 2131], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2215}, {"pc": [2132, 2133], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2216}, {"pc": [2134], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2217}, {"pc": [2135, 2136, 2137], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2218}, {"pc": [2138], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2219}, {"pc": [2139], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2220}, {"pc": [2140, 2141, 2142], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2223}, {"pc": [2143, 2144], "source": "contracts/NFDInstance.algo.ts:443", "teal": 2228}, {"pc": [2145, 2146], "source": "contracts/NFDInstance.algo.ts:443", "teal": 2229}, {"pc": [2147], "source": "contracts/NFDInstance.algo.ts:443", "teal": 2230}, {"pc": [2148, 2149, 2150], "source": "contracts/NFDInstance.algo.ts:442", "teal": 2231}, {"pc": [2151, 2152], "source": "contracts/NFDInstance.algo.ts:445", "teal": 2237}, {"pc": [2153, 2154, 2155], "source": "contracts/NFDInstance.algo.ts:445", "teal": 2238}, {"pc": [2156], "source": "contracts/NFDInstance.algo.ts:445", "teal": 2239}, {"pc": [2157], "source": "contracts/NFDInstance.algo.ts:445", "teal": 2240}, {"pc": [2158], "source": "contracts/NFDInstance.algo.ts:445", "teal": 2241}, {"pc": [2159, 2160, 2161], "source": "contracts/NFDInstance.algo.ts:445", "teal": 2242}, {"pc": [2162, 2163], "source": "contracts/NFDInstance.algo.ts:446", "teal": 2243}, {"pc": [2164, 2165], "source": "contracts/NFDInstance.algo.ts:446", "teal": 2244}, {"pc": [2166, 2167, 2168], "source": "contracts/NFDInstance.algo.ts:446", "teal": 2245}, {"pc": [2169], "source": "contracts/NFDInstance.algo.ts:446", "teal": 2246}, {"pc": [2170], "source": "contracts/NFDInstance.algo.ts:445", "teal": 2247}, {"pc": [2171, 2172, 2173], "source": "contracts/NFDInstance.algo.ts:444", "teal": 2250}, {"pc": [2174, 2175], "source": "contracts/NFDInstance.algo.ts:448", "teal": 2255}, {"pc": [2176, 2177], "source": "contracts/NFDInstance.algo.ts:448", "teal": 2256}, {"pc": [2178], "source": "contracts/NFDInstance.algo.ts:448", "teal": 2257}, {"pc": [2179], "source": "contracts/NFDInstance.algo.ts:448", "teal": 2258}, {"pc": [2180, 2181, 2182], "source": "contracts/NFDInstance.algo.ts:444", "teal": 2259}, {"pc": [2183, 2184], "source": "contracts/NFDInstance.algo.ts:450", "teal": 2264}, {"pc": [2185], "source": "contracts/NFDInstance.algo.ts:450", "teal": 2265}, {"pc": [2186, 2187, 2188, 2189, 2190, 2191], "source": "contracts/NFDInstance.algo.ts:453", "teal": 2276}, {"pc": [2192], "source": "contracts/NFDInstance.algo.ts:453", "teal": 2277}, {"pc": [2193], "source": "contracts/NFDInstance.algo.ts:453", "teal": 2278}, {"pc": [2194, 2195, 2196, 2197], "source": "contracts/NFDInstance.algo.ts:453", "teal": 2279}, {"pc": [2198, 2199, 2200], "source": "contracts/NFDInstance.algo.ts:454", "teal": 2280}, {"pc": [2201], "source": "contracts/NFDInstance.algo.ts:454", "teal": 2281}, {"pc": [2202, 2203, 2204], "source": "contracts/NFDInstance.algo.ts:454", "teal": 2282}, {"pc": [2205, 2206], "source": "contracts/NFDInstance.algo.ts:455", "teal": 2283}, {"pc": [2207], "source": "contracts/NFDInstance.algo.ts:455", "teal": 2284}, {"pc": [2208], "source": "contracts/NFDInstance.algo.ts:455", "teal": 2285}, {"pc": [2209], "source": "contracts/NFDInstance.algo.ts:455", "teal": 2286}, {"pc": [2210], "source": "contracts/NFDInstance.algo.ts:455", "teal": 2287}, {"pc": [2211, 2212, 2213], "source": "contracts/NFDInstance.algo.ts:455", "teal": 2288}, {"pc": [2214], "source": "contracts/NFDInstance.algo.ts:455", "teal": 2289}, {"pc": [2215], "source": "contracts/NFDInstance.algo.ts:455", "teal": 2290}, {"pc": [2216, 2217, 2218], "source": "contracts/NFDInstance.algo.ts:455", "teal": 2291}, {"pc": [2219], "source": "contracts/NFDInstance.algo.ts:456", "teal": 2292}, {"pc": [2220], "source": "contracts/NFDInstance.algo.ts:456", "teal": 2293}, {"pc": [2221, 2222, 2223], "source": "contracts/NFDInstance.algo.ts:456", "teal": 2294}, {"pc": [2224, 2225], "source": "contracts/NFDInstance.algo.ts:457", "teal": 2295}, {"pc": [2226], "source": "contracts/NFDInstance.algo.ts:457", "teal": 2296}, {"pc": [2227, 2228, 2229], "source": "contracts/NFDInstance.algo.ts:457", "teal": 2297}, {"pc": [2230, 2231], "source": "contracts/NFDInstance.algo.ts:458", "teal": 2298}, {"pc": [2232, 2233, 2234], "source": "contracts/NFDInstance.algo.ts:458", "teal": 2299}, {"pc": [2235], "source": "contracts/NFDInstance.algo.ts:453", "teal": 2300}, {"pc": [2236], "source": "contracts/NFDInstance.algo.ts:453", "teal": 2301}, {"pc": [2237], "source": "contracts/NFDInstance.algo.ts:453", "teal": 2302}, {"pc": [2238], "source": "contracts/NFDInstance.algo.ts:453", "teal": 2303}, {"pc": [2239], "source": "contracts/NFDInstance.algo.ts:407", "teal": 2304}, {"pc": [2240, 2241, 2242], "source": "contracts/NFDInstance.algo.ts:464", "teal": 2309}, {"pc": [2243], "source": "contracts/NFDInstance.algo.ts:464", "teal": 2310}, {"pc": [2244], "source": "contracts/NFDInstance.algo.ts:464", "teal": 2311}, {"pc": [2245, 2246, 2247], "source": "contracts/NFDInstance.algo.ts:464", "teal": 2315}, {"pc": [2248, 2249, 2250], "source": "contracts/NFDInstance.algo.ts:465", "teal": 2319}, {"pc": [2251], "source": "contracts/NFDInstance.algo.ts:465", "teal": 2320}, {"pc": [2252], "errorMessage": "can't update fields if NFD expired", "source": "contracts/NFDInstance.algo.ts:465", "teal": 2323}, {"pc": [2253, 2254, 2255], "source": "contracts/NFDInstance.algo.ts:466", "teal": 2327}, {"pc": [2256], "source": "contracts/NFDInstance.algo.ts:466", "teal": 2328}, {"pc": [2257], "source": "contracts/NFDInstance.algo.ts:466", "teal": 2329}, {"pc": [2258], "source": "contracts/NFDInstance.algo.ts:466", "teal": 2330}, {"pc": [2259], "source": "contracts/NFDInstance.algo.ts:466", "teal": 2331}, {"pc": [2260], "source": "contracts/NFDInstance.algo.ts:466", "teal": 2332}, {"pc": [2261], "source": "contracts/NFDInstance.algo.ts:466", "teal": 2333}, {"pc": [2262, 2263, 2264], "source": "contracts/NFDInstance.algo.ts:467", "teal": 2337}, {"pc": [2265], "errorMessage": "must be for sale", "source": "contracts/NFDInstance.algo.ts:467", "teal": 2340}, {"pc": [2266, 2267, 2268], "source": "contracts/NFDInstance.algo.ts:468", "teal": 2344}, {"pc": [2269, 2270], "source": "contracts/NFDInstance.algo.ts:469", "teal": 2348}, {"pc": [2271], "source": "contracts/NFDInstance.algo.ts:469", "teal": 2349}, {"pc": [2272, 2273], "source": "contracts/NFDInstance.algo.ts:470", "teal": 2353}, {"pc": [2274], "source": "contracts/NFDInstance.algo.ts:470", "teal": 2354}, {"pc": [2275], "source": "contracts/NFDInstance.algo.ts:471", "teal": 2358}, {"pc": [2276, 2277], "source": "contracts/NFDInstance.algo.ts:471", "teal": 2359}, {"pc": [2278], "source": "contracts/NFDInstance.algo.ts:471", "teal": 2360}, {"pc": [2279], "source": "contracts/NFDInstance.algo.ts:471", "teal": 2361}, {"pc": [2280, 2281], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2365}, {"pc": [2282], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2366}, {"pc": [2283], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2367}, {"pc": [2284, 2285], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2368}, {"pc": [2286, 2287, 2288], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2369}, {"pc": [2289], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2370}, {"pc": [2290, 2291, 2292], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2371}, {"pc": [2293, 2294], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2372}, {"pc": [2295], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2373}, {"pc": [2296], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2374}, {"pc": [2297], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2375}, {"pc": [2298], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2376}, {"pc": [2299, 2300, 2301], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2377}, {"pc": [2302], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2378}, {"pc": [2303], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2379}, {"pc": [2304, 2305, 2306], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2380}, {"pc": [2307], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2381}, {"pc": [2308], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2382}, {"pc": [2309], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2383}, {"pc": [2310], "source": "contracts/NFDInstance.algo.ts:473", "teal": 2384}, {"pc": [2311], "source": "contracts/NFDInstance.algo.ts:464", "teal": 2385}, {"pc": [2312, 2313, 2314], "source": "contracts/NFDInstance.algo.ts:479", "teal": 2390}, {"pc": [2315, 2316, 2317], "source": "contracts/NFDInstance.algo.ts:479", "teal": 2391}, {"pc": [2318, 2319, 2320], "source": "contracts/NFDInstance.algo.ts:479", "teal": 2394}, {"pc": [2321], "source": "contracts/NFDInstance.algo.ts:479", "teal": 2395}, {"pc": [2322, 2323, 2324], "source": "contracts/NFDInstance.algo.ts:479", "teal": 2398}, {"pc": [2325], "source": "contracts/NFDInstance.algo.ts:479", "teal": 2399}, {"pc": [2326], "source": "contracts/NFDInstance.algo.ts:479", "teal": 2400}, {"pc": [2327, 2328, 2329], "source": "contracts/NFDInstance.algo.ts:479", "teal": 2404}, {"pc": [2330, 2331, 2332, 2333, 2334, 2335], "source": "contracts/NFDInstance.algo.ts:480", "teal": 2414}, {"pc": [2336], "source": "contracts/NFDInstance.algo.ts:480", "teal": 2415}, {"pc": [2337], "source": "contracts/NFDInstance.algo.ts:480", "teal": 2416}, {"pc": [2338, 2339, 2340, 2341], "source": "contracts/NFDInstance.algo.ts:480", "teal": 2417}, {"pc": [2342, 2343, 2344], "source": "contracts/NFDInstance.algo.ts:481", "teal": 2418}, {"pc": [2345], "source": "contracts/NFDInstance.algo.ts:481", "teal": 2419}, {"pc": [2346, 2347, 2348], "source": "contracts/NFDInstance.algo.ts:481", "teal": 2420}, {"pc": [2349, 2350], "source": "contracts/NFDInstance.algo.ts:482", "teal": 2421}, {"pc": [2351], "source": "contracts/NFDInstance.algo.ts:482", "teal": 2422}, {"pc": [2352], "source": "contracts/NFDInstance.algo.ts:482", "teal": 2423}, {"pc": [2353], "source": "contracts/NFDInstance.algo.ts:482", "teal": 2424}, {"pc": [2354], "source": "contracts/NFDInstance.algo.ts:482", "teal": 2425}, {"pc": [2355, 2356, 2357], "source": "contracts/NFDInstance.algo.ts:482", "teal": 2426}, {"pc": [2358], "source": "contracts/NFDInstance.algo.ts:482", "teal": 2427}, {"pc": [2359], "source": "contracts/NFDInstance.algo.ts:482", "teal": 2428}, {"pc": [2360, 2361, 2362], "source": "contracts/NFDInstance.algo.ts:482", "teal": 2429}, {"pc": [2363, 2364], "source": "contracts/NFDInstance.algo.ts:483", "teal": 2430}, {"pc": [2365, 2366, 2367], "source": "contracts/NFDInstance.algo.ts:483", "teal": 2431}, {"pc": [2368, 2369], "source": "contracts/NFDInstance.algo.ts:484", "teal": 2432}, {"pc": [2370], "source": "contracts/NFDInstance.algo.ts:484", "teal": 2433}, {"pc": [2371, 2372, 2373], "source": "contracts/NFDInstance.algo.ts:484", "teal": 2434}, {"pc": [2374, 2375], "source": "contracts/NFDInstance.algo.ts:485", "teal": 2435}, {"pc": [2376], "source": "contracts/NFDInstance.algo.ts:485", "teal": 2436}, {"pc": [2377], "source": "contracts/NFDInstance.algo.ts:485", "teal": 2437}, {"pc": [2378], "source": "contracts/NFDInstance.algo.ts:485", "teal": 2438}, {"pc": [2379, 2380, 2381], "source": "contracts/NFDInstance.algo.ts:485", "teal": 2439}, {"pc": [2382], "source": "contracts/NFDInstance.algo.ts:485", "teal": 2440}, {"pc": [2383], "source": "contracts/NFDInstance.algo.ts:485", "teal": 2441}, {"pc": [2384, 2385, 2386], "source": "contracts/NFDInstance.algo.ts:485", "teal": 2442}, {"pc": [2387], "source": "contracts/NFDInstance.algo.ts:480", "teal": 2443}, {"pc": [2388], "source": "contracts/NFDInstance.algo.ts:480", "teal": 2444}, {"pc": [2389], "source": "contracts/NFDInstance.algo.ts:480", "teal": 2445}, {"pc": [2390], "source": "contracts/NFDInstance.algo.ts:480", "teal": 2446}, {"pc": [2391], "source": "contracts/NFDInstance.algo.ts:479", "teal": 2447}, {"pc": [2392, 2393], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2452}, {"pc": [2394, 2395, 2396], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2455}, {"pc": [2397], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2456}, {"pc": [2398, 2399, 2400], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2459}, {"pc": [2401], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2460}, {"pc": [2402, 2403, 2404], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2463}, {"pc": [2405], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2464}, {"pc": [2406], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2465}, {"pc": [2407], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2466}, {"pc": [2408], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2467}, {"pc": [2409, 2410, 2411], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2471}, {"pc": [2412], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2474}, {"pc": [2413, 2414], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2475}, {"pc": [2415, 2416], "source": "contracts/NFDInstance.algo.ts:492", "teal": 2479}, {"pc": [2417, 2418], "source": "contracts/NFDInstance.algo.ts:492", "teal": 2480}, {"pc": [2419], "source": "contracts/NFDInstance.algo.ts:492", "teal": 2481}, {"pc": [2420], "errorMessage": "caller must be NFD registry!", "source": "contracts/NFDInstance.algo.ts:492", "teal": 2484}, {"pc": [2421], "source": "contracts/NFDInstance.algo.ts:493", "teal": 2488}, {"pc": [2422, 2423, 2424], "source": "contracts/NFDInstance.algo.ts:493", "teal": 2489}, {"pc": [2425, 2426], "source": "contracts/NFDInstance.algo.ts:493", "teal": 2490}, {"pc": [2427], "source": "contracts/NFDInstance.algo.ts:493", "teal": 2491}, {"pc": [2428], "source": "contracts/NFDInstance.algo.ts:493", "teal": 2492}, {"pc": [2429, 2430], "source": "contracts/NFDInstance.algo.ts:495", "teal": 2496}, {"pc": [2431, 2432, 2433], "source": "contracts/NFDInstance.algo.ts:495", "teal": 2497}, {"pc": [2434, 2435], "source": "contracts/NFDInstance.algo.ts:495", "teal": 2498}, {"pc": [2436, 2437], "source": "contracts/NFDInstance.algo.ts:498", "teal": 2502}, {"pc": [2438, 2439], "source": "contracts/NFDInstance.algo.ts:498", "teal": 2503}, {"pc": [2440, 2441], "source": "contracts/NFDInstance.algo.ts:503", "teal": 2508}, {"pc": [2442, 2443, 2444], "source": "contracts/NFDInstance.algo.ts:503", "teal": 2509}, {"pc": [2445], "source": "contracts/NFDInstance.algo.ts:503", "teal": 2510}, {"pc": [2446], "source": "contracts/NFDInstance.algo.ts:503", "teal": 2511}, {"pc": [2447], "source": "contracts/NFDInstance.algo.ts:503", "teal": 2512}, {"pc": [2448, 2449, 2450], "source": "contracts/NFDInstance.algo.ts:503", "teal": 2513}, {"pc": [2451, 2452], "source": "contracts/NFDInstance.algo.ts:507", "teal": 2518}, {"pc": [2453, 2454], "source": "contracts/NFDInstance.algo.ts:507", "teal": 2519}, {"pc": [2455, 2456], "source": "contracts/NFDInstance.algo.ts:509", "teal": 2523}, {"pc": [2457, 2458], "source": "contracts/NFDInstance.algo.ts:509", "teal": 2524}, {"pc": [2459], "source": "contracts/NFDInstance.algo.ts:509", "teal": 2525}, {"pc": [2460, 2461], "source": "contracts/NFDInstance.algo.ts:509", "teal": 2526}, {"pc": [2462], "source": "contracts/NFDInstance.algo.ts:509", "teal": 2527}, {"pc": [2463, 2464], "source": "contracts/NFDInstance.algo.ts:509", "teal": 2528}, {"pc": [2465, 2466], "source": "contracts/NFDInstance.algo.ts:511", "teal": 2532}, {"pc": [2467, 2468], "source": "contracts/NFDInstance.algo.ts:511", "teal": 2533}, {"pc": [2469], "source": "contracts/NFDInstance.algo.ts:511", "teal": 2534}, {"pc": [2470, 2471], "source": "contracts/NFDInstance.algo.ts:511", "teal": 2535}, {"pc": [2472], "source": "contracts/NFDInstance.algo.ts:511", "teal": 2536}, {"pc": [2473, 2474], "source": "contracts/NFDInstance.algo.ts:511", "teal": 2537}, {"pc": [2475, 2476], "source": "contracts/NFDInstance.algo.ts:512", "teal": 2542}, {"pc": [2477, 2478], "source": "contracts/NFDInstance.algo.ts:512", "teal": 2543}, {"pc": [2479], "source": "contracts/NFDInstance.algo.ts:512", "teal": 2544}, {"pc": [2480, 2481, 2482], "source": "contracts/NFDInstance.algo.ts:512", "teal": 2545}, {"pc": [2483, 2484], "source": "contracts/NFDInstance.algo.ts:513", "teal": 2550}, {"pc": [2485, 2486], "source": "contracts/NFDInstance.algo.ts:513", "teal": 2551}, {"pc": [2487, 2488], "source": "contracts/NFDInstance.algo.ts:515", "teal": 2557}, {"pc": [2489, 2490], "source": "contracts/NFDInstance.algo.ts:515", "teal": 2558}, {"pc": [2491], "source": "contracts/NFDInstance.algo.ts:515", "teal": 2559}, {"pc": [2492, 2493, 2494], "source": "contracts/NFDInstance.algo.ts:515", "teal": 2560}, {"pc": [2495, 2496], "source": "contracts/NFDInstance.algo.ts:516", "teal": 2565}, {"pc": [2497, 2498], "source": "contracts/NFDInstance.algo.ts:516", "teal": 2566}, {"pc": [2499, 2500], "source": "contracts/NFDInstance.algo.ts:519", "teal": 2571}, {"pc": [2501, 2502], "source": "contracts/NFDInstance.algo.ts:519", "teal": 2572}, {"pc": [2503], "source": "contracts/NFDInstance.algo.ts:519", "teal": 2573}, {"pc": [2504, 2505], "source": "contracts/NFDInstance.algo.ts:519", "teal": 2574}, {"pc": [2506, 2507, 2508], "source": "contracts/NFDInstance.algo.ts:503", "teal": 2575}, {"pc": [2509], "source": "contracts/NFDInstance.algo.ts:522", "teal": 2580}, {"pc": [2510, 2511], "source": "contracts/NFDInstance.algo.ts:522", "teal": 2581}, {"pc": [2512], "source": "contracts/NFDInstance.algo.ts:526", "teal": 2586}, {"pc": [2513, 2514], "source": "contracts/NFDInstance.algo.ts:526", "teal": 2587}, {"pc": [2515, 2516], "source": "contracts/NFDInstance.algo.ts:527", "teal": 2592}, {"pc": [2517, 2518, 2519], "source": "contracts/NFDInstance.algo.ts:527", "teal": 2593}, {"pc": [2520], "source": "contracts/NFDInstance.algo.ts:527", "teal": 2594}, {"pc": [2521], "source": "contracts/NFDInstance.algo.ts:527", "teal": 2595}, {"pc": [2522, 2523, 2524], "source": "contracts/NFDInstance.algo.ts:527", "teal": 2596}, {"pc": [2525], "source": "contracts/NFDInstance.algo.ts:529", "teal": 2601}, {"pc": [2526, 2527], "source": "contracts/NFDInstance.algo.ts:529", "teal": 2602}, {"pc": [2528, 2529, 2530], "source": "contracts/NFDInstance.algo.ts:527", "teal": 2603}, {"pc": [2531, 2532], "source": "contracts/NFDInstance.algo.ts:533", "teal": 2608}, {"pc": [2533, 2534], "source": "contracts/NFDInstance.algo.ts:533", "teal": 2609}, {"pc": [2535, 2536, 2537], "source": "contracts/NFDInstance.algo.ts:533", "teal": 2610}, {"pc": [2538], "source": "contracts/NFDInstance.algo.ts:533", "teal": 2611}, {"pc": [2539, 2540], "source": "contracts/NFDInstance.algo.ts:533", "teal": 2612}, {"pc": [2541], "source": "contracts/NFDInstance.algo.ts:533", "teal": 2613}, {"pc": [2542, 2543], "source": "contracts/NFDInstance.algo.ts:533", "teal": 2614}, {"pc": [2544, 2545], "source": "contracts/NFDInstance.algo.ts:536", "teal": 2619}, {"pc": [2546, 2547], "source": "contracts/NFDInstance.algo.ts:536", "teal": 2620}, {"pc": [2548, 2549], "source": "contracts/NFDInstance.algo.ts:537", "teal": 2624}, {"pc": [2550, 2551], "source": "contracts/NFDInstance.algo.ts:537", "teal": 2625}, {"pc": [2552, 2553, 2554], "source": "contracts/NFDInstance.algo.ts:539", "teal": 2630}, {"pc": [2555, 2556], "source": "contracts/NFDInstance.algo.ts:539", "teal": 2631}, {"pc": [2557], "source": "contracts/NFDInstance.algo.ts:539", "teal": 2632}, {"pc": [2558], "source": "contracts/NFDInstance.algo.ts:539", "teal": 2633}, {"pc": [2559], "source": "contracts/NFDInstance.algo.ts:539", "teal": 2634}, {"pc": [2560, 2561, 2562], "source": "contracts/NFDInstance.algo.ts:539", "teal": 2635}, {"pc": [2563, 2564], "source": "contracts/NFDInstance.algo.ts:540", "teal": 2640}, {"pc": [2565], "source": "contracts/NFDInstance.algo.ts:540", "teal": 2641}, {"pc": [2566, 2567], "source": "contracts/NFDInstance.algo.ts:540", "teal": 2642}, {"pc": [2568, 2569, 2570], "source": "contracts/NFDInstance.algo.ts:542", "teal": 2648}, {"pc": [2571, 2572], "source": "contracts/NFDInstance.algo.ts:542", "teal": 2649}, {"pc": [2573], "source": "contracts/NFDInstance.algo.ts:542", "teal": 2650}, {"pc": [2574], "source": "contracts/NFDInstance.algo.ts:542", "teal": 2651}, {"pc": [2575], "source": "contracts/NFDInstance.algo.ts:542", "teal": 2652}, {"pc": [2576, 2577, 2578], "source": "contracts/NFDInstance.algo.ts:542", "teal": 2653}, {"pc": [2579, 2580], "source": "contracts/NFDInstance.algo.ts:543", "teal": 2658}, {"pc": [2581], "source": "contracts/NFDInstance.algo.ts:543", "teal": 2659}, {"pc": [2582, 2583], "source": "contracts/NFDInstance.algo.ts:543", "teal": 2660}, {"pc": [2584, 2585], "source": "contracts/NFDInstance.algo.ts:552", "teal": 2671}, {"pc": [2586], "source": "contracts/NFDInstance.algo.ts:552", "teal": 2672}, {"pc": [2587, 2588], "source": "contracts/NFDInstance.algo.ts:551", "teal": 2673}, {"pc": [2589, 2590], "source": "contracts/NFDInstance.algo.ts:550", "teal": 2674}, {"pc": [2591, 2592], "source": "contracts/NFDInstance.algo.ts:549", "teal": 2675}, {"pc": [2593], "source": "contracts/NFDInstance.algo.ts:549", "teal": 2676}, {"pc": [2594, 2595], "source": "contracts/NFDInstance.algo.ts:548", "teal": 2677}, {"pc": [2596, 2597, 2598], "source": "contracts/NFDInstance.algo.ts:547", "teal": 2678}, {"pc": [2599, 2600], "source": "contracts/NFDInstance.algo.ts:556", "teal": 2682}, {"pc": [2601], "source": "contracts/NFDInstance.algo.ts:556", "teal": 2683}, {"pc": [2602], "source": "contracts/NFDInstance.algo.ts:556", "teal": 2684}, {"pc": [2603], "source": "contracts/NFDInstance.algo.ts:556", "teal": 2685}, {"pc": [2604, 2605], "source": "contracts/NFDInstance.algo.ts:558", "teal": 2689}, {"pc": [2606, 2607], "source": "contracts/NFDInstance.algo.ts:558", "teal": 2690}, {"pc": [2608], "source": "contracts/NFDInstance.algo.ts:558", "teal": 2691}, {"pc": [2609], "source": "contracts/NFDInstance.algo.ts:558", "teal": 2692}, {"pc": [2610], "source": "contracts/NFDInstance.algo.ts:559", "teal": 2696}, {"pc": [2611], "source": "contracts/NFDInstance.algo.ts:559", "teal": 2697}, {"pc": [2612, 2613], "source": "contracts/NFDInstance.algo.ts:560", "teal": 2701}, {"pc": [2614], "source": "contracts/NFDInstance.algo.ts:560", "teal": 2702}, {"pc": [2615, 2616], "source": "contracts/NFDInstance.algo.ts:562", "teal": 2706}, {"pc": [2617], "source": "contracts/NFDInstance.algo.ts:562", "teal": 2707}, {"pc": [2618, 2619], "source": "contracts/NFDInstance.algo.ts:565", "teal": 2717}, {"pc": [2620, 2621], "source": "contracts/NFDInstance.algo.ts:565", "teal": 2718}, {"pc": [2622], "source": "contracts/NFDInstance.algo.ts:565", "teal": 2719}, {"pc": [2623], "source": "contracts/NFDInstance.algo.ts:565", "teal": 2720}, {"pc": [2624, 2625], "source": "contracts/NFDInstance.algo.ts:566", "teal": 2721}, {"pc": [2626], "source": "contracts/NFDInstance.algo.ts:566", "teal": 2722}, {"pc": [2627, 2628], "source": "contracts/NFDInstance.algo.ts:567", "teal": 2723}, {"pc": [2629], "source": "contracts/NFDInstance.algo.ts:567", "teal": 2724}, {"pc": [2630], "source": "contracts/NFDInstance.algo.ts:567", "teal": 2725}, {"pc": [2631, 2632], "source": "contracts/NFDInstance.algo.ts:568", "teal": 2726}, {"pc": [2633], "source": "contracts/NFDInstance.algo.ts:568", "teal": 2727}, {"pc": [2634, 2635], "source": "contracts/NFDInstance.algo.ts:569", "teal": 2728}, {"pc": [2636], "source": "contracts/NFDInstance.algo.ts:569", "teal": 2729}, {"pc": [2637], "source": "contracts/NFDInstance.algo.ts:569", "teal": 2730}, {"pc": [2638, 2639], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2733}, {"pc": [2640, 2641], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2736}, {"pc": [2642], "source": "contracts/NFDInstance.algo.ts:491", "teal": 2737}, {"pc": [2643, 2644], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2742}, {"pc": [2645], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2743}, {"pc": [2646], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2744}, {"pc": [2647], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2745}, {"pc": [2648, 2649], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2746}, {"pc": [2650], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2747}, {"pc": [2651], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2748}, {"pc": [2652], "errorMessage": "argument 0 (payment) for purchase must be a pay transaction", "source": "contracts/NFDInstance.algo.ts:573", "teal": 2751}, {"pc": [2653, 2654, 2655], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2754}, {"pc": [2656], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2755}, {"pc": [2657], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2756}, {"pc": [2658, 2659, 2660], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2760}, {"pc": [2661], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2763}, {"pc": [2662, 2663], "source": "contracts/NFDInstance.algo.ts:573", "teal": 2764}, {"pc": [2664, 2665, 2666], "source": "contracts/NFDInstance.algo.ts:574", "teal": 2768}, {"pc": [2667], "source": "contracts/NFDInstance.algo.ts:574", "teal": 2769}, {"pc": [2668], "source": "contracts/NFDInstance.algo.ts:574", "teal": 2770}, {"pc": [2669], "source": "contracts/NFDInstance.algo.ts:574", "teal": 2771}, {"pc": [2670], "source": "contracts/NFDInstance.algo.ts:574", "teal": 2772}, {"pc": [2671], "source": "contracts/NFDInstance.algo.ts:574", "teal": 2773}, {"pc": [2672], "source": "contracts/NFDInstance.algo.ts:574", "teal": 2774}, {"pc": [2673, 2674, 2675], "source": "contracts/NFDInstance.algo.ts:575", "teal": 2778}, {"pc": [2676], "source": "contracts/NFDInstance.algo.ts:575", "teal": 2779}, {"pc": [2677], "errorMessage": "can't be expired", "source": "contracts/NFDInstance.algo.ts:575", "teal": 2782}, {"pc": [2678, 2679, 2680], "source": "contracts/NFDInstance.algo.ts:576", "teal": 2786}, {"pc": [2681], "errorMessage": "must be for sale", "source": "contracts/NFDInstance.algo.ts:576", "teal": 2789}, {"pc": [2682, 2683], "source": "contracts/NFDInstance.algo.ts:577", "teal": 2793}, {"pc": [2684, 2685, 2686], "source": "contracts/NFDInstance.algo.ts:577", "teal": 2794}, {"pc": [2687, 2688], "source": "contracts/NFDInstance.algo.ts:577", "teal": 2795}, {"pc": [2689, 2690], "source": "contracts/NFDInstance.algo.ts:578", "teal": 2799}, {"pc": [2691, 2692, 2693], "source": "contracts/NFDInstance.algo.ts:578", "teal": 2800}, {"pc": [2694, 2695], "source": "contracts/NFDInstance.algo.ts:578", "teal": 2801}, {"pc": [2696, 2697], "source": "contracts/NFDInstance.algo.ts:579", "teal": 2805}, {"pc": [2698, 2699], "source": "contracts/NFDInstance.algo.ts:579", "teal": 2806}, {"pc": [2700, 2701], "source": "contracts/NFDInstance.algo.ts:579", "teal": 2807}, {"pc": [2702, 2703], "source": "contracts/NFDInstance.algo.ts:580", "teal": 2811}, {"pc": [2704, 2705], "source": "contracts/NFDInstance.algo.ts:580", "teal": 2812}, {"pc": [2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718], "source": "contracts/NFDInstance.algo.ts:581", "teal": 2816}, {"pc": [2719, 2720], "source": "contracts/NFDInstance.algo.ts:581", "teal": 2817}, {"pc": [2721, 2722, 2723], "source": "contracts/NFDInstance.algo.ts:581", "teal": 2818}, {"pc": [2724], "source": "contracts/NFDInstance.algo.ts:581", "teal": 2819}, {"pc": [2725], "source": "contracts/NFDInstance.algo.ts:581", "teal": 2820}, {"pc": [2726, 2727], "source": "contracts/NFDInstance.algo.ts:583", "teal": 2824}, {"pc": [2728, 2729], "source": "contracts/NFDInstance.algo.ts:583", "teal": 2825}, {"pc": [2730, 2731], "source": "contracts/NFDInstance.algo.ts:583", "teal": 2826}, {"pc": [2732], "source": "contracts/NFDInstance.algo.ts:583", "teal": 2827}, {"pc": [2733], "errorMessage": "payment sender must be same as purchase caller", "source": "contracts/NFDInstance.algo.ts:583", "teal": 2830}, {"pc": [2734, 2735], "source": "contracts/NFDInstance.algo.ts:585", "teal": 2835}, {"pc": [2736], "source": "contracts/NFDInstance.algo.ts:585", "teal": 2836}, {"pc": [2737], "source": "contracts/NFDInstance.algo.ts:585", "teal": 2837}, {"pc": [2738], "source": "contracts/NFDInstance.algo.ts:585", "teal": 2838}, {"pc": [2739, 2740, 2741], "source": "contracts/NFDInstance.algo.ts:585", "teal": 2839}, {"pc": [2742, 2743], "source": "contracts/NFDInstance.algo.ts:587", "teal": 2847}, {"pc": [2744, 2745], "source": "contracts/NFDInstance.algo.ts:587", "teal": 2848}, {"pc": [2746, 2747], "source": "contracts/NFDInstance.algo.ts:587", "teal": 2849}, {"pc": [2748], "source": "contracts/NFDInstance.algo.ts:587", "teal": 2850}, {"pc": [2749], "errorMessage": "Reserved owner set, but sender isn't the reserved address", "source": "contracts/NFDInstance.algo.ts:586", "teal": 2853}, {"pc": [2750, 2751], "source": "contracts/NFDInstance.algo.ts:594", "teal": 2858}, {"pc": [2752, 2753], "source": "contracts/NFDInstance.algo.ts:594", "teal": 2859}, {"pc": [2754, 2755], "source": "contracts/NFDInstance.algo.ts:594", "teal": 2860}, {"pc": [2756, 2757], "source": "contracts/NFDInstance.algo.ts:599", "teal": 2865}, {"pc": [2758, 2759, 2760], "source": "contracts/NFDInstance.algo.ts:599", "teal": 2866}, {"pc": [2761, 2762], "source": "contracts/NFDInstance.algo.ts:599", "teal": 2867}, {"pc": [2763, 2764], "source": "contracts/NFDInstance.algo.ts:599", "teal": 2868}, {"pc": [2765], "source": "contracts/NFDInstance.algo.ts:599", "teal": 2869}, {"pc": [2766, 2767, 2768], "source": "contracts/NFDInstance.algo.ts:599", "teal": 2870}, {"pc": [2769, 2770], "source": "contracts/NFDInstance.algo.ts:600", "teal": 2875}, {"pc": [2771, 2772], "source": "contracts/NFDInstance.algo.ts:600", "teal": 2876}, {"pc": [2773, 2774, 2775], "source": "contracts/NFDInstance.algo.ts:600", "teal": 2877}, {"pc": [2776], "source": "contracts/NFDInstance.algo.ts:600", "teal": 2878}, {"pc": [2777, 2778], "source": "contracts/NFDInstance.algo.ts:600", "teal": 2879}, {"pc": [2779, 2780], "source": "contracts/NFDInstance.algo.ts:603", "teal": 2885}, {"pc": [2781, 2782, 2783], "source": "contracts/NFDInstance.algo.ts:603", "teal": 2886}, {"pc": [2784], "source": "contracts/NFDInstance.algo.ts:603", "teal": 2887}, {"pc": [2785], "source": "contracts/NFDInstance.algo.ts:603", "teal": 2888}, {"pc": [2786], "source": "contracts/NFDInstance.algo.ts:603", "teal": 2889}, {"pc": [2787, 2788, 2789], "source": "contracts/NFDInstance.algo.ts:603", "teal": 2890}, {"pc": [2790, 2791], "source": "contracts/NFDInstance.algo.ts:604", "teal": 2895}, {"pc": [2792, 2793], "source": "contracts/NFDInstance.algo.ts:604", "teal": 2896}, {"pc": [2794], "source": "contracts/NFDInstance.algo.ts:604", "teal": 2897}, {"pc": [2795], "errorMessage": "offer must be at least min amount", "source": "contracts/NFDInstance.algo.ts:604", "teal": 2900}, {"pc": [2796, 2797], "source": "contracts/NFDInstance.algo.ts:607", "teal": 2905}, {"pc": [2798, 2799], "source": "contracts/NFDInstance.algo.ts:607", "teal": 2906}, {"pc": [2800], "source": "contracts/NFDInstance.algo.ts:607", "teal": 2907}, {"pc": [2801], "errorMessage": "offer must be at least sell amount", "source": "contracts/NFDInstance.algo.ts:607", "teal": 2910}, {"pc": [2802, 2803], "source": "contracts/NFDInstance.algo.ts:610", "teal": 2914}, {"pc": [2804, 2805], "source": "contracts/NFDInstance.algo.ts:610", "teal": 2915}, {"pc": [2806], "source": "contracts/NFDInstance.algo.ts:610", "teal": 2916}, {"pc": [2807, 2808], "source": "contracts/NFDInstance.algo.ts:610", "teal": 2917}, {"pc": [2809, 2810], "source": "contracts/NFDInstance.algo.ts:611", "teal": 2921}, {"pc": [2811, 2812], "source": "contracts/NFDInstance.algo.ts:611", "teal": 2922}, {"pc": [2813], "source": "contracts/NFDInstance.algo.ts:611", "teal": 2923}, {"pc": [2814, 2815], "source": "contracts/NFDInstance.algo.ts:611", "teal": 2924}, {"pc": [2816, 2817], "source": "contracts/NFDInstance.algo.ts:614", "teal": 2929}, {"pc": [2818, 2819], "source": "contracts/NFDInstance.algo.ts:614", "teal": 2930}, {"pc": [2820, 2821], "source": "contracts/NFDInstance.algo.ts:614", "teal": 2931}, {"pc": [2822], "source": "contracts/NFDInstance.algo.ts:614", "teal": 2932}, {"pc": [2823], "errorMessage": "transaction verification failed: {\"txn\":\"payment\",\"field\":\"amount\",\"expected\":\"origOfferamt\"}", "source": "contracts/NFDInstance.algo.ts:614", "teal": 2935}, {"pc": [2824, 2825], "source": "contracts/NFDInstance.algo.ts:614", "teal": 2938}, {"pc": [2826, 2827], "source": "contracts/NFDInstance.algo.ts:614", "teal": 2939}, {"pc": [2828, 2829], "source": "contracts/NFDInstance.algo.ts:614", "teal": 2940}, {"pc": [2830], "source": "contracts/NFDInstance.algo.ts:614", "teal": 2941}, {"pc": [2831], "errorMessage": "transaction verification failed: {\"txn\":\"payment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}", "source": "contracts/NFDInstance.algo.ts:614", "teal": 2944}, {"pc": [2832], "source": "contracts/NFDInstance.algo.ts:617", "teal": 2948}, {"pc": [2833, 2834], "source": "contracts/NFDInstance.algo.ts:617", "teal": 2949}, {"pc": [2835, 2836], "source": "contracts/NFDInstance.algo.ts:618", "teal": 2954}, {"pc": [2837, 2838, 2839], "source": "contracts/NFDInstance.algo.ts:618", "teal": 2955}, {"pc": [2840], "source": "contracts/NFDInstance.algo.ts:618", "teal": 2956}, {"pc": [2841], "source": "contracts/NFDInstance.algo.ts:618", "teal": 2957}, {"pc": [2842, 2843, 2844], "source": "contracts/NFDInstance.algo.ts:618", "teal": 2958}, {"pc": [2845], "source": "contracts/NFDInstance.algo.ts:620", "teal": 2963}, {"pc": [2846, 2847], "source": "contracts/NFDInstance.algo.ts:620", "teal": 2964}, {"pc": [2848, 2849, 2850], "source": "contracts/NFDInstance.algo.ts:618", "teal": 2965}, {"pc": [2851, 2852], "source": "contracts/NFDInstance.algo.ts:624", "teal": 2970}, {"pc": [2853, 2854], "source": "contracts/NFDInstance.algo.ts:624", "teal": 2971}, {"pc": [2855, 2856, 2857], "source": "contracts/NFDInstance.algo.ts:624", "teal": 2972}, {"pc": [2858], "source": "contracts/NFDInstance.algo.ts:624", "teal": 2973}, {"pc": [2859, 2860], "source": "contracts/NFDInstance.algo.ts:624", "teal": 2974}, {"pc": [2861], "source": "contracts/NFDInstance.algo.ts:624", "teal": 2975}, {"pc": [2862, 2863], "source": "contracts/NFDInstance.algo.ts:624", "teal": 2976}, {"pc": [2864, 2865], "source": "contracts/NFDInstance.algo.ts:627", "teal": 2981}, {"pc": [2866, 2867], "source": "contracts/NFDInstance.algo.ts:627", "teal": 2982}, {"pc": [2868], "source": "contracts/NFDInstance.algo.ts:628", "teal": 2986}, {"pc": [2869, 2870], "source": "contracts/NFDInstance.algo.ts:628", "teal": 2987}, {"pc": [2871, 2872], "source": "contracts/NFDInstance.algo.ts:629", "teal": 2992}, {"pc": [2873], "source": "contracts/NFDInstance.algo.ts:629", "teal": 2993}, {"pc": [2874], "source": "contracts/NFDInstance.algo.ts:629", "teal": 2994}, {"pc": [2875, 2876, 2877], "source": "contracts/NFDInstance.algo.ts:629", "teal": 2995}, {"pc": [2878, 2879], "source": "contracts/NFDInstance.algo.ts:630", "teal": 3000}, {"pc": [2880], "source": "contracts/NFDInstance.algo.ts:630", "teal": 3001}, {"pc": [2881], "source": "contracts/NFDInstance.algo.ts:630", "teal": 3002}, {"pc": [2882, 2883], "source": "contracts/NFDInstance.algo.ts:630", "teal": 3003}, {"pc": [2884, 2885], "source": "contracts/NFDInstance.algo.ts:632", "teal": 3010}, {"pc": [2886, 2887], "source": "contracts/NFDInstance.algo.ts:632", "teal": 3011}, {"pc": [2888], "source": "contracts/NFDInstance.algo.ts:632", "teal": 3012}, {"pc": [2889], "source": "contracts/NFDInstance.algo.ts:632", "teal": 3013}, {"pc": [2890], "source": "contracts/NFDInstance.algo.ts:632", "teal": 3014}, {"pc": [2891, 2892, 2893], "source": "contracts/NFDInstance.algo.ts:632", "teal": 3015}, {"pc": [2894, 2895], "source": "contracts/NFDInstance.algo.ts:633", "teal": 3016}, {"pc": [2896, 2897], "source": "contracts/NFDInstance.algo.ts:633", "teal": 3017}, {"pc": [2898, 2899], "source": "contracts/NFDInstance.algo.ts:633", "teal": 3018}, {"pc": [2900], "source": "contracts/NFDInstance.algo.ts:633", "teal": 3019}, {"pc": [2901], "source": "contracts/NFDInstance.algo.ts:632", "teal": 3020}, {"pc": [2902], "source": "contracts/NFDInstance.algo.ts:633", "teal": 3023}, {"pc": [2903, 2904, 2905], "source": "contracts/NFDInstance.algo.ts:633", "teal": 3024}, {"pc": [2906, 2907], "source": "contracts/NFDInstance.algo.ts:634", "teal": 3025}, {"pc": [2908, 2909], "source": "contracts/NFDInstance.algo.ts:634", "teal": 3026}, {"pc": [2910, 2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920], "source": "contracts/NFDInstance.algo.ts:634", "teal": 3027}, {"pc": [2921], "source": "contracts/NFDInstance.algo.ts:634", "teal": 3028}, {"pc": [2922], "source": "contracts/NFDInstance.algo.ts:633", "teal": 3029}, {"pc": [2923, 2924, 2925], "source": "contracts/NFDInstance.algo.ts:631", "teal": 3032}, {"pc": [2926, 2927], "source": "contracts/NFDInstance.algo.ts:636", "teal": 3037}, {"pc": [2928, 2929], "source": "contracts/NFDInstance.algo.ts:636", "teal": 3038}, {"pc": [2930, 2931], "source": "contracts/NFDInstance.algo.ts:636", "teal": 3039}, {"pc": [2932, 2933], "source": "contracts/NFDInstance.algo.ts:637", "teal": 3043}, {"pc": [2934, 2935], "source": "contracts/NFDInstance.algo.ts:637", "teal": 3044}, {"pc": [2936, 2937], "source": "contracts/NFDInstance.algo.ts:637", "teal": 3045}, {"pc": [2938], "source": "contracts/NFDInstance.algo.ts:641", "teal": 3060}, {"pc": [2939, 2940], "source": "contracts/NFDInstance.algo.ts:641", "teal": 3061}, {"pc": [2941, 2942], "source": "contracts/NFDInstance.algo.ts:641", "teal": 3062}, {"pc": [2943, 2944, 2945, 2946, 2947, 2948], "source": "contracts/NFDInstance.algo.ts:641", "teal": 3063}, {"pc": [2949, 2950], "source": "contracts/NFDInstance.algo.ts:641", "teal": 3064}, {"pc": [2951, 2952], "source": "contracts/NFDInstance.algo.ts:642", "teal": 3068}, {"pc": [2953, 2954], "source": "contracts/NFDInstance.algo.ts:642", "teal": 3069}, {"pc": [2955, 2956], "source": "contracts/NFDInstance.algo.ts:644", "teal": 3078}, {"pc": [2957], "source": "contracts/NFDInstance.algo.ts:644", "teal": 3079}, {"pc": [2958], "source": "contracts/NFDInstance.algo.ts:644", "teal": 3080}, {"pc": [2959], "source": "contracts/NFDInstance.algo.ts:644", "teal": 3081}, {"pc": [2960], "source": "contracts/NFDInstance.algo.ts:644", "teal": 3082}, {"pc": [2961, 2962, 2963], "source": "contracts/NFDInstance.algo.ts:644", "teal": 3083}, {"pc": [2964], "source": "contracts/NFDInstance.algo.ts:644", "teal": 3084}, {"pc": [2965], "source": "contracts/NFDInstance.algo.ts:644", "teal": 3085}, {"pc": [2966, 2967], "source": "contracts/NFDInstance.algo.ts:644", "teal": 3086}, {"pc": [2968, 2969, 2970], "source": "contracts/NFDInstance.algo.ts:645", "teal": 3087}, {"pc": [2971], "source": "contracts/NFDInstance.algo.ts:645", "teal": 3088}, {"pc": [2972, 2973], "source": "contracts/NFDInstance.algo.ts:645", "teal": 3089}, {"pc": [2974], "source": "contracts/NFDInstance.algo.ts:646", "teal": 3090}, {"pc": [2975], "source": "contracts/NFDInstance.algo.ts:646", "teal": 3091}, {"pc": [2976, 2977], "source": "contracts/NFDInstance.algo.ts:646", "teal": 3092}, {"pc": [2978, 2979], "source": "contracts/NFDInstance.algo.ts:647", "teal": 3093}, {"pc": [2980, 2981], "source": "contracts/NFDInstance.algo.ts:647", "teal": 3094}, {"pc": [2982], "source": "contracts/NFDInstance.algo.ts:641", "teal": 3097}, {"pc": [2983, 2984], "source": "contracts/NFDInstance.algo.ts:641", "teal": 3098}, {"pc": [2985], "source": "contracts/NFDInstance.algo.ts:641", "teal": 3101}, {"pc": [2986, 2987, 2988, 2989, 2990, 2991], "source": "contracts/NFDInstance.algo.ts:651", "teal": 3115}, {"pc": [2992], "source": "contracts/NFDInstance.algo.ts:651", "teal": 3116}, {"pc": [2993], "source": "contracts/NFDInstance.algo.ts:651", "teal": 3117}, {"pc": [2994, 2995, 2996, 2997], "source": "contracts/NFDInstance.algo.ts:651", "teal": 3118}, {"pc": [2998, 2999, 3000], "source": "contracts/NFDInstance.algo.ts:652", "teal": 3119}, {"pc": [3001], "source": "contracts/NFDInstance.algo.ts:652", "teal": 3120}, {"pc": [3002, 3003, 3004], "source": "contracts/NFDInstance.algo.ts:652", "teal": 3121}, {"pc": [3005, 3006], "source": "contracts/NFDInstance.algo.ts:653", "teal": 3122}, {"pc": [3007], "source": "contracts/NFDInstance.algo.ts:653", "teal": 3123}, {"pc": [3008], "source": "contracts/NFDInstance.algo.ts:653", "teal": 3124}, {"pc": [3009], "source": "contracts/NFDInstance.algo.ts:653", "teal": 3125}, {"pc": [3010], "source": "contracts/NFDInstance.algo.ts:653", "teal": 3126}, {"pc": [3011, 3012, 3013], "source": "contracts/NFDInstance.algo.ts:653", "teal": 3127}, {"pc": [3014], "source": "contracts/NFDInstance.algo.ts:653", "teal": 3128}, {"pc": [3015], "source": "contracts/NFDInstance.algo.ts:653", "teal": 3129}, {"pc": [3016, 3017, 3018], "source": "contracts/NFDInstance.algo.ts:653", "teal": 3130}, {"pc": [3019], "source": "contracts/NFDInstance.algo.ts:654", "teal": 3131}, {"pc": [3020], "source": "contracts/NFDInstance.algo.ts:654", "teal": 3132}, {"pc": [3021, 3022, 3023], "source": "contracts/NFDInstance.algo.ts:654", "teal": 3133}, {"pc": [3024, 3025], "source": "contracts/NFDInstance.algo.ts:655", "teal": 3134}, {"pc": [3026, 3027, 3028], "source": "contracts/NFDInstance.algo.ts:655", "teal": 3135}, {"pc": [3029, 3030], "source": "contracts/NFDInstance.algo.ts:656", "teal": 3136}, {"pc": [3031], "source": "contracts/NFDInstance.algo.ts:656", "teal": 3137}, {"pc": [3032, 3033, 3034], "source": "contracts/NFDInstance.algo.ts:656", "teal": 3138}, {"pc": [3035, 3036], "source": "contracts/NFDInstance.algo.ts:657", "teal": 3139}, {"pc": [3037], "source": "contracts/NFDInstance.algo.ts:657", "teal": 3140}, {"pc": [3038, 3039, 3040], "source": "contracts/NFDInstance.algo.ts:657", "teal": 3141}, {"pc": [3041, 3042], "source": "contracts/NFDInstance.algo.ts:658", "teal": 3142}, {"pc": [3043], "source": "contracts/NFDInstance.algo.ts:658", "teal": 3143}, {"pc": [3044, 3045, 3046], "source": "contracts/NFDInstance.algo.ts:658", "teal": 3144}, {"pc": [3047, 3048], "source": "contracts/NFDInstance.algo.ts:659", "teal": 3145}, {"pc": [3049, 3050, 3051], "source": "contracts/NFDInstance.algo.ts:659", "teal": 3146}, {"pc": [3052, 3053], "source": "contracts/NFDInstance.algo.ts:660", "teal": 3147}, {"pc": [3054], "source": "contracts/NFDInstance.algo.ts:660", "teal": 3148}, {"pc": [3055, 3056, 3057], "source": "contracts/NFDInstance.algo.ts:660", "teal": 3149}, {"pc": [3058], "source": "contracts/NFDInstance.algo.ts:651", "teal": 3150}, {"pc": [3059], "source": "contracts/NFDInstance.algo.ts:651", "teal": 3151}, {"pc": [3060], "source": "contracts/NFDInstance.algo.ts:651", "teal": 3152}, {"pc": [3061], "source": "contracts/NFDInstance.algo.ts:651", "teal": 3153}, {"pc": [3062, 3063], "source": "contracts/NFDInstance.algo.ts:664", "teal": 3158}, {"pc": [3064], "source": "contracts/NFDInstance.algo.ts:664", "teal": 3159}, {"pc": [3065], "source": "contracts/NFDInstance.algo.ts:664", "teal": 3160}, {"pc": [3066, 3067, 3068], "source": "contracts/NFDInstance.algo.ts:664", "teal": 3161}, {"pc": [3069], "source": "contracts/NFDInstance.algo.ts:665", "teal": 3170}, {"pc": [3070], "source": "contracts/NFDInstance.algo.ts:665", "teal": 3171}, {"pc": [3071, 3072], "source": "contracts/NFDInstance.algo.ts:665", "teal": 3172}, {"pc": [3073, 3074], "source": "contracts/NFDInstance.algo.ts:666", "teal": 3176}, {"pc": [3075, 3076], "source": "contracts/NFDInstance.algo.ts:666", "teal": 3177}, {"pc": [3077, 3078], "source": "contracts/NFDInstance.algo.ts:667", "teal": 3181}, {"pc": [3079, 3080], "source": "contracts/NFDInstance.algo.ts:667", "teal": 3182}, {"pc": [3081, 3082], "source": "contracts/NFDInstance.algo.ts:667", "teal": 3183}, {"pc": [3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101], "source": "contracts/NFDInstance.algo.ts:668", "teal": 3187}, {"pc": [3102, 3103], "source": "contracts/NFDInstance.algo.ts:668", "teal": 3188}, {"pc": [3104], "source": "contracts/NFDInstance.algo.ts:665", "teal": 3191}, {"pc": [3105, 3106], "source": "contracts/NFDInstance.algo.ts:665", "teal": 3192}, {"pc": [3107], "source": "contracts/NFDInstance.algo.ts:665", "teal": 3195}, {"pc": [3108, 3109], "source": "contracts/NFDInstance.algo.ts:676", "teal": 3206}, {"pc": [3110], "source": "contracts/NFDInstance.algo.ts:675", "teal": 3207}, {"pc": [3111, 3112], "source": "contracts/NFDInstance.algo.ts:674", "teal": 3208}, {"pc": [3113, 3114], "source": "contracts/NFDInstance.algo.ts:673", "teal": 3209}, {"pc": [3115], "source": "contracts/NFDInstance.algo.ts:673", "teal": 3210}, {"pc": [3116, 3117], "source": "contracts/NFDInstance.algo.ts:672", "teal": 3211}, {"pc": [3118, 3119, 3120], "source": "contracts/NFDInstance.algo.ts:671", "teal": 3212}, {"pc": [3121], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3216}, {"pc": [3122, 3123], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3217}, {"pc": [3124, 3125], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3218}, {"pc": [3126], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3219}, {"pc": [3127, 3128], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3220}, {"pc": [3129, 3130], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3221}, {"pc": [3131], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3222}, {"pc": [3132, 3133], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3223}, {"pc": [3134, 3135], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3224}, {"pc": [3136, 3137], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3225}, {"pc": [3138, 3139], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3226}, {"pc": [3140], "source": "contracts/NFDInstance.algo.ts:679", "teal": 3227}, {"pc": [3141, 3142], "source": "contracts/NFDInstance.algo.ts:684", "teal": 3232}, {"pc": [3143, 3144, 3145], "source": "contracts/NFDInstance.algo.ts:684", "teal": 3233}, {"pc": [3146], "source": "contracts/NFDInstance.algo.ts:684", "teal": 3234}, {"pc": [3147], "source": "contracts/NFDInstance.algo.ts:684", "teal": 3235}, {"pc": [3148], "source": "contracts/NFDInstance.algo.ts:684", "teal": 3236}, {"pc": [3149, 3150, 3151], "source": "contracts/NFDInstance.algo.ts:684", "teal": 3237}, {"pc": [3152, 3153], "source": "contracts/NFDInstance.algo.ts:686", "teal": 3244}, {"pc": [3154], "source": "contracts/NFDInstance.algo.ts:686", "teal": 3245}, {"pc": [3155, 3156], "source": "contracts/NFDInstance.algo.ts:686", "teal": 3246}, {"pc": [3157, 3158], "source": "contracts/NFDInstance.algo.ts:686", "teal": 3247}, {"pc": [3159], "source": "contracts/NFDInstance.algo.ts:686", "teal": 3248}, {"pc": [3160], "source": "contracts/NFDInstance.algo.ts:686", "teal": 3249}, {"pc": [3161, 3162, 3163], "source": "contracts/NFDInstance.algo.ts:686", "teal": 3250}, {"pc": [3164], "source": "contracts/NFDInstance.algo.ts:687", "teal": 3251}, {"pc": [3165, 3166, 3167], "source": "contracts/NFDInstance.algo.ts:687", "teal": 3252}, {"pc": [3168], "source": "contracts/NFDInstance.algo.ts:687", "teal": 3253}, {"pc": [3169], "source": "contracts/NFDInstance.algo.ts:687", "teal": 3254}, {"pc": [3170], "source": "contracts/NFDInstance.algo.ts:687", "teal": 3255}, {"pc": [3171], "source": "contracts/NFDInstance.algo.ts:686", "teal": 3256}, {"pc": [3172, 3173, 3174], "source": "contracts/NFDInstance.algo.ts:685", "teal": 3259}, {"pc": [3175], "source": "contracts/NFDInstance.algo.ts:689", "teal": 3268}, {"pc": [3176], "source": "contracts/NFDInstance.algo.ts:689", "teal": 3269}, {"pc": [3177, 3178], "source": "contracts/NFDInstance.algo.ts:689", "teal": 3270}, {"pc": [3179, 3180], "source": "contracts/NFDInstance.algo.ts:690", "teal": 3274}, {"pc": [3181, 3182, 3183], "source": "contracts/NFDInstance.algo.ts:690", "teal": 3275}, {"pc": [3184, 3185], "source": "contracts/NFDInstance.algo.ts:690", "teal": 3276}, {"pc": [3186, 3187], "source": "contracts/NFDInstance.algo.ts:691", "teal": 3280}, {"pc": [3188], "source": "contracts/NFDInstance.algo.ts:691", "teal": 3281}, {"pc": [3189, 3190], "source": "contracts/NFDInstance.algo.ts:691", "teal": 3282}, {"pc": [3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204], "source": "contracts/NFDInstance.algo.ts:692", "teal": 3286}, {"pc": [3205, 3206], "source": "contracts/NFDInstance.algo.ts:692", "teal": 3287}, {"pc": [3207], "source": "contracts/NFDInstance.algo.ts:689", "teal": 3290}, {"pc": [3208, 3209], "source": "contracts/NFDInstance.algo.ts:689", "teal": 3291}, {"pc": [3210], "source": "contracts/NFDInstance.algo.ts:689", "teal": 3294}, {"pc": [3211, 3212], "source": "contracts/NFDInstance.algo.ts:698", "teal": 3301}, {"pc": [3213], "source": "contracts/NFDInstance.algo.ts:698", "teal": 3302}, {"pc": [3214], "source": "contracts/NFDInstance.algo.ts:698", "teal": 3303}, {"pc": [3215, 3216, 3217], "source": "contracts/NFDInstance.algo.ts:698", "teal": 3304}, {"pc": [3218], "source": "contracts/NFDInstance.algo.ts:711", "teal": 3308}, {"pc": [3219, 3220], "source": "contracts/NFDInstance.algo.ts:711", "teal": 3309}, {"pc": [3221], "source": "contracts/NFDInstance.algo.ts:711", "teal": 3310}, {"pc": [3222, 3223], "source": "contracts/NFDInstance.algo.ts:712", "teal": 3314}, {"pc": [3224, 3225], "source": "contracts/NFDInstance.algo.ts:712", "teal": 3315}, {"pc": [3226], "source": "contracts/NFDInstance.algo.ts:712", "teal": 3316}, {"pc": [3227, 3228], "source": "contracts/NFDInstance.algo.ts:713", "teal": 3321}, {"pc": [3229, 3230], "source": "contracts/NFDInstance.algo.ts:713", "teal": 3322}, {"pc": [3231, 3232, 3233], "source": "contracts/NFDInstance.algo.ts:713", "teal": 3323}, {"pc": [3234], "source": "contracts/NFDInstance.algo.ts:713", "teal": 3324}, {"pc": [3235, 3236, 3237], "source": "contracts/NFDInstance.algo.ts:713", "teal": 3325}, {"pc": [3238, 3239], "source": "contracts/NFDInstance.algo.ts:714", "teal": 3330}, {"pc": [3240, 3241], "source": "contracts/NFDInstance.algo.ts:714", "teal": 3331}, {"pc": [3242], "source": "contracts/NFDInstance.algo.ts:714", "teal": 3332}, {"pc": [3243], "source": "contracts/NFDInstance.algo.ts:714", "teal": 3333}, {"pc": [3244], "source": "contracts/NFDInstance.algo.ts:716", "teal": 3338}, {"pc": [3245, 3246], "source": "contracts/NFDInstance.algo.ts:716", "teal": 3339}, {"pc": [3247], "source": "contracts/NFDInstance.algo.ts:716", "teal": 3340}, {"pc": [3248], "source": "contracts/NFDInstance.algo.ts:716", "teal": 3341}, {"pc": [3249, 3250], "source": "contracts/NFDInstance.algo.ts:717", "teal": 3345}, {"pc": [3251, 3252], "source": "contracts/NFDInstance.algo.ts:717", "teal": 3346}, {"pc": [3253], "source": "contracts/NFDInstance.algo.ts:717", "teal": 3347}, {"pc": [3254], "source": "contracts/NFDInstance.algo.ts:717", "teal": 3348}, {"pc": [3255], "source": "contracts/NFDInstance.algo.ts:718", "teal": 3352}, {"pc": [3256], "source": "contracts/NFDInstance.algo.ts:718", "teal": 3353}, {"pc": [3257, 3258], "source": "contracts/NFDInstance.algo.ts:719", "teal": 3357}, {"pc": [3259], "source": "contracts/NFDInstance.algo.ts:719", "teal": 3358}, {"pc": [3260, 3261], "source": "contracts/NFDInstance.algo.ts:720", "teal": 3362}, {"pc": [3262], "source": "contracts/NFDInstance.algo.ts:720", "teal": 3363}, {"pc": [3263, 3264], "source": "contracts/NFDInstance.algo.ts:721", "teal": 3367}, {"pc": [3265], "source": "contracts/NFDInstance.algo.ts:721", "teal": 3368}, {"pc": [3266, 3267], "source": "contracts/NFDInstance.algo.ts:722", "teal": 3372}, {"pc": [3268], "source": "contracts/NFDInstance.algo.ts:722", "teal": 3373}, {"pc": [3269, 3270], "source": "contracts/NFDInstance.algo.ts:723", "teal": 3377}, {"pc": [3271], "source": "contracts/NFDInstance.algo.ts:723", "teal": 3378}, {"pc": [3272, 3273], "source": "contracts/NFDInstance.algo.ts:725", "teal": 3382}, {"pc": [3274, 3275], "source": "contracts/NFDInstance.algo.ts:725", "teal": 3383}, {"pc": [3276], "source": "contracts/NFDInstance.algo.ts:725", "teal": 3384}, {"pc": [3277, 3278], "source": "contracts/NFDInstance.algo.ts:726", "teal": 3388}, {"pc": [3279], "source": "contracts/NFDInstance.algo.ts:726", "teal": 3389}, {"pc": [3280], "source": "contracts/NFDInstance.algo.ts:726", "teal": 3390}, {"pc": [3281], "source": "contracts/NFDInstance.algo.ts:573", "teal": 3391}, {"pc": [3282, 3283], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3396}, {"pc": [3284, 3285, 3286], "source": "contracts/NFDInstance.algo.ts:730", "teal": 3399}, {"pc": [3287], "source": "contracts/NFDInstance.algo.ts:730", "teal": 3400}, {"pc": [3288], "source": "contracts/NFDInstance.algo.ts:730", "teal": 3401}, {"pc": [3289], "source": "contracts/NFDInstance.algo.ts:730", "teal": 3402}, {"pc": [3290], "source": "contracts/NFDInstance.algo.ts:730", "teal": 3403}, {"pc": [3291], "errorMessage": "argument 0 (address) for isAddressInField must be a address", "source": "contracts/NFDInstance.algo.ts:730", "teal": 3406}, {"pc": [3292, 3293, 3294], "source": "contracts/NFDInstance.algo.ts:730", "teal": 3409}, {"pc": [3295, 3296, 3297], "source": "contracts/NFDInstance.algo.ts:730", "teal": 3410}, {"pc": [3298, 3299, 3300], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3413}, {"pc": [3301, 3302], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3414}, {"pc": [3303], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3415}, {"pc": [3304, 3305], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3416}, {"pc": [3306], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3417}, {"pc": [3307], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3418}, {"pc": [3308], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3419}, {"pc": [3309], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3420}, {"pc": [3310], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3421}, {"pc": [3311, 3312, 3313], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3425}, {"pc": [3314, 3315], "source": "contracts/NFDInstance.algo.ts:731", "teal": 3429}, {"pc": [3316, 3317], "source": "contracts/NFDInstance.algo.ts:731", "teal": 3430}, {"pc": [3318], "source": "contracts/NFDInstance.algo.ts:731", "teal": 3431}, {"pc": [3319], "source": "contracts/NFDInstance.algo.ts:731", "teal": 3432}, {"pc": [3320, 3321], "source": "contracts/NFDInstance.algo.ts:732", "teal": 3437}, {"pc": [3322], "source": "contracts/NFDInstance.algo.ts:732", "teal": 3438}, {"pc": [3323], "source": "contracts/NFDInstance.algo.ts:732", "teal": 3439}, {"pc": [3324], "source": "contracts/NFDInstance.algo.ts:732", "teal": 3440}, {"pc": [3325], "source": "contracts/NFDInstance.algo.ts:732", "teal": 3441}, {"pc": [3326, 3327, 3328], "source": "contracts/NFDInstance.algo.ts:732", "teal": 3442}, {"pc": [3329], "source": "contracts/NFDInstance.algo.ts:733", "teal": 3447}, {"pc": [3330], "source": "contracts/NFDInstance.algo.ts:733", "teal": 3448}, {"pc": [3331, 3332], "source": "contracts/NFDInstance.algo.ts:735", "teal": 3453}, {"pc": [3333, 3334], "source": "contracts/NFDInstance.algo.ts:735", "teal": 3454}, {"pc": [3335], "source": "contracts/NFDInstance.algo.ts:735", "teal": 3455}, {"pc": [3336], "errorMessage": "box value does not exist: this.boxes(fieldName).value", "source": "contracts/NFDInstance.algo.ts:735", "teal": 3458}, {"pc": [3337, 3338, 3339], "source": "contracts/NFDInstance.algo.ts:735", "teal": 3459}, {"pc": [3340], "source": "contracts/NFDInstance.algo.ts:729", "teal": 3460}, {"pc": [3341, 3342, 3343], "source": "contracts/NFDInstance.algo.ts:797", "teal": 3464}, {"pc": [3344], "source": "contracts/NFDInstance.algo.ts:797", "teal": 3467}, {"pc": [3345], "source": "contracts/NFDInstance.algo.ts:806", "teal": 3475}, {"pc": [3346], "source": "contracts/NFDInstance.algo.ts:806", "teal": 3476}, {"pc": [3347, 3348], "source": "contracts/NFDInstance.algo.ts:806", "teal": 3477}, {"pc": [3349, 3350], "source": "contracts/NFDInstance.algo.ts:807", "teal": 3481}, {"pc": [3351, 3352], "source": "contracts/NFDInstance.algo.ts:807", "teal": 3482}, {"pc": [3353], "source": "contracts/NFDInstance.algo.ts:807", "teal": 3483}, {"pc": [3354, 3355], "source": "contracts/NFDInstance.algo.ts:807", "teal": 3484}, {"pc": [3356, 3357], "source": "contracts/NFDInstance.algo.ts:808", "teal": 3488}, {"pc": [3358, 3359], "source": "contracts/NFDInstance.algo.ts:808", "teal": 3489}, {"pc": [3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367], "source": "contracts/NFDInstance.algo.ts:809", "teal": 3493}, {"pc": [3368, 3369], "source": "contracts/NFDInstance.algo.ts:809", "teal": 3494}, {"pc": [3370], "source": "contracts/NFDInstance.algo.ts:806", "teal": 3497}, {"pc": [3371, 3372], "source": "contracts/NFDInstance.algo.ts:806", "teal": 3498}, {"pc": [3373], "source": "contracts/NFDInstance.algo.ts:806", "teal": 3501}, {"pc": [3374, 3375], "source": "contracts/NFDInstance.algo.ts:811", "teal": 3505}, {"pc": [3376, 3377], "source": "contracts/NFDInstance.algo.ts:811", "teal": 3506}, {"pc": [3378, 3379], "source": "contracts/NFDInstance.algo.ts:814", "teal": 3511}, {"pc": [3380, 3381, 3382], "source": "contracts/NFDInstance.algo.ts:814", "teal": 3512}, {"pc": [3383], "source": "contracts/NFDInstance.algo.ts:814", "teal": 3513}, {"pc": [3384], "source": "contracts/NFDInstance.algo.ts:814", "teal": 3514}, {"pc": [3385], "source": "contracts/NFDInstance.algo.ts:814", "teal": 3515}, {"pc": [3386, 3387, 3388], "source": "contracts/NFDInstance.algo.ts:814", "teal": 3516}, {"pc": [3389, 3390], "source": "contracts/NFDInstance.algo.ts:815", "teal": 3521}, {"pc": [3391], "source": "contracts/NFDInstance.algo.ts:815", "teal": 3522}, {"pc": [3392, 3393], "source": "contracts/NFDInstance.algo.ts:815", "teal": 3523}, {"pc": [3394], "source": "contracts/NFDInstance.algo.ts:816", "teal": 3531}, {"pc": [3395], "source": "contracts/NFDInstance.algo.ts:816", "teal": 3532}, {"pc": [3396, 3397], "source": "contracts/NFDInstance.algo.ts:816", "teal": 3533}, {"pc": [3398, 3399], "source": "contracts/NFDInstance.algo.ts:817", "teal": 3537}, {"pc": [3400, 3401], "source": "contracts/NFDInstance.algo.ts:817", "teal": 3538}, {"pc": [3402, 3403], "source": "contracts/NFDInstance.algo.ts:818", "teal": 3542}, {"pc": [3404, 3405], "source": "contracts/NFDInstance.algo.ts:818", "teal": 3543}, {"pc": [3406, 3407, 3408, 3409, 3410, 3411, 3412, 3413, 3414, 3415, 3416, 3417], "source": "contracts/NFDInstance.algo.ts:819", "teal": 3547}, {"pc": [3418, 3419], "source": "contracts/NFDInstance.algo.ts:819", "teal": 3548}, {"pc": [3420], "source": "contracts/NFDInstance.algo.ts:816", "teal": 3551}, {"pc": [3421, 3422], "source": "contracts/NFDInstance.algo.ts:816", "teal": 3552}, {"pc": [3423], "source": "contracts/NFDInstance.algo.ts:816", "teal": 3555}, {"pc": [3424, 3425], "source": "contracts/NFDInstance.algo.ts:825", "teal": 3560}, {"pc": [3426, 3427, 3428], "source": "contracts/NFDInstance.algo.ts:825", "teal": 3561}, {"pc": [3429], "source": "contracts/NFDInstance.algo.ts:825", "teal": 3562}, {"pc": [3430], "source": "contracts/NFDInstance.algo.ts:825", "teal": 3563}, {"pc": [3431], "source": "contracts/NFDInstance.algo.ts:825", "teal": 3564}, {"pc": [3432, 3433, 3434], "source": "contracts/NFDInstance.algo.ts:825", "teal": 3565}, {"pc": [3435, 3436], "source": "contracts/NFDInstance.algo.ts:826", "teal": 3570}, {"pc": [3437], "source": "contracts/NFDInstance.algo.ts:826", "teal": 3571}, {"pc": [3438, 3439], "source": "contracts/NFDInstance.algo.ts:827", "teal": 3575}, {"pc": [3440], "source": "contracts/NFDInstance.algo.ts:827", "teal": 3576}, {"pc": [3441, 3442, 3443], "source": "contracts/NFDInstance.algo.ts:825", "teal": 3577}, {"pc": [3444, 3445], "source": "contracts/NFDInstance.algo.ts:829", "teal": 3582}, {"pc": [3446, 3447], "source": "contracts/NFDInstance.algo.ts:829", "teal": 3583}, {"pc": [3448], "source": "contracts/NFDInstance.algo.ts:829", "teal": 3584}, {"pc": [3449], "source": "contracts/NFDInstance.algo.ts:829", "teal": 3585}, {"pc": [3450, 3451], "source": "contracts/NFDInstance.algo.ts:830", "teal": 3589}, {"pc": [3452, 3453], "source": "contracts/NFDInstance.algo.ts:830", "teal": 3590}, {"pc": [3454], "source": "contracts/NFDInstance.algo.ts:830", "teal": 3591}, {"pc": [3455], "source": "contracts/NFDInstance.algo.ts:830", "teal": 3592}, {"pc": [3456, 3457], "source": "contracts/NFDInstance.algo.ts:831", "teal": 3596}, {"pc": [3458], "source": "contracts/NFDInstance.algo.ts:831", "teal": 3597}, {"pc": [3459, 3460], "source": "contracts/NFDInstance.algo.ts:832", "teal": 3601}, {"pc": [3461], "source": "contracts/NFDInstance.algo.ts:832", "teal": 3602}, {"pc": [3462, 3463], "source": "contracts/NFDInstance.algo.ts:838", "teal": 3610}, {"pc": [3464], "source": "contracts/NFDInstance.algo.ts:838", "teal": 3611}, {"pc": [3465], "source": "contracts/NFDInstance.algo.ts:838", "teal": 3612}, {"pc": [3466, 3467, 3468], "source": "contracts/NFDInstance.algo.ts:838", "teal": 3613}, {"pc": [3469], "source": "contracts/NFDInstance.algo.ts:839", "teal": 3622}, {"pc": [3470], "source": "contracts/NFDInstance.algo.ts:839", "teal": 3623}, {"pc": [3471, 3472], "source": "contracts/NFDInstance.algo.ts:839", "teal": 3624}, {"pc": [3473, 3474], "source": "contracts/NFDInstance.algo.ts:840", "teal": 3628}, {"pc": [3475, 3476], "source": "contracts/NFDInstance.algo.ts:840", "teal": 3629}, {"pc": [3477, 3478], "source": "contracts/NFDInstance.algo.ts:841", "teal": 3633}, {"pc": [3479, 3480], "source": "contracts/NFDInstance.algo.ts:841", "teal": 3634}, {"pc": [3481, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489], "source": "contracts/NFDInstance.algo.ts:842", "teal": 3638}, {"pc": [3490, 3491], "source": "contracts/NFDInstance.algo.ts:842", "teal": 3639}, {"pc": [3492], "source": "contracts/NFDInstance.algo.ts:839", "teal": 3642}, {"pc": [3493, 3494], "source": "contracts/NFDInstance.algo.ts:839", "teal": 3643}, {"pc": [3495], "source": "contracts/NFDInstance.algo.ts:839", "teal": 3646}, {"pc": [3496], "source": "contracts/NFDInstance.algo.ts:797", "teal": 3649}, {"pc": [3497, 3498], "source": "contracts/NFDInstance.algo.ts:848", "teal": 3654}, {"pc": [3499, 3500, 3501], "source": "contracts/NFDInstance.algo.ts:848", "teal": 3657}, {"pc": [3502], "source": "contracts/NFDInstance.algo.ts:848", "teal": 3658}, {"pc": [3503], "source": "contracts/NFDInstance.algo.ts:848", "teal": 3659}, {"pc": [3504], "source": "contracts/NFDInstance.algo.ts:848", "teal": 3660}, {"pc": [3505], "source": "contracts/NFDInstance.algo.ts:848", "teal": 3661}, {"pc": [3506], "source": "contracts/NFDInstance.algo.ts:848", "teal": 3662}, {"pc": [3507, 3508, 3509], "source": "contracts/NFDInstance.algo.ts:848", "teal": 3666}, {"pc": [3510, 3511], "source": "contracts/NFDInstance.algo.ts:850", "teal": 3670}, {"pc": [3512, 3513, 3514], "source": "contracts/NFDInstance.algo.ts:850", "teal": 3671}, {"pc": [3515, 3516], "source": "contracts/NFDInstance.algo.ts:850", "teal": 3672}, {"pc": [3517, 3518], "source": "contracts/NFDInstance.algo.ts:850", "teal": 3673}, {"pc": [3519, 3520, 3521], "source": "contracts/NFDInstance.algo.ts:850", "teal": 3674}, {"pc": [3522], "source": "contracts/NFDInstance.algo.ts:850", "teal": 3675}, {"pc": [3523], "source": "contracts/NFDInstance.algo.ts:848", "teal": 3676}, {"pc": [3524, 3525, 3526], "source": "contracts/NFDInstance.algo.ts:855", "teal": 3681}, {"pc": [3527, 3528, 3529], "source": "contracts/NFDInstance.algo.ts:855", "teal": 3682}, {"pc": [3530, 3531, 3532], "source": "contracts/NFDInstance.algo.ts:855", "teal": 3685}, {"pc": [3533], "source": "contracts/NFDInstance.algo.ts:855", "teal": 3686}, {"pc": [3534], "source": "contracts/NFDInstance.algo.ts:855", "teal": 3687}, {"pc": [3535, 3536, 3537], "source": "contracts/NFDInstance.algo.ts:855", "teal": 3691}, {"pc": [3538, 3539], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3698}, {"pc": [3540], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3699}, {"pc": [3541], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3700}, {"pc": [3542], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3701}, {"pc": [3543], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3702}, {"pc": [3544, 3545, 3546], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3703}, {"pc": [3547, 3548], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3704}, {"pc": [3549, 3550], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3705}, {"pc": [3551], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3706}, {"pc": [3552], "source": "contracts/NFDInstance.algo.ts:857", "teal": 3707}, {"pc": [3553], "errorMessage": "must pass 32-byte hash that isn't 0", "source": "contracts/NFDInstance.algo.ts:856", "teal": 3711}, {"pc": [3554, 3555], "source": "contracts/NFDInstance.algo.ts:862", "teal": 3718}, {"pc": [3556], "source": "contracts/NFDInstance.algo.ts:862", "teal": 3719}, {"pc": [3557], "source": "contracts/NFDInstance.algo.ts:862", "teal": 3720}, {"pc": [3558], "source": "contracts/NFDInstance.algo.ts:862", "teal": 3721}, {"pc": [3559], "source": "contracts/NFDInstance.algo.ts:862", "teal": 3722}, {"pc": [3560, 3561, 3562], "source": "contracts/NFDInstance.algo.ts:862", "teal": 3723}, {"pc": [3563, 3564, 3565], "source": "contracts/NFDInstance.algo.ts:862", "teal": 3724}, {"pc": [3566], "source": "contracts/NFDInstance.algo.ts:862", "teal": 3725}, {"pc": [3567], "errorMessage": "only txnlab or owner can request an nfd nft hash update", "source": "contracts/NFDInstance.algo.ts:861", "teal": 3729}, {"pc": [3568], "source": "contracts/NFDInstance.algo.ts:865", "teal": 3738}, {"pc": [3569, 3570], "source": "contracts/NFDInstance.algo.ts:865", "teal": 3739}, {"pc": [3571, 3572], "source": "contracts/NFDInstance.algo.ts:865", "teal": 3740}, {"pc": [3573, 3574], "source": "contracts/NFDInstance.algo.ts:866", "teal": 3744}, {"pc": [3575], "source": "contracts/NFDInstance.algo.ts:866", "teal": 3745}, {"pc": [3576], "source": "contracts/NFDInstance.algo.ts:866", "teal": 3746}, {"pc": [3577, 3578], "source": "contracts/NFDInstance.algo.ts:866", "teal": 3747}, {"pc": [3579, 3580], "source": "contracts/NFDInstance.algo.ts:867", "teal": 3751}, {"pc": [3581, 3582], "source": "contracts/NFDInstance.algo.ts:867", "teal": 3752}, {"pc": [3583, 3584], "source": "contracts/NFDInstance.algo.ts:868", "teal": 3756}, {"pc": [3585, 3586], "source": "contracts/NFDInstance.algo.ts:868", "teal": 3757}, {"pc": [3587, 3588], "source": "contracts/NFDInstance.algo.ts:869", "teal": 3761}, {"pc": [3589, 3590], "source": "contracts/NFDInstance.algo.ts:869", "teal": 3762}, {"pc": [3591], "source": "contracts/NFDInstance.algo.ts:865", "teal": 3765}, {"pc": [3592, 3593], "source": "contracts/NFDInstance.algo.ts:865", "teal": 3766}, {"pc": [3594], "source": "contracts/NFDInstance.algo.ts:865", "teal": 3769}, {"pc": [3595], "source": "contracts/NFDInstance.algo.ts:855", "teal": 3770}, {"pc": [3596, 3597, 3598], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3775}, {"pc": [3599], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3776}, {"pc": [3600], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3777}, {"pc": [3601], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3778}, {"pc": [3602], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3779}, {"pc": [3603], "errorMessage": "argument 0 (lock) for contractLock must be a bool", "source": "contracts/NFDInstance.algo.ts:876", "teal": 3782}, {"pc": [3604], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3783}, {"pc": [3605], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3784}, {"pc": [3606, 3607, 3608], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3787}, {"pc": [3609], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3788}, {"pc": [3610], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3789}, {"pc": [3611, 3612, 3613], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3793}, {"pc": [3614, 3615, 3616], "source": "contracts/NFDInstance.algo.ts:877", "teal": 3797}, {"pc": [3617], "source": "contracts/NFDInstance.algo.ts:878", "teal": 3801}, {"pc": [3618, 3619], "source": "contracts/NFDInstance.algo.ts:878", "teal": 3802}, {"pc": [3620], "source": "contracts/NFDInstance.algo.ts:878", "teal": 3803}, {"pc": [3621], "source": "contracts/NFDInstance.algo.ts:878", "teal": 3804}, {"pc": [3622, 3623], "source": "contracts/NFDInstance.algo.ts:879", "teal": 3808}, {"pc": [3624, 3625], "source": "contracts/NFDInstance.algo.ts:879", "teal": 3809}, {"pc": [3626, 3627, 3628], "source": "contracts/NFDInstance.algo.ts:879", "teal": 3810}, {"pc": [3629, 3630], "source": "contracts/NFDInstance.algo.ts:879", "teal": 3811}, {"pc": [3631, 3632, 3633], "source": "contracts/NFDInstance.algo.ts:879", "teal": 3812}, {"pc": [3634, 3635], "source": "contracts/NFDInstance.algo.ts:879", "teal": 3815}, {"pc": [3636], "source": "contracts/NFDInstance.algo.ts:879", "teal": 3818}, {"pc": [3637], "source": "contracts/NFDInstance.algo.ts:876", "teal": 3819}, {"pc": [3638, 3639, 3640], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3824}, {"pc": [3641], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3825}, {"pc": [3642, 3643, 3644], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3828}, {"pc": [3645], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3829}, {"pc": [3646], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3830}, {"pc": [3647], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3831}, {"pc": [3648], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3832}, {"pc": [3649], "errorMessage": "argument 1 (lock) for segmentLock must be a bool", "source": "contracts/NFDInstance.algo.ts:884", "teal": 3835}, {"pc": [3650], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3836}, {"pc": [3651], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3837}, {"pc": [3652, 3653, 3654], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3840}, {"pc": [3655], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3841}, {"pc": [3656], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3842}, {"pc": [3657, 3658, 3659], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3846}, {"pc": [3660], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3849}, {"pc": [3661, 3662, 3663], "source": "contracts/NFDInstance.algo.ts:885", "teal": 3853}, {"pc": [3664], "source": "contracts/NFDInstance.algo.ts:886", "teal": 3857}, {"pc": [3665, 3666], "source": "contracts/NFDInstance.algo.ts:886", "teal": 3858}, {"pc": [3667], "source": "contracts/NFDInstance.algo.ts:886", "teal": 3859}, {"pc": [3668], "source": "contracts/NFDInstance.algo.ts:886", "teal": 3860}, {"pc": [3669, 3670], "source": "contracts/NFDInstance.algo.ts:887", "teal": 3864}, {"pc": [3671, 3672], "source": "contracts/NFDInstance.algo.ts:887", "teal": 3865}, {"pc": [3673, 3674, 3675], "source": "contracts/NFDInstance.algo.ts:887", "teal": 3866}, {"pc": [3676, 3677], "source": "contracts/NFDInstance.algo.ts:887", "teal": 3867}, {"pc": [3678, 3679, 3680], "source": "contracts/NFDInstance.algo.ts:887", "teal": 3868}, {"pc": [3681, 3682], "source": "contracts/NFDInstance.algo.ts:887", "teal": 3871}, {"pc": [3683], "source": "contracts/NFDInstance.algo.ts:887", "teal": 3874}, {"pc": [3684, 3685], "source": "contracts/NFDInstance.algo.ts:888", "teal": 3879}, {"pc": [3686, 3687, 3688], "source": "contracts/NFDInstance.algo.ts:888", "teal": 3880}, {"pc": [3689, 3690], "source": "contracts/NFDInstance.algo.ts:889", "teal": 3885}, {"pc": [3691], "source": "contracts/NFDInstance.algo.ts:889", "teal": 3886}, {"pc": [3692, 3693, 3694], "source": "contracts/NFDInstance.algo.ts:888", "teal": 3887}, {"pc": [3695], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3894}, {"pc": [3696, 3697], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3895}, {"pc": [3698, 3699], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3896}, {"pc": [3700, 3701], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3897}, {"pc": [3702, 3703], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3898}, {"pc": [3704, 3705], "source": "contracts/NFDInstance.algo.ts:893", "teal": 3902}, {"pc": [3706, 3707], "source": "contracts/NFDInstance.algo.ts:893", "teal": 3903}, {"pc": [3708], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3906}, {"pc": [3709, 3710], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3907}, {"pc": [3711], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3910}, {"pc": [3712, 3713], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3911}, {"pc": [3714], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3912}, {"pc": [3715], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3913}, {"pc": [3716, 3717], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3914}, {"pc": [3718, 3719, 3720], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3915}, {"pc": [3721, 3722], "source": "contracts/NFDInstance.algo.ts:892", "teal": 3916}, {"pc": [3723, 3724], "source": "contracts/NFDInstance.algo.ts:896", "teal": 3923}, {"pc": [3725, 3726], "source": "contracts/NFDInstance.algo.ts:896", "teal": 3924}, {"pc": [3727, 3728, 3729], "source": "contracts/NFDInstance.algo.ts:896", "teal": 3925}, {"pc": [3730], "source": "contracts/NFDInstance.algo.ts:896", "teal": 3926}, {"pc": [3731], "source": "contracts/NFDInstance.algo.ts:896", "teal": 3927}, {"pc": [3732], "errorMessage": "amount must be at least NFD_MIN_SEGMENT_USD dollars in algo", "source": "contracts/NFDInstance.algo.ts:895", "teal": 3930}, {"pc": [3733, 3734], "source": "contracts/NFDInstance.algo.ts:899", "teal": 3934}, {"pc": [3735, 3736], "source": "contracts/NFDInstance.algo.ts:899", "teal": 3935}, {"pc": [3737], "source": "contracts/NFDInstance.algo.ts:899", "teal": 3936}, {"pc": [3738], "source": "contracts/NFDInstance.algo.ts:899", "teal": 3937}, {"pc": [3739], "source": "contracts/NFDInstance.algo.ts:884", "teal": 3940}, {"pc": [3740, 3741, 3742], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3945}, {"pc": [3743], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3946}, {"pc": [3744], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3947}, {"pc": [3745], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3948}, {"pc": [3746], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3949}, {"pc": [3747], "errorMessage": "argument 0 (lock) for vaultOptInLock must be a bool", "source": "contracts/NFDInstance.algo.ts:907", "teal": 3952}, {"pc": [3748], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3953}, {"pc": [3749], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3954}, {"pc": [3750, 3751, 3752], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3957}, {"pc": [3753], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3958}, {"pc": [3754], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3959}, {"pc": [3755, 3756, 3757], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3963}, {"pc": [3758, 3759, 3760], "source": "contracts/NFDInstance.algo.ts:908", "teal": 3967}, {"pc": [3761], "source": "contracts/NFDInstance.algo.ts:909", "teal": 3971}, {"pc": [3762, 3763], "source": "contracts/NFDInstance.algo.ts:909", "teal": 3972}, {"pc": [3764], "source": "contracts/NFDInstance.algo.ts:909", "teal": 3973}, {"pc": [3765], "source": "contracts/NFDInstance.algo.ts:909", "teal": 3974}, {"pc": [3766, 3767], "source": "contracts/NFDInstance.algo.ts:910", "teal": 3978}, {"pc": [3768, 3769], "source": "contracts/NFDInstance.algo.ts:910", "teal": 3979}, {"pc": [3770, 3771, 3772], "source": "contracts/NFDInstance.algo.ts:910", "teal": 3980}, {"pc": [3773, 3774], "source": "contracts/NFDInstance.algo.ts:910", "teal": 3981}, {"pc": [3775, 3776, 3777], "source": "contracts/NFDInstance.algo.ts:910", "teal": 3982}, {"pc": [3778, 3779], "source": "contracts/NFDInstance.algo.ts:910", "teal": 3985}, {"pc": [3780], "source": "contracts/NFDInstance.algo.ts:910", "teal": 3988}, {"pc": [3781], "source": "contracts/NFDInstance.algo.ts:907", "teal": 3989}, {"pc": [3782, 3783, 3784], "source": "contracts/NFDInstance.algo.ts:919", "teal": 3994}, {"pc": [3785, 3786, 3787], "source": "contracts/NFDInstance.algo.ts:919", "teal": 3995}, {"pc": [3788, 3789, 3790], "source": "contracts/NFDInstance.algo.ts:919", "teal": 3998}, {"pc": [3791], "source": "contracts/NFDInstance.algo.ts:919", "teal": 3999}, {"pc": [3792], "source": "contracts/NFDInstance.algo.ts:919", "teal": 4000}, {"pc": [3793, 3794, 3795], "source": "contracts/NFDInstance.algo.ts:919", "teal": 4004}, {"pc": [3796], "source": "contracts/NFDInstance.algo.ts:919", "teal": 4007}, {"pc": [3797], "source": "contracts/NFDInstance.algo.ts:919", "teal": 4008}, {"pc": [3798, 3799, 3800], "source": "contracts/NFDInstance.algo.ts:920", "teal": 4012}, {"pc": [3801, 3802, 3803], "source": "contracts/NFDInstance.algo.ts:924", "teal": 4017}, {"pc": [3804, 3805, 3806], "source": "contracts/NFDInstance.algo.ts:924", "teal": 4018}, {"pc": [3807, 3808], "source": "contracts/NFDInstance.algo.ts:926", "teal": 4026}, {"pc": [3809], "source": "contracts/NFDInstance.algo.ts:926", "teal": 4027}, {"pc": [3810], "source": "contracts/NFDInstance.algo.ts:926", "teal": 4028}, {"pc": [3811], "source": "contracts/NFDInstance.algo.ts:926", "teal": 4029}, {"pc": [3812], "errorMessage": "sender must be owner when vault locked", "source": "contracts/NFDInstance.algo.ts:925", "teal": 4032}, {"pc": [3813, 3814], "source": "contracts/NFDInstance.algo.ts:931", "teal": 4037}, {"pc": [3815], "source": "contracts/NFDInstance.algo.ts:931", "teal": 4038}, {"pc": [3816], "source": "contracts/NFDInstance.algo.ts:931", "teal": 4039}, {"pc": [3817], "errorMessage": "part of opt-in for new asset, must have prior txn paying MBR", "source": "contracts/NFDInstance.algo.ts:931", "teal": 4042}, {"pc": [3818, 3819], "source": "contracts/NFDInstance.algo.ts:933", "teal": 4049}, {"pc": [3820], "source": "contracts/NFDInstance.algo.ts:933", "teal": 4050}, {"pc": [3821], "source": "contracts/NFDInstance.algo.ts:933", "teal": 4051}, {"pc": [3822, 3823], "source": "contracts/NFDInstance.algo.ts:933", "teal": 4052}, {"pc": [3824, 3825], "source": "contracts/NFDInstance.algo.ts:933", "teal": 4055}, {"pc": [3826, 3827], "source": "contracts/NFDInstance.algo.ts:933", "teal": 4056}, {"pc": [3828], "source": "contracts/NFDInstance.algo.ts:933", "teal": 4057}, {"pc": [3829], "source": "contracts/NFDInstance.algo.ts:933", "teal": 4058}, {"pc": [3830], "errorMessage": "transaction verification failed: {\"txn\":\"this.txnGroup[this.txn.groupIndex - 1]\",\"field\":\"typeEnum\",\"expected\":\"pay\"}", "source": "contracts/NFDInstance.algo.ts:933", "teal": 4061}, {"pc": [3831, 3832], "source": "contracts/NFDInstance.algo.ts:934", "teal": 4064}, {"pc": [3833, 3834], "source": "contracts/NFDInstance.algo.ts:934", "teal": 4065}, {"pc": [3835, 3836], "source": "contracts/NFDInstance.algo.ts:934", "teal": 4066}, {"pc": [3837], "source": "contracts/NFDInstance.algo.ts:934", "teal": 4067}, {"pc": [3838], "errorMessage": "transaction verification failed: {\"txn\":\"this.txnGroup[this.txn.groupIndex - 1]\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}", "source": "contracts/NFDInstance.algo.ts:934", "teal": 4070}, {"pc": [3839, 3840], "source": "contracts/NFDInstance.algo.ts:935", "teal": 4073}, {"pc": [3841, 3842], "source": "contracts/NFDInstance.algo.ts:935", "teal": 4074}, {"pc": [3843, 3844], "source": "contracts/NFDInstance.algo.ts:935", "teal": 4075}, {"pc": [3845, 3846], "source": "contracts/NFDInstance.algo.ts:935", "teal": 4076}, {"pc": [3847], "source": "contracts/NFDInstance.algo.ts:935", "teal": 4077}, {"pc": [3848, 3849], "source": "contracts/NFDInstance.algo.ts:935", "teal": 4078}, {"pc": [3850], "source": "contracts/NFDInstance.algo.ts:935", "teal": 4079}, {"pc": [3851], "source": "contracts/NFDInstance.algo.ts:935", "teal": 4080}, {"pc": [3852], "source": "contracts/NFDInstance.algo.ts:935", "teal": 4081}, {"pc": [3853], "errorMessage": "transaction verification failed: {\"txn\":\"this.txnGroup[this.txn.groupIndex - 1]\",\"field\":\"amount\",\"expected\":\"100_000 * assets.length\"}", "source": "contracts/NFDInstance.algo.ts:935", "teal": 4084}, {"pc": [3854], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4088}, {"pc": [3855, 3856], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4089}, {"pc": [3857, 3858], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4094}, {"pc": [3859, 3860], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4095}, {"pc": [3861], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4096}, {"pc": [3862, 3863], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4097}, {"pc": [3864], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4098}, {"pc": [3865], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4099}, {"pc": [3866, 3867, 3868], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4100}, {"pc": [3869, 3870], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4104}, {"pc": [3871, 3872], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4105}, {"pc": [3873], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4106}, {"pc": [3874, 3875], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4107}, {"pc": [3876, 3877], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4108}, {"pc": [3878], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4109}, {"pc": [3879], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4110}, {"pc": [3880, 3881], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4111}, {"pc": [3882], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4112}, {"pc": [3883, 3884], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4113}, {"pc": [3885], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4114}, {"pc": [3886], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4115}, {"pc": [3887, 3888], "source": "contracts/NFDInstance.algo.ts:938", "teal": 4116}, {"pc": [3889, 3890], "source": "contracts/NFDInstance.algo.ts:940", "teal": 4121}, {"pc": [3891, 3892], "source": "contracts/NFDInstance.algo.ts:940", "teal": 4122}, {"pc": [3893, 3894], "source": "contracts/NFDInstance.algo.ts:940", "teal": 4123}, {"pc": [3895], "source": "contracts/NFDInstance.algo.ts:940", "teal": 4124}, {"pc": [3896], "source": "contracts/NFDInstance.algo.ts:940", "teal": 4125}, {"pc": [3897], "source": "contracts/NFDInstance.algo.ts:940", "teal": 4126}, {"pc": [3898, 3899, 3900], "source": "contracts/NFDInstance.algo.ts:940", "teal": 4127}, {"pc": [3901], "source": "contracts/NFDInstance.algo.ts:941", "teal": 4136}, {"pc": [3902, 3903], "source": "contracts/NFDInstance.algo.ts:941", "teal": 4137}, {"pc": [3904, 3905], "source": "contracts/NFDInstance.algo.ts:941", "teal": 4138}, {"pc": [3906, 3907], "source": "contracts/NFDInstance.algo.ts:942", "teal": 4142}, {"pc": [3908, 3909], "source": "contracts/NFDInstance.algo.ts:942", "teal": 4143}, {"pc": [3910, 3911], "source": "contracts/NFDInstance.algo.ts:943", "teal": 4147}, {"pc": [3912, 3913], "source": "contracts/NFDInstance.algo.ts:943", "teal": 4148}, {"pc": [3914], "source": "contracts/NFDInstance.algo.ts:944", "teal": 4152}, {"pc": [3915, 3916], "source": "contracts/NFDInstance.algo.ts:944", "teal": 4153}, {"pc": [3917], "source": "contracts/NFDInstance.algo.ts:941", "teal": 4156}, {"pc": [3918, 3919], "source": "contracts/NFDInstance.algo.ts:941", "teal": 4157}, {"pc": [3920], "source": "contracts/NFDInstance.algo.ts:941", "teal": 4160}, {"pc": [3921, 3922], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4167}, {"pc": [3923], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4168}, {"pc": [3924], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4169}, {"pc": [3925, 3926], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4170}, {"pc": [3927, 3928, 3929], "source": "contracts/NFDInstance.algo.ts:937", "teal": 4171}, {"pc": [3930], "source": "contracts/NFDInstance.algo.ts:919", "teal": 4174}, {"pc": [3931, 3932, 3933], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4179}, {"pc": [3934, 3935, 3936], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4180}, {"pc": [3937, 3938, 3939], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4183}, {"pc": [3940], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4184}, {"pc": [3941, 3942, 3943], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4187}, {"pc": [3944, 3945, 3946], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4188}, {"pc": [3947, 3948, 3949], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4191}, {"pc": [3950], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4192}, {"pc": [3951], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4193}, {"pc": [3952], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4194}, {"pc": [3953], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4195}, {"pc": [3954], "errorMessage": "argument 3 (receiver) for vaultSend must be a address", "source": "contracts/NFDInstance.algo.ts:958", "teal": 4198}, {"pc": [3955, 3956, 3957], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4201}, {"pc": [3958], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4202}, {"pc": [3959, 3960, 3961], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4205}, {"pc": [3962], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4206}, {"pc": [3963], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4207}, {"pc": [3964, 3965, 3966], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4211}, {"pc": [3967], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4214}, {"pc": [3968, 3969], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4215}, {"pc": [3970, 3971, 3972], "source": "contracts/NFDInstance.algo.ts:964", "teal": 4219}, {"pc": [3973, 3974], "source": "contracts/NFDInstance.algo.ts:965", "teal": 4223}, {"pc": [3975, 3976], "source": "contracts/NFDInstance.algo.ts:965", "teal": 4224}, {"pc": [3977], "source": "contracts/NFDInstance.algo.ts:965", "teal": 4225}, {"pc": [3978], "source": "contracts/NFDInstance.algo.ts:965", "teal": 4226}, {"pc": [3979, 3980], "source": "contracts/NFDInstance.algo.ts:967", "teal": 4231}, {"pc": [3981], "source": "contracts/NFDInstance.algo.ts:967", "teal": 4232}, {"pc": [3982], "source": "contracts/NFDInstance.algo.ts:967", "teal": 4233}, {"pc": [3983, 3984, 3985], "source": "contracts/NFDInstance.algo.ts:967", "teal": 4234}, {"pc": [3986, 3987], "source": "contracts/NFDInstance.algo.ts:968", "teal": 4239}, {"pc": [3988], "source": "contracts/NFDInstance.algo.ts:968", "teal": 4240}, {"pc": [3989, 3990], "source": "contracts/NFDInstance.algo.ts:968", "teal": 4241}, {"pc": [3991], "source": "contracts/NFDInstance.algo.ts:968", "teal": 4242}, {"pc": [3992], "source": "contracts/NFDInstance.algo.ts:968", "teal": 4243}, {"pc": [3993], "source": "contracts/NFDInstance.algo.ts:968", "teal": 4244}, {"pc": [3994], "errorMessage": "can't specify other assets if sending algo from vault", "source": "contracts/NFDInstance.algo.ts:968", "teal": 4247}, {"pc": [3995, 3996], "source": "contracts/NFDInstance.algo.ts:969", "teal": 4251}, {"pc": [3997], "source": "contracts/NFDInstance.algo.ts:969", "teal": 4252}, {"pc": [3998], "source": "contracts/NFDInstance.algo.ts:969", "teal": 4253}, {"pc": [3999], "source": "contracts/NFDInstance.algo.ts:969", "teal": 4254}, {"pc": [4000, 4001], "source": "contracts/NFDInstance.algo.ts:971", "teal": 4258}, {"pc": [4002, 4003], "source": "contracts/NFDInstance.algo.ts:971", "teal": 4259}, {"pc": [4004], "source": "contracts/NFDInstance.algo.ts:971", "teal": 4260}, {"pc": [4005, 4006], "source": "contracts/NFDInstance.algo.ts:971", "teal": 4261}, {"pc": [4007, 4008, 4009], "source": "contracts/NFDInstance.algo.ts:971", "teal": 4262}, {"pc": [4010], "source": "contracts/NFDInstance.algo.ts:971", "teal": 4263}, {"pc": [4011, 4012], "source": "contracts/NFDInstance.algo.ts:971", "teal": 4264}, {"pc": [4013, 4014], "source": "contracts/NFDInstance.algo.ts:973", "teal": 4268}, {"pc": [4015, 4016], "source": "contracts/NFDInstance.algo.ts:973", "teal": 4269}, {"pc": [4017], "source": "contracts/NFDInstance.algo.ts:973", "teal": 4270}, {"pc": [4018, 4019], "source": "contracts/NFDInstance.algo.ts:973", "teal": 4271}, {"pc": [4020], "source": "contracts/NFDInstance.algo.ts:973", "teal": 4272}, {"pc": [4021, 4022], "source": "contracts/NFDInstance.algo.ts:973", "teal": 4273}, {"pc": [4023], "source": "contracts/NFDInstance.algo.ts:973", "teal": 4274}, {"pc": [4024], "source": "contracts/NFDInstance.algo.ts:973", "teal": 4275}, {"pc": [4025], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4279}, {"pc": [4026], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4280}, {"pc": [4027, 4028], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4281}, {"pc": [4029, 4030], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4285}, {"pc": [4031, 4032], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4286}, {"pc": [4033, 4034], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4290}, {"pc": [4035, 4036], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4291}, {"pc": [4037, 4038], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4295}, {"pc": [4039, 4040], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4296}, {"pc": [4041], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4299}, {"pc": [4042, 4043], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4300}, {"pc": [4044], "source": "contracts/NFDInstance.algo.ts:974", "teal": 4303}, {"pc": [4045], "source": "contracts/NFDInstance.algo.ts:975", "teal": 4307}, {"pc": [4046, 4047], "source": "contracts/NFDInstance.algo.ts:979", "teal": 4313}, {"pc": [4048], "source": "contracts/NFDInstance.algo.ts:979", "teal": 4314}, {"pc": [4049], "source": "contracts/NFDInstance.algo.ts:979", "teal": 4315}, {"pc": [4050, 4051, 4052], "source": "contracts/NFDInstance.algo.ts:979", "teal": 4316}, {"pc": [4053, 4054], "source": "contracts/NFDInstance.algo.ts:980", "teal": 4321}, {"pc": [4055], "source": "contracts/NFDInstance.algo.ts:980", "teal": 4322}, {"pc": [4056, 4057], "source": "contracts/NFDInstance.algo.ts:980", "teal": 4323}, {"pc": [4058], "source": "contracts/NFDInstance.algo.ts:980", "teal": 4324}, {"pc": [4059], "source": "contracts/NFDInstance.algo.ts:980", "teal": 4325}, {"pc": [4060], "source": "contracts/NFDInstance.algo.ts:980", "teal": 4326}, {"pc": [4061], "errorMessage": "can only send one asset if amount == 0", "source": "contracts/NFDInstance.algo.ts:980", "teal": 4329}, {"pc": [4062], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4334}, {"pc": [4063, 4064], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4335}, {"pc": [4065, 4066], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4340}, {"pc": [4067, 4068], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4341}, {"pc": [4069], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4342}, {"pc": [4070, 4071], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4343}, {"pc": [4072], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4344}, {"pc": [4073], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4345}, {"pc": [4074, 4075, 4076], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4346}, {"pc": [4077, 4078], "source": "contracts/NFDInstance.algo.ts:986", "teal": 4351}, {"pc": [4079], "source": "contracts/NFDInstance.algo.ts:986", "teal": 4352}, {"pc": [4080], "source": "contracts/NFDInstance.algo.ts:986", "teal": 4353}, {"pc": [4081, 4082, 4083], "source": "contracts/NFDInstance.algo.ts:986", "teal": 4354}, {"pc": [4084, 4085], "source": "contracts/NFDInstance.algo.ts:987", "teal": 4359}, {"pc": [4086, 4087], "source": "contracts/NFDInstance.algo.ts:987", "teal": 4360}, {"pc": [4088, 4089, 4090], "source": "contracts/NFDInstance.algo.ts:986", "teal": 4361}, {"pc": [4091, 4092], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4366}, {"pc": [4093, 4094], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4367}, {"pc": [4095], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4368}, {"pc": [4096, 4097], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4369}, {"pc": [4098], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4370}, {"pc": [4099], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4371}, {"pc": [4100, 4101], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4372}, {"pc": [4102], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4373}, {"pc": [4103], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4374}, {"pc": [4104, 4105], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4375}, {"pc": [4106], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4376}, {"pc": [4107, 4108], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4377}, {"pc": [4109], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4378}, {"pc": [4110], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4379}, {"pc": [4111, 4112], "source": "contracts/NFDInstance.algo.ts:989", "teal": 4380}, {"pc": [4113, 4114], "source": "contracts/NFDInstance.algo.ts:992", "teal": 4386}, {"pc": [4115, 4116], "source": "contracts/NFDInstance.algo.ts:992", "teal": 4387}, {"pc": [4117], "source": "contracts/NFDInstance.algo.ts:992", "teal": 4388}, {"pc": [4118], "source": "contracts/NFDInstance.algo.ts:992", "teal": 4389}, {"pc": [4119], "source": "contracts/NFDInstance.algo.ts:992", "teal": 4390}, {"pc": [4120, 4121, 4122], "source": "contracts/NFDInstance.algo.ts:992", "teal": 4391}, {"pc": [4123, 4124], "source": "contracts/NFDInstance.algo.ts:993", "teal": 4396}, {"pc": [4125], "source": "contracts/NFDInstance.algo.ts:993", "teal": 4397}, {"pc": [4126], "source": "contracts/NFDInstance.algo.ts:993", "teal": 4398}, {"pc": [4127], "source": "contracts/NFDInstance.algo.ts:993", "teal": 4399}, {"pc": [4128], "errorMessage": "receiver must be owner", "source": "contracts/NFDInstance.algo.ts:993", "teal": 4402}, {"pc": [4129, 4130], "source": "contracts/NFDInstance.algo.ts:994", "teal": 4406}, {"pc": [4131, 4132], "source": "contracts/NFDInstance.algo.ts:994", "teal": 4407}, {"pc": [4133, 4134, 4135], "source": "contracts/NFDInstance.algo.ts:994", "teal": 4408}, {"pc": [4136, 4137, 4138], "source": "contracts/NFDInstance.algo.ts:995", "teal": 4409}, {"pc": [4139, 4140], "source": "contracts/NFDInstance.algo.ts:997", "teal": 4414}, {"pc": [4141, 4142], "source": "contracts/NFDInstance.algo.ts:997", "teal": 4415}, {"pc": [4143, 4144], "source": "contracts/NFDInstance.algo.ts:997", "teal": 4416}, {"pc": [4145], "source": "contracts/NFDInstance.algo.ts:997", "teal": 4417}, {"pc": [4146, 4147], "source": "contracts/NFDInstance.algo.ts:997", "teal": 4418}, {"pc": [4148, 4149], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4423}, {"pc": [4150], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4424}, {"pc": [4151], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4425}, {"pc": [4152], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4426}, {"pc": [4153, 4154, 4155], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4427}, {"pc": [4156, 4157], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4428}, {"pc": [4158, 4159], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4429}, {"pc": [4160, 4161], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4430}, {"pc": [4162], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4431}, {"pc": [4163, 4164], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4432}, {"pc": [4165], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4433}, {"pc": [4166], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4434}, {"pc": [4167, 4168, 4169], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4437}, {"pc": [4170], "source": "contracts/NFDInstance.algo.ts:1000", "teal": 4448}, {"pc": [4171, 4172], "source": "contracts/NFDInstance.algo.ts:1000", "teal": 4449}, {"pc": [4173, 4174], "source": "contracts/NFDInstance.algo.ts:1000", "teal": 4450}, {"pc": [4175, 4176], "source": "contracts/NFDInstance.algo.ts:1001", "teal": 4454}, {"pc": [4177, 4178], "source": "contracts/NFDInstance.algo.ts:1001", "teal": 4455}, {"pc": [4179, 4180], "source": "contracts/NFDInstance.algo.ts:1002", "teal": 4459}, {"pc": [4181, 4182], "source": "contracts/NFDInstance.algo.ts:1002", "teal": 4460}, {"pc": [4183, 4184], "source": "contracts/NFDInstance.algo.ts:1003", "teal": 4464}, {"pc": [4185, 4186], "source": "contracts/NFDInstance.algo.ts:1003", "teal": 4465}, {"pc": [4187, 4188], "source": "contracts/NFDInstance.algo.ts:1004", "teal": 4469}, {"pc": [4189, 4190], "source": "contracts/NFDInstance.algo.ts:1004", "teal": 4470}, {"pc": [4191, 4192], "source": "contracts/NFDInstance.algo.ts:1005", "teal": 4474}, {"pc": [4193, 4194], "source": "contracts/NFDInstance.algo.ts:1005", "teal": 4475}, {"pc": [4195], "source": "contracts/NFDInstance.algo.ts:1000", "teal": 4478}, {"pc": [4196, 4197], "source": "contracts/NFDInstance.algo.ts:1000", "teal": 4479}, {"pc": [4198], "source": "contracts/NFDInstance.algo.ts:1000", "teal": 4482}, {"pc": [4199, 4200, 4201], "source": "contracts/NFDInstance.algo.ts:998", "teal": 4483}, {"pc": [4202], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4488}, {"pc": [4203, 4204], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4489}, {"pc": [4205, 4206], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4490}, {"pc": [4207, 4208], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4494}, {"pc": [4209, 4210], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4495}, {"pc": [4211, 4212], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4499}, {"pc": [4213, 4214], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4500}, {"pc": [4215, 4216], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4504}, {"pc": [4217, 4218], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4505}, {"pc": [4219, 4220], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4509}, {"pc": [4221, 4222], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4510}, {"pc": [4223], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4513}, {"pc": [4224, 4225], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4514}, {"pc": [4226], "source": "contracts/NFDInstance.algo.ts:1008", "teal": 4517}, {"pc": [4227, 4228], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4524}, {"pc": [4229], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4525}, {"pc": [4230], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4526}, {"pc": [4231, 4232], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4527}, {"pc": [4233, 4234, 4235], "source": "contracts/NFDInstance.algo.ts:982", "teal": 4528}, {"pc": [4236], "source": "contracts/NFDInstance.algo.ts:958", "teal": 4531}, {"pc": [4237, 4238], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4536}, {"pc": [4239], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4537}, {"pc": [4240], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4538}, {"pc": [4241], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4539}, {"pc": [4242, 4243], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4540}, {"pc": [4244], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4541}, {"pc": [4245], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4542}, {"pc": [4246], "errorMessage": "argument 0 (payment) for renew must be a pay transaction", "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4545}, {"pc": [4247, 4248, 4249], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4548}, {"pc": [4250], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4549}, {"pc": [4251], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4550}, {"pc": [4252, 4253, 4254], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4570}, {"pc": [4255], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4573}, {"pc": [4256, 4257], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 4574}, {"pc": [4258, 4259], "source": "contracts/NFDInstance.algo.ts:1031", "teal": 4579}, {"pc": [4260, 4261], "source": "contracts/NFDInstance.algo.ts:1031", "teal": 4580}, {"pc": [4262, 4263], "source": "contracts/NFDInstance.algo.ts:1031", "teal": 4581}, {"pc": [4264], "source": "contracts/NFDInstance.algo.ts:1031", "teal": 4582}, {"pc": [4265], "errorMessage": "transaction verification failed: {\"txn\":\"payment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}", "source": "contracts/NFDInstance.algo.ts:1031", "teal": 4585}, {"pc": [4266, 4267], "source": "contracts/NFDInstance.algo.ts:1034", "teal": 4589}, {"pc": [4268, 4269, 4270], "source": "contracts/NFDInstance.algo.ts:1034", "teal": 4590}, {"pc": [4271, 4272], "source": "contracts/NFDInstance.algo.ts:1034", "teal": 4591}, {"pc": [4273, 4274], "source": "contracts/NFDInstance.algo.ts:1035", "teal": 4596}, {"pc": [4275, 4276], "source": "contracts/NFDInstance.algo.ts:1035", "teal": 4597}, {"pc": [4277], "source": "contracts/NFDInstance.algo.ts:1035", "teal": 4598}, {"pc": [4278, 4279, 4280], "source": "contracts/NFDInstance.algo.ts:1035", "teal": 4599}, {"pc": [4281], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4604}, {"pc": [4282, 4283], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4605}, {"pc": [4284, 4285], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4606}, {"pc": [4286], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4607}, {"pc": [4287, 4288], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4608}, {"pc": [4289, 4290], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4609}, {"pc": [4291], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4610}, {"pc": [4292, 4293], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4611}, {"pc": [4294, 4295], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4612}, {"pc": [4296, 4297], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4613}, {"pc": [4298, 4299], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4614}, {"pc": [4300], "source": "contracts/NFDInstance.algo.ts:1036", "teal": 4615}, {"pc": [4301], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4622}, {"pc": [4302, 4303], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4623}, {"pc": [4304, 4305], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4624}, {"pc": [4306, 4307], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4625}, {"pc": [4308, 4309], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4626}, {"pc": [4310, 4311], "source": "contracts/NFDInstance.algo.ts:1039", "teal": 4630}, {"pc": [4312, 4313], "source": "contracts/NFDInstance.algo.ts:1039", "teal": 4631}, {"pc": [4314], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4634}, {"pc": [4315, 4316], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4635}, {"pc": [4317], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4638}, {"pc": [4318, 4319], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4639}, {"pc": [4320], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4640}, {"pc": [4321], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4641}, {"pc": [4322, 4323], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4642}, {"pc": [4324, 4325, 4326], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4643}, {"pc": [4327, 4328], "source": "contracts/NFDInstance.algo.ts:1038", "teal": 4644}, {"pc": [4329, 4330], "source": "contracts/NFDInstance.algo.ts:1041", "teal": 4648}, {"pc": [4331, 4332], "source": "contracts/NFDInstance.algo.ts:1041", "teal": 4649}, {"pc": [4333, 4334], "source": "contracts/NFDInstance.algo.ts:1041", "teal": 4650}, {"pc": [4335, 4336, 4337], "source": "contracts/NFDInstance.algo.ts:1041", "teal": 4651}, {"pc": [4338], "source": "contracts/NFDInstance.algo.ts:1041", "teal": 4652}, {"pc": [4339, 4340], "source": "contracts/NFDInstance.algo.ts:1041", "teal": 4653}, {"pc": [4341, 4342], "source": "contracts/NFDInstance.algo.ts:1042", "teal": 4657}, {"pc": [4343, 4344, 4345], "source": "contracts/NFDInstance.algo.ts:1042", "teal": 4658}, {"pc": [4346], "source": "contracts/NFDInstance.algo.ts:1042", "teal": 4659}, {"pc": [4347, 4348], "source": "contracts/NFDInstance.algo.ts:1042", "teal": 4660}, {"pc": [4349, 4350], "source": "contracts/NFDInstance.algo.ts:1043", "teal": 4664}, {"pc": [4351], "source": "contracts/NFDInstance.algo.ts:1043", "teal": 4665}, {"pc": [4352], "source": "contracts/NFDInstance.algo.ts:1043", "teal": 4666}, {"pc": [4353], "source": "contracts/NFDInstance.algo.ts:1043", "teal": 4667}, {"pc": [4354], "source": "contracts/NFDInstance.algo.ts:1044", "teal": 4671}, {"pc": [4355], "source": "contracts/NFDInstance.algo.ts:1044", "teal": 4672}, {"pc": [4356, 4357], "source": "contracts/NFDInstance.algo.ts:1044", "teal": 4673}, {"pc": [4358, 4359], "source": "contracts/NFDInstance.algo.ts:1046", "teal": 4677}, {"pc": [4360, 4361, 4362], "source": "contracts/NFDInstance.algo.ts:1046", "teal": 4678}, {"pc": [4363, 4364], "source": "contracts/NFDInstance.algo.ts:1046", "teal": 4679}, {"pc": [4365, 4366], "source": "contracts/NFDInstance.algo.ts:1047", "teal": 4684}, {"pc": [4367], "source": "contracts/NFDInstance.algo.ts:1047", "teal": 4685}, {"pc": [4368], "source": "contracts/NFDInstance.algo.ts:1047", "teal": 4686}, {"pc": [4369], "source": "contracts/NFDInstance.algo.ts:1047", "teal": 4687}, {"pc": [4370, 4371, 4372], "source": "contracts/NFDInstance.algo.ts:1047", "teal": 4688}, {"pc": [4373, 4374, 4375], "source": "contracts/NFDInstance.algo.ts:1047", "teal": 4689}, {"pc": [4376], "source": "contracts/NFDInstance.algo.ts:1047", "teal": 4690}, {"pc": [4377, 4378, 4379], "source": "contracts/NFDInstance.algo.ts:1047", "teal": 4693}, {"pc": [4380, 4381], "source": "contracts/NFDInstance.algo.ts:1052", "teal": 4699}, {"pc": [4382, 4383], "source": "contracts/NFDInstance.algo.ts:1052", "teal": 4700}, {"pc": [4384], "source": "contracts/NFDInstance.algo.ts:1052", "teal": 4701}, {"pc": [4385, 4386, 4387], "source": "contracts/NFDInstance.algo.ts:1052", "teal": 4702}, {"pc": [4388, 4389], "source": "contracts/NFDInstance.algo.ts:1053", "teal": 4707}, {"pc": [4390, 4391], "source": "contracts/NFDInstance.algo.ts:1053", "teal": 4708}, {"pc": [4392], "source": "contracts/NFDInstance.algo.ts:1053", "teal": 4709}, {"pc": [4393], "source": "contracts/NFDInstance.algo.ts:1053", "teal": 4710}, {"pc": [4394], "source": "contracts/NFDInstance.algo.ts:1053", "teal": 4711}, {"pc": [4395], "errorMessage": "can't claim expired nfd unless all metadata is cleared", "source": "contracts/NFDInstance.algo.ts:1053", "teal": 4714}, {"pc": [4396, 4397], "source": "contracts/NFDInstance.algo.ts:1059", "teal": 4721}, {"pc": [4398, 4399], "source": "contracts/NFDInstance.algo.ts:1059", "teal": 4722}, {"pc": [4400, 4401], "source": "contracts/NFDInstance.algo.ts:1059", "teal": 4723}, {"pc": [4402], "source": "contracts/NFDInstance.algo.ts:1059", "teal": 4724}, {"pc": [4403], "errorMessage": "must pay at least minimum renewal price", "source": "contracts/NFDInstance.algo.ts:1059", "teal": 4727}, {"pc": [4404, 4405], "source": "contracts/NFDInstance.algo.ts:1060", "teal": 4732}, {"pc": [4406], "source": "contracts/NFDInstance.algo.ts:1060", "teal": 4733}, {"pc": [4407], "source": "contracts/NFDInstance.algo.ts:1060", "teal": 4734}, {"pc": [4408, 4409, 4410], "source": "contracts/NFDInstance.algo.ts:1060", "teal": 4735}, {"pc": [4411, 4412], "source": "contracts/NFDInstance.algo.ts:1061", "teal": 4740}, {"pc": [4413, 4414], "source": "contracts/NFDInstance.algo.ts:1061", "teal": 4741}, {"pc": [4415], "source": "contracts/NFDInstance.algo.ts:1061", "teal": 4742}, {"pc": [4416], "source": "contracts/NFDInstance.algo.ts:1061", "teal": 4743}, {"pc": [4417, 4418], "source": "contracts/NFDInstance.algo.ts:1063", "teal": 4747}, {"pc": [4419, 4420], "source": "contracts/NFDInstance.algo.ts:1063", "teal": 4748}, {"pc": [4421, 4422], "source": "contracts/NFDInstance.algo.ts:1065", "teal": 4752}, {"pc": [4423], "source": "contracts/NFDInstance.algo.ts:1065", "teal": 4753}, {"pc": [4424, 4425], "source": "contracts/NFDInstance.algo.ts:1066", "teal": 4757}, {"pc": [4426], "source": "contracts/NFDInstance.algo.ts:1066", "teal": 4758}, {"pc": [4427, 4428], "source": "contracts/NFDInstance.algo.ts:1067", "teal": 4762}, {"pc": [4429], "source": "contracts/NFDInstance.algo.ts:1067", "teal": 4763}, {"pc": [4430, 4431], "source": "contracts/NFDInstance.algo.ts:1068", "teal": 4767}, {"pc": [4432], "source": "contracts/NFDInstance.algo.ts:1068", "teal": 4768}, {"pc": [4433, 4434, 4435], "source": "contracts/NFDInstance.algo.ts:1060", "teal": 4769}, {"pc": [4436, 4437, 4438], "source": "contracts/NFDInstance.algo.ts:1069", "teal": 4774}, {"pc": [4439, 4440, 4441], "source": "contracts/NFDInstance.algo.ts:1069", "teal": 4775}, {"pc": [4442, 4443], "source": "contracts/NFDInstance.algo.ts:1071", "teal": 4780}, {"pc": [4444, 4445], "source": "contracts/NFDInstance.algo.ts:1071", "teal": 4781}, {"pc": [4446], "source": "contracts/NFDInstance.algo.ts:1073", "teal": 4785}, {"pc": [4447, 4448], "source": "contracts/NFDInstance.algo.ts:1073", "teal": 4786}, {"pc": [4449, 4450], "source": "contracts/NFDInstance.algo.ts:1073", "teal": 4787}, {"pc": [4451], "source": "contracts/NFDInstance.algo.ts:1073", "teal": 4788}, {"pc": [4452, 4453], "source": "contracts/NFDInstance.algo.ts:1074", "teal": 4792}, {"pc": [4454, 4455], "source": "contracts/NFDInstance.algo.ts:1074", "teal": 4793}, {"pc": [4456, 4457], "source": "contracts/NFDInstance.algo.ts:1074", "teal": 4794}, {"pc": [4458], "source": "contracts/NFDInstance.algo.ts:1074", "teal": 4795}, {"pc": [4459, 4460], "source": "contracts/NFDInstance.algo.ts:1075", "teal": 4799}, {"pc": [4461], "source": "contracts/NFDInstance.algo.ts:1075", "teal": 4800}, {"pc": [4462, 4463, 4464], "source": "contracts/NFDInstance.algo.ts:1076", "teal": 4805}, {"pc": [4465, 4466, 4467], "source": "contracts/NFDInstance.algo.ts:1076", "teal": 4806}, {"pc": [4468, 4469], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4811}, {"pc": [4470], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4812}, {"pc": [4471], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4813}, {"pc": [4472, 4473], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4814}, {"pc": [4474, 4475, 4476], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4815}, {"pc": [4477], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4816}, {"pc": [4478, 4479, 4480], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4817}, {"pc": [4481, 4482], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4818}, {"pc": [4483], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4819}, {"pc": [4484], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4820}, {"pc": [4485], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4821}, {"pc": [4486], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4822}, {"pc": [4487, 4488, 4489], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4823}, {"pc": [4490], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4824}, {"pc": [4491], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4825}, {"pc": [4492, 4493, 4494], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4826}, {"pc": [4495], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4827}, {"pc": [4496], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4828}, {"pc": [4497], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4829}, {"pc": [4498], "source": "contracts/NFDInstance.algo.ts:1078", "teal": 4830}, {"pc": [4499, 4500], "source": "contracts/NFDInstance.algo.ts:1079", "teal": 4834}, {"pc": [4501], "source": "contracts/NFDInstance.algo.ts:1079", "teal": 4835}, {"pc": [4502, 4503], "source": "contracts/NFDInstance.algo.ts:1083", "teal": 4844}, {"pc": [4504, 4505], "source": "contracts/NFDInstance.algo.ts:1084", "teal": 4845}, {"pc": [4506, 4507], "source": "contracts/NFDInstance.algo.ts:1084", "teal": 4846}, {"pc": [4508, 4509], "source": "contracts/NFDInstance.algo.ts:1084", "teal": 4847}, {"pc": [4510, 4511], "source": "contracts/NFDInstance.algo.ts:1084", "teal": 4848}, {"pc": [4512, 4513], "source": "contracts/NFDInstance.algo.ts:1084", "teal": 4849}, {"pc": [4514, 4515, 4516], "source": "contracts/NFDInstance.algo.ts:1084", "teal": 4850}, {"pc": [4517], "source": "contracts/NFDInstance.algo.ts:1083", "teal": 4851}, {"pc": [4518], "source": "contracts/NFDInstance.algo.ts:1083", "teal": 4852}, {"pc": [4519], "source": "contracts/NFDInstance.algo.ts:1086", "teal": 4856}, {"pc": [4520, 4521], "source": "contracts/NFDInstance.algo.ts:1086", "teal": 4857}, {"pc": [4522], "source": "contracts/NFDInstance.algo.ts:1086", "teal": 4858}, {"pc": [4523], "source": "contracts/NFDInstance.algo.ts:1086", "teal": 4859}, {"pc": [4524, 4525], "source": "contracts/NFDInstance.algo.ts:1089", "teal": 4863}, {"pc": [4526, 4527], "source": "contracts/NFDInstance.algo.ts:1089", "teal": 4864}, {"pc": [4528, 4529], "source": "contracts/NFDInstance.algo.ts:1089", "teal": 4865}, {"pc": [4530, 4531], "source": "contracts/NFDInstance.algo.ts:1090", "teal": 4869}, {"pc": [4532, 4533], "source": "contracts/NFDInstance.algo.ts:1090", "teal": 4870}, {"pc": [4534, 4535], "source": "contracts/NFDInstance.algo.ts:1092", "teal": 4874}, {"pc": [4536, 4537], "source": "contracts/NFDInstance.algo.ts:1092", "teal": 4875}, {"pc": [4538, 4539], "source": "contracts/NFDInstance.algo.ts:1097", "teal": 4880}, {"pc": [4540, 4541, 4542], "source": "contracts/NFDInstance.algo.ts:1097", "teal": 4881}, {"pc": [4543], "source": "contracts/NFDInstance.algo.ts:1097", "teal": 4882}, {"pc": [4544], "source": "contracts/NFDInstance.algo.ts:1097", "teal": 4883}, {"pc": [4545, 4546, 4547], "source": "contracts/NFDInstance.algo.ts:1097", "teal": 4884}, {"pc": [4548, 4549], "source": "contracts/NFDInstance.algo.ts:1098", "teal": 4889}, {"pc": [4550, 4551, 4552], "source": "contracts/NFDInstance.algo.ts:1098", "teal": 4890}, {"pc": [4553, 4554], "source": "contracts/NFDInstance.algo.ts:1098", "teal": 4891}, {"pc": [4555, 4556], "source": "contracts/NFDInstance.algo.ts:1099", "teal": 4895}, {"pc": [4557], "source": "contracts/NFDInstance.algo.ts:1099", "teal": 4896}, {"pc": [4558], "source": "contracts/NFDInstance.algo.ts:1099", "teal": 4897}, {"pc": [4559], "errorMessage": "global state value does not exist: parentAppId.globalState(NFD_KEY_OWNER)", "source": "contracts/NFDInstance.algo.ts:1099", "teal": 4900}, {"pc": [4560, 4561], "source": "contracts/NFDInstance.algo.ts:1099", "teal": 4901}, {"pc": [4562, 4563], "source": "contracts/NFDInstance.algo.ts:1104", "teal": 4905}, {"pc": [4564, 4565], "source": "contracts/NFDInstance.algo.ts:1104", "teal": 4906}, {"pc": [4566], "source": "contracts/NFDInstance.algo.ts:1104", "teal": 4907}, {"pc": [4567, 4568], "source": "contracts/NFDInstance.algo.ts:1104", "teal": 4908}, {"pc": [4569], "source": "contracts/NFDInstance.algo.ts:1104", "teal": 4909}, {"pc": [4570, 4571], "source": "contracts/NFDInstance.algo.ts:1104", "teal": 4910}, {"pc": [4572, 4573], "source": "contracts/NFDInstance.algo.ts:1106", "teal": 4914}, {"pc": [4574, 4575], "source": "contracts/NFDInstance.algo.ts:1106", "teal": 4915}, {"pc": [4576, 4577, 4578], "source": "contracts/NFDInstance.algo.ts:1106", "teal": 4916}, {"pc": [4579], "source": "contracts/NFDInstance.algo.ts:1106", "teal": 4917}, {"pc": [4580], "source": "contracts/NFDInstance.algo.ts:1106", "teal": 4918}, {"pc": [4581, 4582], "source": "contracts/NFDInstance.algo.ts:1106", "teal": 4919}, {"pc": [4583], "source": "contracts/NFDInstance.algo.ts:1106", "teal": 4920}, {"pc": [4584, 4585], "source": "contracts/NFDInstance.algo.ts:1106", "teal": 4921}, {"pc": [4586, 4587], "source": "contracts/NFDInstance.algo.ts:1107", "teal": 4926}, {"pc": [4588, 4589], "source": "contracts/NFDInstance.algo.ts:1107", "teal": 4927}, {"pc": [4590, 4591, 4592], "source": "contracts/NFDInstance.algo.ts:1107", "teal": 4928}, {"pc": [4593], "source": "contracts/NFDInstance.algo.ts:1107", "teal": 4929}, {"pc": [4594], "source": "contracts/NFDInstance.algo.ts:1107", "teal": 4930}, {"pc": [4595, 4596, 4597], "source": "contracts/NFDInstance.algo.ts:1107", "teal": 4931}, {"pc": [4598, 4599], "source": "contracts/NFDInstance.algo.ts:1108", "teal": 4936}, {"pc": [4600, 4601, 4602], "source": "contracts/NFDInstance.algo.ts:1108", "teal": 4937}, {"pc": [4603], "source": "contracts/NFDInstance.algo.ts:1108", "teal": 4938}, {"pc": [4604, 4605], "source": "contracts/NFDInstance.algo.ts:1108", "teal": 4939}, {"pc": [4606, 4607], "source": "contracts/NFDInstance.algo.ts:1110", "teal": 4945}, {"pc": [4608, 4609], "source": "contracts/NFDInstance.algo.ts:1110", "teal": 4946}, {"pc": [4610], "source": "contracts/NFDInstance.algo.ts:1110", "teal": 4947}, {"pc": [4611, 4612, 4613], "source": "contracts/NFDInstance.algo.ts:1110", "teal": 4948}, {"pc": [4614, 4615], "source": "contracts/NFDInstance.algo.ts:1111", "teal": 4953}, {"pc": [4616, 4617], "source": "contracts/NFDInstance.algo.ts:1111", "teal": 4954}, {"pc": [4618, 4619], "source": "contracts/NFDInstance.algo.ts:1114", "teal": 4959}, {"pc": [4620, 4621], "source": "contracts/NFDInstance.algo.ts:1114", "teal": 4960}, {"pc": [4622], "source": "contracts/NFDInstance.algo.ts:1114", "teal": 4961}, {"pc": [4623, 4624], "source": "contracts/NFDInstance.algo.ts:1114", "teal": 4962}, {"pc": [4625, 4626, 4627], "source": "contracts/NFDInstance.algo.ts:1097", "teal": 4963}, {"pc": [4628], "source": "contracts/NFDInstance.algo.ts:1117", "teal": 4968}, {"pc": [4629, 4630], "source": "contracts/NFDInstance.algo.ts:1117", "teal": 4969}, {"pc": [4631, 4632], "source": "contracts/NFDInstance.algo.ts:1124", "teal": 4980}, {"pc": [4633, 4634], "source": "contracts/NFDInstance.algo.ts:1123", "teal": 4981}, {"pc": [4635], "source": "contracts/NFDInstance.algo.ts:1122", "teal": 4982}, {"pc": [4636, 4637], "source": "contracts/NFDInstance.algo.ts:1121", "teal": 4983}, {"pc": [4638, 4639, 4640], "source": "contracts/NFDInstance.algo.ts:1121", "teal": 4984}, {"pc": [4641, 4642], "source": "contracts/NFDInstance.algo.ts:1120", "teal": 4985}, {"pc": [4643, 4644, 4645], "source": "contracts/NFDInstance.algo.ts:1119", "teal": 4986}, {"pc": [4646, 4647, 4648, 4649, 4650, 4651], "source": "contracts/NFDInstance.algo.ts:1126", "teal": 4998}, {"pc": [4652], "source": "contracts/NFDInstance.algo.ts:1126", "teal": 4999}, {"pc": [4653], "source": "contracts/NFDInstance.algo.ts:1126", "teal": 5000}, {"pc": [4654, 4655, 4656, 4657], "source": "contracts/NFDInstance.algo.ts:1126", "teal": 5001}, {"pc": [4658, 4659, 4660], "source": "contracts/NFDInstance.algo.ts:1127", "teal": 5002}, {"pc": [4661], "source": "contracts/NFDInstance.algo.ts:1127", "teal": 5003}, {"pc": [4662, 4663, 4664], "source": "contracts/NFDInstance.algo.ts:1127", "teal": 5004}, {"pc": [4665, 4666], "source": "contracts/NFDInstance.algo.ts:1128", "teal": 5005}, {"pc": [4667], "source": "contracts/NFDInstance.algo.ts:1128", "teal": 5006}, {"pc": [4668], "source": "contracts/NFDInstance.algo.ts:1128", "teal": 5007}, {"pc": [4669], "source": "contracts/NFDInstance.algo.ts:1128", "teal": 5008}, {"pc": [4670], "source": "contracts/NFDInstance.algo.ts:1128", "teal": 5009}, {"pc": [4671, 4672, 4673], "source": "contracts/NFDInstance.algo.ts:1128", "teal": 5010}, {"pc": [4674], "source": "contracts/NFDInstance.algo.ts:1128", "teal": 5011}, {"pc": [4675], "source": "contracts/NFDInstance.algo.ts:1128", "teal": 5012}, {"pc": [4676, 4677, 4678], "source": "contracts/NFDInstance.algo.ts:1128", "teal": 5013}, {"pc": [4679, 4680], "source": "contracts/NFDInstance.algo.ts:1129", "teal": 5014}, {"pc": [4681, 4682, 4683], "source": "contracts/NFDInstance.algo.ts:1129", "teal": 5015}, {"pc": [4684, 4685], "source": "contracts/NFDInstance.algo.ts:1130", "teal": 5016}, {"pc": [4686, 4687], "source": "contracts/NFDInstance.algo.ts:1130", "teal": 5017}, {"pc": [4688, 4689, 4690], "source": "contracts/NFDInstance.algo.ts:1130", "teal": 5018}, {"pc": [4691, 4692], "source": "contracts/NFDInstance.algo.ts:1131", "teal": 5019}, {"pc": [4693], "source": "contracts/NFDInstance.algo.ts:1131", "teal": 5020}, {"pc": [4694, 4695, 4696], "source": "contracts/NFDInstance.algo.ts:1131", "teal": 5021}, {"pc": [4697, 4698], "source": "contracts/NFDInstance.algo.ts:1132", "teal": 5022}, {"pc": [4699, 4700], "source": "contracts/NFDInstance.algo.ts:1132", "teal": 5023}, {"pc": [4701], "source": "contracts/NFDInstance.algo.ts:1132", "teal": 5024}, {"pc": [4702, 4703, 4704], "source": "contracts/NFDInstance.algo.ts:1132", "teal": 5025}, {"pc": [4705, 4706], "source": "contracts/NFDInstance.algo.ts:1133", "teal": 5026}, {"pc": [4707], "source": "contracts/NFDInstance.algo.ts:1133", "teal": 5027}, {"pc": [4708], "source": "contracts/NFDInstance.algo.ts:1133", "teal": 5028}, {"pc": [4709], "source": "contracts/NFDInstance.algo.ts:1133", "teal": 5029}, {"pc": [4710, 4711, 4712], "source": "contracts/NFDInstance.algo.ts:1133", "teal": 5030}, {"pc": [4713], "source": "contracts/NFDInstance.algo.ts:1126", "teal": 5031}, {"pc": [4714], "source": "contracts/NFDInstance.algo.ts:1126", "teal": 5032}, {"pc": [4715], "source": "contracts/NFDInstance.algo.ts:1126", "teal": 5033}, {"pc": [4716], "source": "contracts/NFDInstance.algo.ts:1126", "teal": 5034}, {"pc": [4717], "source": "contracts/NFDInstance.algo.ts:1030", "teal": 5035}, {"pc": [4718, 4719, 4720], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5040}, {"pc": [4721], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5041}, {"pc": [4722], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5042}, {"pc": [4723], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5043}, {"pc": [4724], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5044}, {"pc": [4725], "errorMessage": "argument 0 (address) for setPrimaryAddress must be a address", "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5047}, {"pc": [4726, 4727, 4728], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5050}, {"pc": [4729, 4730, 4731], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5051}, {"pc": [4732, 4733, 4734], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5054}, {"pc": [4735], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5055}, {"pc": [4736], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5056}, {"pc": [4737, 4738, 4739], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5060}, {"pc": [4740, 4741, 4742], "source": "contracts/NFDInstance.algo.ts:1139", "teal": 5064}, {"pc": [4743, 4744], "source": "contracts/NFDInstance.algo.ts:1141", "teal": 5068}, {"pc": [4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759], "source": "contracts/NFDInstance.algo.ts:1141", "teal": 5069}, {"pc": [4760], "source": "contracts/NFDInstance.algo.ts:1141", "teal": 5070}, {"pc": [4761], "source": "contracts/NFDInstance.algo.ts:1141", "teal": 5071}, {"pc": [4762], "source": "contracts/NFDInstance.algo.ts:1142", "teal": 5075}, {"pc": [4763, 4764], "source": "contracts/NFDInstance.algo.ts:1142", "teal": 5076}, {"pc": [4765], "source": "contracts/NFDInstance.algo.ts:1142", "teal": 5077}, {"pc": [4766], "source": "contracts/NFDInstance.algo.ts:1142", "teal": 5078}, {"pc": [4767, 4768], "source": "contracts/NFDInstance.algo.ts:1143", "teal": 5082}, {"pc": [4769, 4770], "source": "contracts/NFDInstance.algo.ts:1143", "teal": 5083}, {"pc": [4771, 4772, 4773], "source": "contracts/NFDInstance.algo.ts:1143", "teal": 5084}, {"pc": [4774], "source": "contracts/NFDInstance.algo.ts:1138", "teal": 5085}, {"pc": [4775, 4776], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5090}, {"pc": [4777, 4778, 4779], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5093}, {"pc": [4780, 4781, 4782], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5094}, {"pc": [4783, 4784, 4785], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5097}, {"pc": [4786, 4787, 4788], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5098}, {"pc": [4789, 4790, 4791], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5101}, {"pc": [4792, 4793], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5102}, {"pc": [4794], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5103}, {"pc": [4795, 4796], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5104}, {"pc": [4797], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5105}, {"pc": [4798], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5106}, {"pc": [4799], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5107}, {"pc": [4800], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5108}, {"pc": [4801], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5109}, {"pc": [4802, 4803, 4804], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5122}, {"pc": [4805], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5125}, {"pc": [4806, 4807], "source": "contracts/NFDInstance.algo.ts:1157", "teal": 5129}, {"pc": [4808, 4809], "source": "contracts/NFDInstance.algo.ts:1157", "teal": 5130}, {"pc": [4810], "source": "contracts/NFDInstance.algo.ts:1157", "teal": 5131}, {"pc": [4811], "errorMessage": "caller must be NFD registry!", "source": "contracts/NFDInstance.algo.ts:1157", "teal": 5134}, {"pc": [4812, 4813, 4814], "source": "contracts/NFDInstance.algo.ts:1158", "teal": 5138}, {"pc": [4815, 4816], "source": "contracts/NFDInstance.algo.ts:1159", "teal": 5142}, {"pc": [4817, 4818, 4819], "source": "contracts/NFDInstance.algo.ts:1159", "teal": 5143}, {"pc": [4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827], "source": "contracts/NFDInstance.algo.ts:1159", "teal": 5144}, {"pc": [4828], "source": "contracts/NFDInstance.algo.ts:1159", "teal": 5145}, {"pc": [4829], "errorMessage": "field being verified MUST START with u.cav", "source": "contracts/NFDInstance.algo.ts:1159", "teal": 5148}, {"pc": [4830, 4831], "source": "contracts/NFDInstance.algo.ts:1160", "teal": 5152}, {"pc": [4832, 4833, 4834], "source": "contracts/NFDInstance.algo.ts:1160", "teal": 5153}, {"pc": [4835, 4836], "source": "contracts/NFDInstance.algo.ts:1160", "teal": 5154}, {"pc": [4837], "source": "contracts/NFDInstance.algo.ts:1160", "teal": 5155}, {"pc": [4838], "errorMessage": "destination field MUST START with v.ca[....]", "source": "contracts/NFDInstance.algo.ts:1160", "teal": 5158}, {"pc": [4839, 4840], "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5162}, {"pc": [4841, 4842], "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5163}, {"pc": [4843], "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5164}, {"pc": [4844, 4845], "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5165}, {"pc": [4846], "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5166}, {"pc": [4847, 4848], "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5167}, {"pc": [4849], "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5168}, {"pc": [4850, 4851], "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5169}, {"pc": [4852], "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5170}, {"pc": [4853], "errorMessage": "destination field must end END with .as", "source": "contracts/NFDInstance.algo.ts:1161", "teal": 5173}, {"pc": [4854, 4855], "source": "contracts/NFDInstance.algo.ts:1163", "teal": 5180}, {"pc": [4856], "source": "contracts/NFDInstance.algo.ts:1163", "teal": 5181}, {"pc": [4857], "source": "contracts/NFDInstance.algo.ts:1163", "teal": 5182}, {"pc": [4858], "source": "contracts/NFDInstance.algo.ts:1163", "teal": 5183}, {"pc": [4859], "errorMessage": "referenced field to add as verified address must have value in box storage", "source": "contracts/NFDInstance.algo.ts:1162", "teal": 5186}, {"pc": [4860], "source": "contracts/NFDInstance.algo.ts:1166", "teal": 5190}, {"pc": [4861, 4862], "source": "contracts/NFDInstance.algo.ts:1166", "teal": 5191}, {"pc": [4863], "source": "contracts/NFDInstance.algo.ts:1166", "teal": 5192}, {"pc": [4864], "source": "contracts/NFDInstance.algo.ts:1166", "teal": 5193}, {"pc": [4865, 4866], "source": "contracts/NFDInstance.algo.ts:1168", "teal": 5197}, {"pc": [4867], "source": "contracts/NFDInstance.algo.ts:1168", "teal": 5198}, {"pc": [4868], "errorMessage": "box value does not exist: this.boxes(fieldBeingVerified).value", "source": "contracts/NFDInstance.algo.ts:1168", "teal": 5201}, {"pc": [4869, 4870], "source": "contracts/NFDInstance.algo.ts:1168", "teal": 5202}, {"pc": [4871, 4872], "source": "contracts/NFDInstance.algo.ts:1169", "teal": 5206}, {"pc": [4873], "source": "contracts/NFDInstance.algo.ts:1169", "teal": 5207}, {"pc": [4874, 4875, 4876, 4877, 4878, 4879], "source": "contracts/NFDInstance.algo.ts:1171", "teal": 5215}, {"pc": [4880], "source": "contracts/NFDInstance.algo.ts:1171", "teal": 5216}, {"pc": [4881], "source": "contracts/NFDInstance.algo.ts:1171", "teal": 5217}, {"pc": [4882, 4883], "source": "contracts/NFDInstance.algo.ts:1171", "teal": 5218}, {"pc": [4884, 4885, 4886], "source": "contracts/NFDInstance.algo.ts:1172", "teal": 5219}, {"pc": [4887], "source": "contracts/NFDInstance.algo.ts:1172", "teal": 5220}, {"pc": [4888, 4889, 4890], "source": "contracts/NFDInstance.algo.ts:1172", "teal": 5221}, {"pc": [4891, 4892], "source": "contracts/NFDInstance.algo.ts:1173", "teal": 5222}, {"pc": [4893], "source": "contracts/NFDInstance.algo.ts:1173", "teal": 5223}, {"pc": [4894], "source": "contracts/NFDInstance.algo.ts:1173", "teal": 5224}, {"pc": [4895], "source": "contracts/NFDInstance.algo.ts:1173", "teal": 5225}, {"pc": [4896], "source": "contracts/NFDInstance.algo.ts:1173", "teal": 5226}, {"pc": [4897, 4898, 4899], "source": "contracts/NFDInstance.algo.ts:1173", "teal": 5227}, {"pc": [4900], "source": "contracts/NFDInstance.algo.ts:1173", "teal": 5228}, {"pc": [4901], "source": "contracts/NFDInstance.algo.ts:1173", "teal": 5229}, {"pc": [4902, 4903, 4904], "source": "contracts/NFDInstance.algo.ts:1173", "teal": 5230}, {"pc": [4905, 4906], "source": "contracts/NFDInstance.algo.ts:1174", "teal": 5231}, {"pc": [4907, 4908, 4909], "source": "contracts/NFDInstance.algo.ts:1174", "teal": 5232}, {"pc": [4910], "source": "contracts/NFDInstance.algo.ts:1171", "teal": 5233}, {"pc": [4911], "source": "contracts/NFDInstance.algo.ts:1171", "teal": 5234}, {"pc": [4912], "source": "contracts/NFDInstance.algo.ts:1171", "teal": 5235}, {"pc": [4913], "source": "contracts/NFDInstance.algo.ts:1171", "teal": 5236}, {"pc": [4914, 4915], "source": "contracts/NFDInstance.algo.ts:1177", "teal": 5240}, {"pc": [4916, 4917], "source": "contracts/NFDInstance.algo.ts:1177", "teal": 5241}, {"pc": [4918, 4919, 4920], "source": "contracts/NFDInstance.algo.ts:1177", "teal": 5242}, {"pc": [4921, 4922], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5245}, {"pc": [4923], "source": "contracts/NFDInstance.algo.ts:1156", "teal": 5246}, {"pc": [4924, 4925], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5251}, {"pc": [4926, 4927, 4928], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5254}, {"pc": [4929], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5255}, {"pc": [4930], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5256}, {"pc": [4931], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5257}, {"pc": [4932], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5258}, {"pc": [4933], "errorMessage": "argument 0 (mbrRefundDest) for registryRemovingVerifiedAddress must be a address", "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5261}, {"pc": [4934, 4935, 4936], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5264}, {"pc": [4937], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5265}, {"pc": [4938], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5266}, {"pc": [4939], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5267}, {"pc": [4940], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5268}, {"pc": [4941], "errorMessage": "argument 1 (address) for registryRemovingVerifiedAddress must be a address", "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5271}, {"pc": [4942, 4943, 4944], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5274}, {"pc": [4945, 4946, 4947], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5275}, {"pc": [4948, 4949, 4950], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5278}, {"pc": [4951, 4952], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5279}, {"pc": [4953], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5280}, {"pc": [4954, 4955], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5281}, {"pc": [4956], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5282}, {"pc": [4957], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5283}, {"pc": [4958], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5284}, {"pc": [4959], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5285}, {"pc": [4960], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5286}, {"pc": [4961, 4962, 4963], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5297}, {"pc": [4964], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5300}, {"pc": [4965], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5301}, {"pc": [4966, 4967], "source": "contracts/NFDInstance.algo.ts:1189", "teal": 5305}, {"pc": [4968, 4969], "source": "contracts/NFDInstance.algo.ts:1189", "teal": 5306}, {"pc": [4970], "source": "contracts/NFDInstance.algo.ts:1189", "teal": 5307}, {"pc": [4971], "errorMessage": "caller must be NFD registry!", "source": "contracts/NFDInstance.algo.ts:1189", "teal": 5310}, {"pc": [4972, 4973, 4974], "source": "contracts/NFDInstance.algo.ts:1191", "teal": 5315}, {"pc": [4975], "source": "contracts/NFDInstance.algo.ts:1191", "teal": 5316}, {"pc": [4976, 4977, 4978], "source": "contracts/NFDInstance.algo.ts:1191", "teal": 5317}, {"pc": [4979, 4980, 4981], "source": "contracts/NFDInstance.algo.ts:1192", "teal": 5322}, {"pc": [4982], "source": "contracts/NFDInstance.algo.ts:1192", "teal": 5323}, {"pc": [4983], "errorMessage": "can't be for sale", "source": "contracts/NFDInstance.algo.ts:1192", "teal": 5326}, {"pc": [4984, 4985], "source": "contracts/NFDInstance.algo.ts:1194", "teal": 5331}, {"pc": [4986, 4987, 4988], "source": "contracts/NFDInstance.algo.ts:1194", "teal": 5332}, {"pc": [4989, 4990], "source": "contracts/NFDInstance.algo.ts:1194", "teal": 5333}, {"pc": [4991], "source": "contracts/NFDInstance.algo.ts:1194", "teal": 5334}, {"pc": [4992], "errorMessage": "verified field MUST START with v.ca[....]", "source": "contracts/NFDInstance.algo.ts:1194", "teal": 5337}, {"pc": [4993, 4994], "source": "contracts/NFDInstance.algo.ts:1196", "teal": 5344}, {"pc": [4995, 4996], "source": "contracts/NFDInstance.algo.ts:1196", "teal": 5345}, {"pc": [4997], "source": "contracts/NFDInstance.algo.ts:1196", "teal": 5346}, {"pc": [4998, 4999], "source": "contracts/NFDInstance.algo.ts:1196", "teal": 5347}, {"pc": [5000], "source": "contracts/NFDInstance.algo.ts:1196", "teal": 5348}, {"pc": [5001, 5002], "source": "contracts/NFDInstance.algo.ts:1196", "teal": 5349}, {"pc": [5003], "source": "contracts/NFDInstance.algo.ts:1196", "teal": 5350}, {"pc": [5004, 5005], "source": "contracts/NFDInstance.algo.ts:1196", "teal": 5351}, {"pc": [5006], "source": "contracts/NFDInstance.algo.ts:1196", "teal": 5352}, {"pc": [5007], "errorMessage": "verified field must end END with .as", "source": "contracts/NFDInstance.algo.ts:1195", "teal": 5355}, {"pc": [5008], "source": "contracts/NFDInstance.algo.ts:1199", "teal": 5359}, {"pc": [5009, 5010], "source": "contracts/NFDInstance.algo.ts:1199", "teal": 5360}, {"pc": [5011], "source": "contracts/NFDInstance.algo.ts:1199", "teal": 5361}, {"pc": [5012], "source": "contracts/NFDInstance.algo.ts:1199", "teal": 5362}, {"pc": [5013, 5014], "source": "contracts/NFDInstance.algo.ts:1201", "teal": 5366}, {"pc": [5015], "source": "contracts/NFDInstance.algo.ts:1201", "teal": 5367}, {"pc": [5016], "errorMessage": "box value does not exist: this.boxes(fieldBeingChanged).size", "source": "contracts/NFDInstance.algo.ts:1201", "teal": 5370}, {"pc": [5017, 5018], "source": "contracts/NFDInstance.algo.ts:1201", "teal": 5371}, {"pc": [5019, 5020], "source": "contracts/NFDInstance.algo.ts:1202", "teal": 5375}, {"pc": [5021, 5022], "source": "contracts/NFDInstance.algo.ts:1202", "teal": 5376}, {"pc": [5023, 5024, 5025], "source": "contracts/NFDInstance.algo.ts:1202", "teal": 5377}, {"pc": [5026, 5027], "source": "contracts/NFDInstance.algo.ts:1202", "teal": 5378}, {"pc": [5028, 5029, 5030, 5031, 5032, 5033], "source": "contracts/NFDInstance.algo.ts:1204", "teal": 5386}, {"pc": [5034], "source": "contracts/NFDInstance.algo.ts:1204", "teal": 5387}, {"pc": [5035], "source": "contracts/NFDInstance.algo.ts:1204", "teal": 5388}, {"pc": [5036, 5037], "source": "contracts/NFDInstance.algo.ts:1204", "teal": 5389}, {"pc": [5038, 5039, 5040], "source": "contracts/NFDInstance.algo.ts:1205", "teal": 5390}, {"pc": [5041], "source": "contracts/NFDInstance.algo.ts:1205", "teal": 5391}, {"pc": [5042, 5043, 5044], "source": "contracts/NFDInstance.algo.ts:1205", "teal": 5392}, {"pc": [5045, 5046], "source": "contracts/NFDInstance.algo.ts:1206", "teal": 5393}, {"pc": [5047], "source": "contracts/NFDInstance.algo.ts:1206", "teal": 5394}, {"pc": [5048], "source": "contracts/NFDInstance.algo.ts:1206", "teal": 5395}, {"pc": [5049], "source": "contracts/NFDInstance.algo.ts:1206", "teal": 5396}, {"pc": [5050], "source": "contracts/NFDInstance.algo.ts:1206", "teal": 5397}, {"pc": [5051, 5052, 5053], "source": "contracts/NFDInstance.algo.ts:1206", "teal": 5398}, {"pc": [5054], "source": "contracts/NFDInstance.algo.ts:1206", "teal": 5399}, {"pc": [5055], "source": "contracts/NFDInstance.algo.ts:1206", "teal": 5400}, {"pc": [5056, 5057, 5058], "source": "contracts/NFDInstance.algo.ts:1206", "teal": 5401}, {"pc": [5059, 5060], "source": "contracts/NFDInstance.algo.ts:1207", "teal": 5402}, {"pc": [5061, 5062, 5063], "source": "contracts/NFDInstance.algo.ts:1207", "teal": 5403}, {"pc": [5064], "source": "contracts/NFDInstance.algo.ts:1204", "teal": 5404}, {"pc": [5065], "source": "contracts/NFDInstance.algo.ts:1204", "teal": 5405}, {"pc": [5066], "source": "contracts/NFDInstance.algo.ts:1204", "teal": 5406}, {"pc": [5067], "source": "contracts/NFDInstance.algo.ts:1204", "teal": 5407}, {"pc": [5068, 5069], "source": "contracts/NFDInstance.algo.ts:1210", "teal": 5412}, {"pc": [5070], "source": "contracts/NFDInstance.algo.ts:1210", "teal": 5413}, {"pc": [5071], "source": "contracts/NFDInstance.algo.ts:1210", "teal": 5414}, {"pc": [5072], "source": "contracts/NFDInstance.algo.ts:1210", "teal": 5415}, {"pc": [5073], "source": "contracts/NFDInstance.algo.ts:1210", "teal": 5416}, {"pc": [5074, 5075, 5076], "source": "contracts/NFDInstance.algo.ts:1210", "teal": 5417}, {"pc": [5077], "source": "contracts/NFDInstance.algo.ts:1212", "teal": 5426}, {"pc": [5078], "source": "contracts/NFDInstance.algo.ts:1212", "teal": 5427}, {"pc": [5079, 5080], "source": "contracts/NFDInstance.algo.ts:1212", "teal": 5428}, {"pc": [5081, 5082], "source": "contracts/NFDInstance.algo.ts:1213", "teal": 5432}, {"pc": [5083, 5084], "source": "contracts/NFDInstance.algo.ts:1213", "teal": 5433}, {"pc": [5085, 5086], "source": "contracts/NFDInstance.algo.ts:1213", "teal": 5434}, {"pc": [5087], "source": "contracts/NFDInstance.algo.ts:1213", "teal": 5435}, {"pc": [5088, 5089], "source": "contracts/NFDInstance.algo.ts:1213", "teal": 5436}, {"pc": [5090], "source": "contracts/NFDInstance.algo.ts:1213", "teal": 5437}, {"pc": [5091], "source": "contracts/NFDInstance.algo.ts:1213", "teal": 5438}, {"pc": [5092], "source": "contracts/NFDInstance.algo.ts:1213", "teal": 5439}, {"pc": [5093, 5094], "source": "contracts/NFDInstance.algo.ts:1213", "teal": 5440}, {"pc": [5095, 5096], "source": "contracts/NFDInstance.algo.ts:1214", "teal": 5444}, {"pc": [5097, 5098], "source": "contracts/NFDInstance.algo.ts:1214", "teal": 5445}, {"pc": [5099, 5100], "source": "contracts/NFDInstance.algo.ts:1215", "teal": 5449}, {"pc": [5101, 5102], "source": "contracts/NFDInstance.algo.ts:1215", "teal": 5450}, {"pc": [5103], "source": "contracts/NFDInstance.algo.ts:1212", "teal": 5453}, {"pc": [5104, 5105], "source": "contracts/NFDInstance.algo.ts:1212", "teal": 5454}, {"pc": [5106], "source": "contracts/NFDInstance.algo.ts:1212", "teal": 5457}, {"pc": [5107, 5108], "source": "contracts/NFDInstance.algo.ts:1219", "teal": 5462}, {"pc": [5109, 5110], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5465}, {"pc": [5111, 5112], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5468}, {"pc": [5113], "source": "contracts/NFDInstance.algo.ts:1188", "teal": 5469}, {"pc": [5114, 5115, 5116], "source": "contracts/NFDInstance.algo.ts:1228", "teal": 5478}, {"pc": [5117], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5485}, {"pc": [5118, 5119], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5486}, {"pc": [5120, 5121], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5487}, {"pc": [5122, 5123, 5124, 5125, 5126, 5127], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5488}, {"pc": [5128, 5129], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5489}, {"pc": [5130, 5131], "source": "contracts/NFDInstance.algo.ts:1231", "teal": 5493}, {"pc": [5132, 5133], "source": "contracts/NFDInstance.algo.ts:1231", "teal": 5494}, {"pc": [5134, 5135], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5498}, {"pc": [5136], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5499}, {"pc": [5137], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5500}, {"pc": [5138], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5501}, {"pc": [5139], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5502}, {"pc": [5140, 5141, 5142], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5503}, {"pc": [5143], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5504}, {"pc": [5144], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5505}, {"pc": [5145, 5146], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5506}, {"pc": [5147, 5148], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5507}, {"pc": [5149, 5150], "source": "contracts/NFDInstance.algo.ts:1232", "teal": 5508}, {"pc": [5151], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5511}, {"pc": [5152, 5153], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5512}, {"pc": [5154], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5515}, {"pc": [5155, 5156], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5516}, {"pc": [5157], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5517}, {"pc": [5158], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5518}, {"pc": [5159, 5160], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5519}, {"pc": [5161, 5162, 5163], "source": "contracts/NFDInstance.algo.ts:1230", "teal": 5520}, {"pc": [5164], "source": "contracts/NFDInstance.algo.ts:1228", "teal": 5521}, {"pc": [5165, 5166, 5167], "source": "contracts/NFDInstance.algo.ts:1242", "teal": 5525}, {"pc": [5168], "source": "contracts/NFDInstance.algo.ts:1242", "teal": 5528}, {"pc": [5169], "source": "contracts/NFDInstance.algo.ts:1242", "teal": 5529}, {"pc": [5170, 5171, 5172], "source": "contracts/NFDInstance.algo.ts:1243", "teal": 5533}, {"pc": [5173, 5174, 5175], "source": "contracts/NFDInstance.algo.ts:1247", "teal": 5538}, {"pc": [5176, 5177, 5178], "source": "contracts/NFDInstance.algo.ts:1247", "teal": 5539}, {"pc": [5179, 5180], "source": "contracts/NFDInstance.algo.ts:1248", "teal": 5544}, {"pc": [5181], "source": "contracts/NFDInstance.algo.ts:1248", "teal": 5545}, {"pc": [5182], "source": "contracts/NFDInstance.algo.ts:1248", "teal": 5546}, {"pc": [5183], "source": "contracts/NFDInstance.algo.ts:1248", "teal": 5547}, {"pc": [5184], "errorMessage": "sender must be owner", "source": "contracts/NFDInstance.algo.ts:1248", "teal": 5550}, {"pc": [5185, 5186], "source": "contracts/NFDInstance.algo.ts:1251", "teal": 5555}, {"pc": [5187], "source": "contracts/NFDInstance.algo.ts:1251", "teal": 5556}, {"pc": [5188], "source": "contracts/NFDInstance.algo.ts:1251", "teal": 5557}, {"pc": [5189], "errorMessage": "part of opt-in for new asset, must have prior txn paying MBR", "source": "contracts/NFDInstance.algo.ts:1251", "teal": 5560}, {"pc": [5190, 5191], "source": "contracts/NFDInstance.algo.ts:1253", "teal": 5567}, {"pc": [5192], "source": "contracts/NFDInstance.algo.ts:1253", "teal": 5568}, {"pc": [5193], "source": "contracts/NFDInstance.algo.ts:1253", "teal": 5569}, {"pc": [5194, 5195], "source": "contracts/NFDInstance.algo.ts:1253", "teal": 5570}, {"pc": [5196, 5197], "source": "contracts/NFDInstance.algo.ts:1253", "teal": 5573}, {"pc": [5198, 5199], "source": "contracts/NFDInstance.algo.ts:1253", "teal": 5574}, {"pc": [5200], "source": "contracts/NFDInstance.algo.ts:1253", "teal": 5575}, {"pc": [5201], "source": "contracts/NFDInstance.algo.ts:1253", "teal": 5576}, {"pc": [5202], "errorMessage": "transaction verification failed: {\"txn\":\"this.txnGroup[this.txn.groupIndex - 1]\",\"field\":\"typeEnum\",\"expected\":\"pay\"}", "source": "contracts/NFDInstance.algo.ts:1253", "teal": 5579}, {"pc": [5203, 5204], "source": "contracts/NFDInstance.algo.ts:1254", "teal": 5582}, {"pc": [5205, 5206], "source": "contracts/NFDInstance.algo.ts:1254", "teal": 5583}, {"pc": [5207, 5208], "source": "contracts/NFDInstance.algo.ts:1254", "teal": 5584}, {"pc": [5209], "source": "contracts/NFDInstance.algo.ts:1254", "teal": 5585}, {"pc": [5210], "errorMessage": "transaction verification failed: {\"txn\":\"this.txnGroup[this.txn.groupIndex - 1]\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}", "source": "contracts/NFDInstance.algo.ts:1254", "teal": 5588}, {"pc": [5211, 5212], "source": "contracts/NFDInstance.algo.ts:1255", "teal": 5591}, {"pc": [5213, 5214], "source": "contracts/NFDInstance.algo.ts:1255", "teal": 5592}, {"pc": [5215, 5216], "source": "contracts/NFDInstance.algo.ts:1255", "teal": 5593}, {"pc": [5217, 5218], "source": "contracts/NFDInstance.algo.ts:1255", "teal": 5594}, {"pc": [5219], "source": "contracts/NFDInstance.algo.ts:1255", "teal": 5595}, {"pc": [5220], "source": "contracts/NFDInstance.algo.ts:1255", "teal": 5596}, {"pc": [5221], "source": "contracts/NFDInstance.algo.ts:1255", "teal": 5597}, {"pc": [5222], "source": "contracts/NFDInstance.algo.ts:1255", "teal": 5598}, {"pc": [5223], "errorMessage": "transaction verification failed: {\"txn\":\"this.txnGroup[this.txn.groupIndex - 1]\",\"field\":\"amount\",\"expected\":\"100_000 * (this.txn.numAppArgs - 1)\"}", "source": "contracts/NFDInstance.algo.ts:1255", "teal": 5601}, {"pc": [5224], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5605}, {"pc": [5225, 5226], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5606}, {"pc": [5227, 5228], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5611}, {"pc": [5229, 5230], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5612}, {"pc": [5231], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5613}, {"pc": [5232, 5233, 5234], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5614}, {"pc": [5235, 5236], "source": "contracts/NFDInstance.algo.ts:1258", "teal": 5618}, {"pc": [5237, 5238], "source": "contracts/NFDInstance.algo.ts:1258", "teal": 5619}, {"pc": [5239], "source": "contracts/NFDInstance.algo.ts:1258", "teal": 5620}, {"pc": [5240, 5241], "source": "contracts/NFDInstance.algo.ts:1258", "teal": 5621}, {"pc": [5242, 5243], "source": "contracts/NFDInstance.algo.ts:1260", "teal": 5626}, {"pc": [5244, 5245], "source": "contracts/NFDInstance.algo.ts:1260", "teal": 5627}, {"pc": [5246, 5247], "source": "contracts/NFDInstance.algo.ts:1260", "teal": 5628}, {"pc": [5248], "source": "contracts/NFDInstance.algo.ts:1260", "teal": 5629}, {"pc": [5249], "source": "contracts/NFDInstance.algo.ts:1260", "teal": 5630}, {"pc": [5250], "source": "contracts/NFDInstance.algo.ts:1260", "teal": 5631}, {"pc": [5251, 5252, 5253], "source": "contracts/NFDInstance.algo.ts:1260", "teal": 5632}, {"pc": [5254], "source": "contracts/NFDInstance.algo.ts:1261", "teal": 5641}, {"pc": [5255, 5256], "source": "contracts/NFDInstance.algo.ts:1261", "teal": 5642}, {"pc": [5257, 5258], "source": "contracts/NFDInstance.algo.ts:1261", "teal": 5643}, {"pc": [5259, 5260], "source": "contracts/NFDInstance.algo.ts:1262", "teal": 5647}, {"pc": [5261, 5262], "source": "contracts/NFDInstance.algo.ts:1262", "teal": 5648}, {"pc": [5263, 5264], "source": "contracts/NFDInstance.algo.ts:1263", "teal": 5652}, {"pc": [5265, 5266], "source": "contracts/NFDInstance.algo.ts:1263", "teal": 5653}, {"pc": [5267], "source": "contracts/NFDInstance.algo.ts:1264", "teal": 5657}, {"pc": [5268, 5269], "source": "contracts/NFDInstance.algo.ts:1264", "teal": 5658}, {"pc": [5270], "source": "contracts/NFDInstance.algo.ts:1261", "teal": 5661}, {"pc": [5271, 5272], "source": "contracts/NFDInstance.algo.ts:1261", "teal": 5662}, {"pc": [5273], "source": "contracts/NFDInstance.algo.ts:1261", "teal": 5665}, {"pc": [5274, 5275], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5672}, {"pc": [5276], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5673}, {"pc": [5277], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5674}, {"pc": [5278, 5279], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5675}, {"pc": [5280, 5281, 5282], "source": "contracts/NFDInstance.algo.ts:1257", "teal": 5676}, {"pc": [5283], "source": "contracts/NFDInstance.algo.ts:1242", "teal": 5679}, {"pc": [5284, 5285, 5286], "source": "contracts/NFDInstance.algo.ts:1270", "teal": 5683}, {"pc": [5287, 5288, 5289], "source": "contracts/NFDInstance.algo.ts:1271", "teal": 5688}, {"pc": [5290, 5291], "source": "contracts/NFDInstance.algo.ts:1271", "teal": 5689}, {"pc": [5292], "source": "contracts/NFDInstance.algo.ts:1271", "teal": 5690}, {"pc": [5293], "source": "contracts/NFDInstance.algo.ts:1271", "teal": 5691}, {"pc": [5294], "source": "contracts/NFDInstance.algo.ts:1271", "teal": 5692}, {"pc": [5295], "source": "contracts/NFDInstance.algo.ts:1271", "teal": 5693}, {"pc": [5296, 5297, 5298], "source": "contracts/NFDInstance.algo.ts:1271", "teal": 5694}, {"pc": [5299], "source": "contracts/NFDInstance.algo.ts:1272", "teal": 5699}, {"pc": [5300], "source": "contracts/NFDInstance.algo.ts:1272", "teal": 5700}, {"pc": [5301, 5302], "source": "contracts/NFDInstance.algo.ts:1274", "teal": 5705}, {"pc": [5303], "source": "contracts/NFDInstance.algo.ts:1274", "teal": 5706}, {"pc": [5304], "source": "contracts/NFDInstance.algo.ts:1270", "teal": 5707}, {"pc": [5305, 5306, 5307], "source": "contracts/NFDInstance.algo.ts:1277", "teal": 5711}, {"pc": [5308, 5309], "source": "contracts/NFDInstance.algo.ts:1278", "teal": 5716}, {"pc": [5310, 5311], "source": "contracts/NFDInstance.algo.ts:1278", "teal": 5717}, {"pc": [5312], "source": "contracts/NFDInstance.algo.ts:1278", "teal": 5718}, {"pc": [5313], "source": "contracts/NFDInstance.algo.ts:1278", "teal": 5719}, {"pc": [5314], "source": "contracts/NFDInstance.algo.ts:1278", "teal": 5720}, {"pc": [5315], "source": "contracts/NFDInstance.algo.ts:1278", "teal": 5721}, {"pc": [5316, 5317, 5318], "source": "contracts/NFDInstance.algo.ts:1278", "teal": 5722}, {"pc": [5319], "source": "contracts/NFDInstance.algo.ts:1279", "teal": 5727}, {"pc": [5320], "source": "contracts/NFDInstance.algo.ts:1279", "teal": 5728}, {"pc": [5321, 5322], "source": "contracts/NFDInstance.algo.ts:1281", "teal": 5733}, {"pc": [5323, 5324], "source": "contracts/NFDInstance.algo.ts:1281", "teal": 5734}, {"pc": [5325], "source": "contracts/NFDInstance.algo.ts:1281", "teal": 5735}, {"pc": [5326], "errorMessage": "global state value does not exist: AppID.fromUint64(appId).globalState(key)", "source": "contracts/NFDInstance.algo.ts:1281", "teal": 5738}, {"pc": [5327], "source": "contracts/NFDInstance.algo.ts:1277", "teal": 5739}, {"pc": [5328, 5329, 5330], "source": "contracts/NFDInstance.algo.ts:1284", "teal": 5743}, {"pc": [5331, 5332, 5333], "source": "contracts/NFDInstance.algo.ts:1285", "teal": 5748}, {"pc": [5334, 5335], "source": "contracts/NFDInstance.algo.ts:1285", "teal": 5749}, {"pc": [5336], "source": "contracts/NFDInstance.algo.ts:1285", "teal": 5750}, {"pc": [5337], "source": "contracts/NFDInstance.algo.ts:1285", "teal": 5751}, {"pc": [5338], "source": "contracts/NFDInstance.algo.ts:1285", "teal": 5752}, {"pc": [5339], "source": "contracts/NFDInstance.algo.ts:1285", "teal": 5753}, {"pc": [5340, 5341, 5342], "source": "contracts/NFDInstance.algo.ts:1285", "teal": 5754}, {"pc": [5343], "source": "contracts/NFDInstance.algo.ts:1286", "teal": 5759}, {"pc": [5344], "source": "contracts/NFDInstance.algo.ts:1286", "teal": 5760}, {"pc": [5345, 5346], "source": "contracts/NFDInstance.algo.ts:1288", "teal": 5765}, {"pc": [5347], "source": "contracts/NFDInstance.algo.ts:1288", "teal": 5766}, {"pc": [5348], "source": "contracts/NFDInstance.algo.ts:1288", "teal": 5767}, {"pc": [5349], "source": "contracts/NFDInstance.algo.ts:1284", "teal": 5768}, {"pc": [5350, 5351, 5352], "source": "contracts/NFDInstance.algo.ts:1291", "teal": 5772}, {"pc": [5353, 5354], "source": "contracts/NFDInstance.algo.ts:1294", "teal": 5776}, {"pc": [5355, 5356], "source": "contracts/NFDInstance.algo.ts:1294", "teal": 5777}, {"pc": [5357, 5358], "source": "contracts/NFDInstance.algo.ts:1294", "teal": 5778}, {"pc": [5359], "source": "contracts/NFDInstance.algo.ts:1294", "teal": 5779}, {"pc": [5360], "source": "contracts/NFDInstance.algo.ts:1294", "teal": 5780}, {"pc": [5361], "source": "contracts/NFDInstance.algo.ts:1294", "teal": 5781}, {"pc": [5362], "source": "contracts/NFDInstance.algo.ts:1291", "teal": 5782}, {"pc": [5363, 5364, 5365], "source": "contracts/NFDInstance.algo.ts:1310", "teal": 5786}, {"pc": [5366], "source": "contracts/NFDInstance.algo.ts:1310", "teal": 5789}, {"pc": [5367, 5368], "source": "contracts/NFDInstance.algo.ts:1312", "teal": 5793}, {"pc": [5369, 5370, 5371], "source": "contracts/NFDInstance.algo.ts:1312", "teal": 5794}, {"pc": [5372, 5373], "source": "contracts/NFDInstance.algo.ts:1312", "teal": 5795}, {"pc": [5374, 5375], "source": "contracts/NFDInstance.algo.ts:1314", "teal": 5799}, {"pc": [5376, 5377, 5378], "source": "contracts/NFDInstance.algo.ts:1314", "teal": 5800}, {"pc": [5379], "source": "contracts/NFDInstance.algo.ts:1314", "teal": 5801}, {"pc": [5380], "errorMessage": "internal fields can never be deleted", "source": "contracts/NFDInstance.algo.ts:1314", "teal": 5804}, {"pc": [5381, 5382], "source": "contracts/NFDInstance.algo.ts:1317", "teal": 5809}, {"pc": [5383, 5384, 5385], "source": "contracts/NFDInstance.algo.ts:1317", "teal": 5810}, {"pc": [5386], "source": "contracts/NFDInstance.algo.ts:1318", "teal": 5815}, {"pc": [5387, 5388, 5389], "source": "contracts/NFDInstance.algo.ts:1318", "teal": 5816}, {"pc": [5390], "source": "contracts/NFDInstance.algo.ts:1321", "teal": 5821}, {"pc": [5391, 5392, 5393], "source": "contracts/NFDInstance.algo.ts:1321", "teal": 5822}, {"pc": [5394], "source": "contracts/NFDInstance.algo.ts:1321", "teal": 5823}, {"pc": [5395], "source": "contracts/NFDInstance.algo.ts:1321", "teal": 5824}, {"pc": [5396], "source": "contracts/NFDInstance.algo.ts:1321", "teal": 5825}, {"pc": [5397], "errorMessage": "must be owned", "source": "contracts/NFDInstance.algo.ts:1321", "teal": 5828}, {"pc": [5398, 5399, 5400], "source": "contracts/NFDInstance.algo.ts:1323", "teal": 5833}, {"pc": [5401], "source": "contracts/NFDInstance.algo.ts:1323", "teal": 5834}, {"pc": [5402, 5403, 5404], "source": "contracts/NFDInstance.algo.ts:1323", "teal": 5835}, {"pc": [5405, 5406, 5407], "source": "contracts/NFDInstance.algo.ts:1324", "teal": 5840}, {"pc": [5408], "source": "contracts/NFDInstance.algo.ts:1324", "teal": 5841}, {"pc": [5409], "errorMessage": "can't be for sale", "source": "contracts/NFDInstance.algo.ts:1324", "teal": 5844}, {"pc": [5410, 5411, 5412], "source": "contracts/NFDInstance.algo.ts:1325", "teal": 5848}, {"pc": [5413, 5414], "source": "contracts/NFDInstance.algo.ts:1328", "teal": 5854}, {"pc": [5415, 5416, 5417], "source": "contracts/NFDInstance.algo.ts:1328", "teal": 5855}, {"pc": [5418, 5419, 5420], "source": "contracts/NFDInstance.algo.ts:1328", "teal": 5856}, {"pc": [5421], "source": "contracts/NFDInstance.algo.ts:1329", "teal": 5861}, {"pc": [5422, 5423, 5424], "source": "contracts/NFDInstance.algo.ts:1329", "teal": 5862}, {"pc": [5425, 5426], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5867}, {"pc": [5427, 5428, 5429], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5868}, {"pc": [5430], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5869}, {"pc": [5431, 5432, 5433], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5870}, {"pc": [5434, 5435], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5871}, {"pc": [5436, 5437, 5438], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5872}, {"pc": [5439, 5440], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5873}, {"pc": [5441], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5874}, {"pc": [5442], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5875}, {"pc": [5443], "source": "contracts/NFDInstance.algo.ts:1332", "teal": 5876}, {"pc": [5444, 5445], "source": "contracts/NFDInstance.algo.ts:1310", "teal": 5882}, {"pc": [5446], "source": "contracts/NFDInstance.algo.ts:1310", "teal": 5883}, {"pc": [5447, 5448, 5449], "source": "contracts/NFDInstance.algo.ts:1346", "teal": 5887}, {"pc": [5450], "source": "contracts/NFDInstance.algo.ts:1346", "teal": 5890}, {"pc": [5451, 5452], "source": "contracts/NFDInstance.algo.ts:1346", "teal": 5891}, {"pc": [5453, 5454], "source": "contracts/NFDInstance.algo.ts:1348", "teal": 5895}, {"pc": [5455, 5456, 5457], "source": "contracts/NFDInstance.algo.ts:1348", "teal": 5896}, {"pc": [5458, 5459], "source": "contracts/NFDInstance.algo.ts:1348", "teal": 5897}, {"pc": [5460, 5461], "source": "contracts/NFDInstance.algo.ts:1350", "teal": 5901}, {"pc": [5462, 5463, 5464], "source": "contracts/NFDInstance.algo.ts:1350", "teal": 5902}, {"pc": [5465], "source": "contracts/NFDInstance.algo.ts:1350", "teal": 5903}, {"pc": [5466], "errorMessage": "internal fields can never be updated", "source": "contracts/NFDInstance.algo.ts:1350", "teal": 5906}, {"pc": [5467, 5468], "source": "contracts/NFDInstance.algo.ts:1351", "teal": 5910}, {"pc": [5469, 5470, 5471], "source": "contracts/NFDInstance.algo.ts:1351", "teal": 5911}, {"pc": [5472, 5473], "source": "contracts/NFDInstance.algo.ts:1351", "teal": 5912}, {"pc": [5474, 5475], "source": "contracts/NFDInstance.algo.ts:1352", "teal": 5916}, {"pc": [5476, 5477, 5478], "source": "contracts/NFDInstance.algo.ts:1352", "teal": 5917}, {"pc": [5479, 5480], "source": "contracts/NFDInstance.algo.ts:1352", "teal": 5918}, {"pc": [5481, 5482], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5923}, {"pc": [5483], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5924}, {"pc": [5484, 5485, 5486], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5925}, {"pc": [5487, 5488], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5926}, {"pc": [5489], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5927}, {"pc": [5490, 5491, 5492], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5928}, {"pc": [5493, 5494], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5929}, {"pc": [5495], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5930}, {"pc": [5496, 5497, 5498], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5931}, {"pc": [5499, 5500], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5932}, {"pc": [5501], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5933}, {"pc": [5502], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5934}, {"pc": [5503], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5935}, {"pc": [5504], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5936}, {"pc": [5505], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5939}, {"pc": [5506], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5942}, {"pc": [5507, 5508, 5509], "source": "contracts/NFDInstance.algo.ts:1354", "teal": 5945}, {"pc": [5510], "source": "contracts/NFDInstance.algo.ts:1355", "teal": 5950}, {"pc": [5511, 5512, 5513], "source": "contracts/NFDInstance.algo.ts:1355", "teal": 5951}, {"pc": [5514], "source": "contracts/NFDInstance.algo.ts:1358", "teal": 5956}, {"pc": [5515, 5516, 5517], "source": "contracts/NFDInstance.algo.ts:1358", "teal": 5957}, {"pc": [5518], "source": "contracts/NFDInstance.algo.ts:1358", "teal": 5958}, {"pc": [5519], "source": "contracts/NFDInstance.algo.ts:1358", "teal": 5959}, {"pc": [5520], "source": "contracts/NFDInstance.algo.ts:1358", "teal": 5960}, {"pc": [5521], "errorMessage": "must be owned", "source": "contracts/NFDInstance.algo.ts:1358", "teal": 5963}, {"pc": [5522, 5523, 5524], "source": "contracts/NFDInstance.algo.ts:1359", "teal": 5967}, {"pc": [5525], "source": "contracts/NFDInstance.algo.ts:1359", "teal": 5968}, {"pc": [5526], "errorMessage": "can't be for sale", "source": "contracts/NFDInstance.algo.ts:1359", "teal": 5971}, {"pc": [5527, 5528], "source": "contracts/NFDInstance.algo.ts:1360", "teal": 5975}, {"pc": [5529], "source": "contracts/NFDInstance.algo.ts:1360", "teal": 5976}, {"pc": [5530], "source": "contracts/NFDInstance.algo.ts:1360", "teal": 5977}, {"pc": [5531], "source": "contracts/NFDInstance.algo.ts:1360", "teal": 5978}, {"pc": [5532], "errorMessage": "sender must be owner", "source": "contracts/NFDInstance.algo.ts:1360", "teal": 5981}, {"pc": [5533, 5534], "source": "contracts/NFDInstance.algo.ts:1362", "teal": 5986}, {"pc": [5535, 5536, 5537], "source": "contracts/NFDInstance.algo.ts:1362", "teal": 5987}, {"pc": [5538], "source": "contracts/NFDInstance.algo.ts:1363", "teal": 5992}, {"pc": [5539, 5540, 5541], "source": "contracts/NFDInstance.algo.ts:1363", "teal": 5993}, {"pc": [5542, 5543], "source": "contracts/NFDInstance.algo.ts:1366", "teal": 5999}, {"pc": [5544], "source": "contracts/NFDInstance.algo.ts:1366", "teal": 6000}, {"pc": [5545, 5546], "source": "contracts/NFDInstance.algo.ts:1366", "teal": 6001}, {"pc": [5547], "source": "contracts/NFDInstance.algo.ts:1366", "teal": 6002}, {"pc": [5548, 5549, 5550], "source": "contracts/NFDInstance.algo.ts:1366", "teal": 6003}, {"pc": [5551, 5552], "source": "contracts/NFDInstance.algo.ts:1367", "teal": 6009}, {"pc": [5553, 5554, 5555], "source": "contracts/NFDInstance.algo.ts:1367", "teal": 6010}, {"pc": [5556, 5557], "source": "contracts/NFDInstance.algo.ts:1367", "teal": 6011}, {"pc": [5558], "source": "contracts/NFDInstance.algo.ts:1367", "teal": 6012}, {"pc": [5559, 5560, 5561], "source": "contracts/NFDInstance.algo.ts:1367", "teal": 6013}, {"pc": [5562], "errorMessage": "updating v.caAlgo field isn't allowed via regular field update", "source": "contracts/NFDInstance.algo.ts:1368", "teal": 6017}, {"pc": [5563, 5564], "source": "contracts/NFDInstance.algo.ts:1372", "teal": 6024}, {"pc": [5565], "source": "contracts/NFDInstance.algo.ts:1372", "teal": 6025}, {"pc": [5566, 5567, 5568], "source": "contracts/NFDInstance.algo.ts:1372", "teal": 6026}, {"pc": [5569, 5570], "source": "contracts/NFDInstance.algo.ts:1372", "teal": 6027}, {"pc": [5571], "source": "contracts/NFDInstance.algo.ts:1372", "teal": 6028}, {"pc": [5572], "source": "contracts/NFDInstance.algo.ts:1372", "teal": 6029}, {"pc": [5573], "source": "contracts/NFDInstance.algo.ts:1372", "teal": 6030}, {"pc": [5574], "source": "contracts/NFDInstance.algo.ts:1372", "teal": 6031}, {"pc": [5575, 5576], "source": "contracts/NFDInstance.algo.ts:1346", "teal": 6037}, {"pc": [5577, 5578], "source": "contracts/NFDInstance.algo.ts:1346", "teal": 6040}, {"pc": [5579], "source": "contracts/NFDInstance.algo.ts:1346", "teal": 6041}, {"pc": [5580, 5581, 5582], "source": "contracts/NFDInstance.algo.ts:1376", "teal": 6045}, {"pc": [5583, 5584], "source": "contracts/NFDInstance.algo.ts:1377", "teal": 6049}, {"pc": [5585, 5586, 5587, 5588], "source": "contracts/NFDInstance.algo.ts:1377", "teal": 6050}, {"pc": [5589], "source": "contracts/NFDInstance.algo.ts:1377", "teal": 6051}, {"pc": [5590], "source": "contracts/NFDInstance.algo.ts:1376", "teal": 6052}, {"pc": [5591, 5592, 5593], "source": "contracts/NFDInstance.algo.ts:1381", "teal": 6056}, {"pc": [5594, 5595], "source": "contracts/NFDInstance.algo.ts:1382", "teal": 6060}, {"pc": [5596, 5597, 5598, 5599], "source": "contracts/NFDInstance.algo.ts:1382", "teal": 6061}, {"pc": [5600], "source": "contracts/NFDInstance.algo.ts:1382", "teal": 6062}, {"pc": [5601], "source": "contracts/NFDInstance.algo.ts:1381", "teal": 6063}, {"pc": [5602, 5603, 5604], "source": "contracts/NFDInstance.algo.ts:1386", "teal": 6067}, {"pc": [5605, 5606], "source": "contracts/NFDInstance.algo.ts:1387", "teal": 6071}, {"pc": [5607, 5608, 5609, 5610], "source": "contracts/NFDInstance.algo.ts:1387", "teal": 6072}, {"pc": [5611], "source": "contracts/NFDInstance.algo.ts:1387", "teal": 6073}, {"pc": [5612], "source": "contracts/NFDInstance.algo.ts:1386", "teal": 6074}, {"pc": [5613, 5614, 5615], "source": "contracts/NFDInstance.algo.ts:1390", "teal": 6078}, {"pc": [5616, 5617], "source": "contracts/NFDInstance.algo.ts:1391", "teal": 6082}, {"pc": [5618, 5619, 5620], "source": "contracts/NFDInstance.algo.ts:1391", "teal": 6083}, {"pc": [5621], "source": "contracts/NFDInstance.algo.ts:1391", "teal": 6084}, {"pc": [5622], "source": "contracts/NFDInstance.algo.ts:1391", "teal": 6085}, {"pc": [5623], "source": "contracts/NFDInstance.algo.ts:1390", "teal": 6086}, {"pc": [5624, 5625, 5626], "source": "contracts/NFDInstance.algo.ts:1395", "teal": 6090}, {"pc": [5627], "source": "contracts/NFDInstance.algo.ts:1395", "teal": 6093}, {"pc": [5628, 5629], "source": "contracts/NFDInstance.algo.ts:1396", "teal": 6097}, {"pc": [5630, 5631, 5632], "source": "contracts/NFDInstance.algo.ts:1396", "teal": 6098}, {"pc": [5633, 5634], "source": "contracts/NFDInstance.algo.ts:1396", "teal": 6099}, {"pc": [5635, 5636], "source": "contracts/NFDInstance.algo.ts:1397", "teal": 6104}, {"pc": [5637], "source": "contracts/NFDInstance.algo.ts:1397", "teal": 6105}, {"pc": [5638], "source": "contracts/NFDInstance.algo.ts:1397", "teal": 6106}, {"pc": [5639, 5640, 5641], "source": "contracts/NFDInstance.algo.ts:1397", "teal": 6107}, {"pc": [5642], "source": "contracts/NFDInstance.algo.ts:1399", "teal": 6112}, {"pc": [5643, 5644, 5645], "source": "contracts/NFDInstance.algo.ts:1399", "teal": 6113}, {"pc": [5646, 5647], "source": "contracts/NFDInstance.algo.ts:1401", "teal": 6118}, {"pc": [5648, 5649], "source": "contracts/NFDInstance.algo.ts:1401", "teal": 6119}, {"pc": [5650], "source": "contracts/NFDInstance.algo.ts:1401", "teal": 6120}, {"pc": [5651, 5652], "source": "contracts/NFDInstance.algo.ts:1395", "teal": 6124}, {"pc": [5653], "source": "contracts/NFDInstance.algo.ts:1395", "teal": 6125}, {"pc": [5654, 5655, 5656], "source": "contracts/NFDInstance.algo.ts:1409", "teal": 6129}, {"pc": [5657, 5658], "source": "contracts/NFDInstance.algo.ts:1410", "teal": 6133}, {"pc": [5659, 5660, 5661], "source": "contracts/NFDInstance.algo.ts:1410", "teal": 6134}, {"pc": [5662, 5663], "source": "contracts/NFDInstance.algo.ts:1410", "teal": 6135}, {"pc": [5664], "source": "contracts/NFDInstance.algo.ts:1410", "teal": 6136}, {"pc": [5665], "source": "contracts/NFDInstance.algo.ts:1409", "teal": 6137}, {"pc": [5666, 5667, 5668], "source": "contracts/NFDInstance.algo.ts:1413", "teal": 6141}, {"pc": [5669, 5670, 5671], "source": "contracts/NFDInstance.algo.ts:1414", "teal": 6145}, {"pc": [5672, 5673, 5674], "source": "contracts/NFDInstance.algo.ts:1415", "teal": 6149}, {"pc": [5675], "source": "contracts/NFDInstance.algo.ts:1413", "teal": 6150}, {"pc": [5676, 5677, 5678], "source": "contracts/NFDInstance.algo.ts:1418", "teal": 6154}, {"pc": [5679, 5680, 5681], "source": "contracts/NFDInstance.algo.ts:1419", "teal": 6158}, {"pc": [5682], "source": "contracts/NFDInstance.algo.ts:1419", "teal": 6159}, {"pc": [5683], "errorMessage": "can't be for sale", "source": "contracts/NFDInstance.algo.ts:1419", "teal": 6162}, {"pc": [5684, 5685, 5686], "source": "contracts/NFDInstance.algo.ts:1420", "teal": 6166}, {"pc": [5687], "source": "contracts/NFDInstance.algo.ts:1420", "teal": 6167}, {"pc": [5688], "errorMessage": "can't be expired", "source": "contracts/NFDInstance.algo.ts:1420", "teal": 6170}, {"pc": [5689], "source": "contracts/NFDInstance.algo.ts:1418", "teal": 6171}, {"pc": [5690, 5691, 5692], "source": "contracts/NFDInstance.algo.ts:1424", "teal": 6175}, {"pc": [5693], "source": "contracts/NFDInstance.algo.ts:1424", "teal": 6178}, {"pc": [5694], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6182}, {"pc": [5695, 5696], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6183}, {"pc": [5697, 5698], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6188}, {"pc": [5699, 5700], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6189}, {"pc": [5701], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6190}, {"pc": [5702, 5703, 5704], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6191}, {"pc": [5705, 5706], "source": "contracts/NFDInstance.algo.ts:1426", "teal": 6196}, {"pc": [5707, 5708], "source": "contracts/NFDInstance.algo.ts:1426", "teal": 6197}, {"pc": [5709], "source": "contracts/NFDInstance.algo.ts:1426", "teal": 6198}, {"pc": [5710], "source": "contracts/NFDInstance.algo.ts:1426", "teal": 6199}, {"pc": [5711, 5712], "source": "contracts/NFDInstance.algo.ts:1426", "teal": 6200}, {"pc": [5713], "source": "contracts/NFDInstance.algo.ts:1426", "teal": 6201}, {"pc": [5714, 5715, 5716], "source": "contracts/NFDInstance.algo.ts:1426", "teal": 6202}, {"pc": [5717], "source": "contracts/NFDInstance.algo.ts:1427", "teal": 6207}, {"pc": [5718, 5719, 5720], "source": "contracts/NFDInstance.algo.ts:1427", "teal": 6208}, {"pc": [5721, 5722], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6215}, {"pc": [5723], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6216}, {"pc": [5724], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6217}, {"pc": [5725, 5726], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6218}, {"pc": [5727, 5728, 5729], "source": "contracts/NFDInstance.algo.ts:1425", "teal": 6219}, {"pc": [5730], "source": "contracts/NFDInstance.algo.ts:1430", "teal": 6224}, {"pc": [5731, 5732], "source": "contracts/NFDInstance.algo.ts:1424", "teal": 6228}, {"pc": [5733], "source": "contracts/NFDInstance.algo.ts:1424", "teal": 6229}, {"pc": [5734, 5735, 5736], "source": "contracts/NFDInstance.algo.ts:1443", "teal": 6242}, {"pc": [5737], "source": "contracts/NFDInstance.algo.ts:1443", "teal": 6245}, {"pc": [5738], "source": "contracts/NFDInstance.algo.ts:1443", "teal": 6246}, {"pc": [5739, 5740], "source": "contracts/NFDInstance.algo.ts:1444", "teal": 6250}, {"pc": [5741, 5742], "source": "contracts/NFDInstance.algo.ts:1444", "teal": 6251}, {"pc": [5743], "source": "contracts/NFDInstance.algo.ts:1444", "teal": 6252}, {"pc": [5744, 5745], "source": "contracts/config.algo.ts:5", "teal": 6253}, {"pc": [5746], "source": "contracts/NFDInstance.algo.ts:1444", "teal": 6254}, {"pc": [5747, 5748], "source": "contracts/NFDInstance.algo.ts:1444", "teal": 6255}, {"pc": [5749], "source": "contracts/NFDInstance.algo.ts:1444", "teal": 6256}, {"pc": [5750, 5751], "source": "contracts/NFDInstance.algo.ts:1444", "teal": 6257}, {"pc": [5752, 5753], "source": "contracts/NFDInstance.algo.ts:1445", "teal": 6261}, {"pc": [5754, 5755], "source": "contracts/NFDInstance.algo.ts:1445", "teal": 6262}, {"pc": [5756], "source": "contracts/NFDInstance.algo.ts:1445", "teal": 6263}, {"pc": [5757, 5758], "source": "contracts/NFDInstance.algo.ts:1445", "teal": 6264}, {"pc": [5759, 5760], "source": "contracts/NFDInstance.algo.ts:1448", "teal": 6271}, {"pc": [5761, 5762], "source": "contracts/NFDInstance.algo.ts:1448", "teal": 6272}, {"pc": [5763, 5764], "source": "contracts/NFDInstance.algo.ts:1448", "teal": 6273}, {"pc": [5765, 5766], "source": "contracts/NFDInstance.algo.ts:1448", "teal": 6274}, {"pc": [5767], "source": "contracts/NFDInstance.algo.ts:1448", "teal": 6275}, {"pc": [5768, 5769], "source": "contracts/config.algo.ts:5", "teal": 6276}, {"pc": [5770], "source": "contracts/NFDInstance.algo.ts:1448", "teal": 6277}, {"pc": [5771], "source": "contracts/NFDInstance.algo.ts:1448", "teal": 6278}, {"pc": [5772], "source": "contracts/NFDInstance.algo.ts:1448", "teal": 6279}, {"pc": [5773], "errorMessage": "max expiration exceeded parameters defined by registry", "source": "contracts/NFDInstance.algo.ts:1447", "teal": 6282}, {"pc": [5774, 5775], "source": "contracts/NFDInstance.algo.ts:1451", "teal": 6286}, {"pc": [5776, 5777], "source": "contracts/NFDInstance.algo.ts:1443", "teal": 6289}, {"pc": [5778, 5779], "source": "contracts/NFDInstance.algo.ts:1443", "teal": 6292}, {"pc": [5780], "source": "contracts/NFDInstance.algo.ts:1443", "teal": 6293}, {"pc": [5781, 5782, 5783], "source": "contracts/NFDInstance.algo.ts:1454", "teal": 6297}, {"pc": [5784], "source": "contracts/NFDInstance.algo.ts:1454", "teal": 6300}, {"pc": [5785], "source": "contracts/NFDInstance.algo.ts:1454", "teal": 6301}, {"pc": [5786, 5787], "source": "contracts/NFDInstance.algo.ts:1455", "teal": 6305}, {"pc": [5788, 5789], "source": "contracts/NFDInstance.algo.ts:1455", "teal": 6306}, {"pc": [5790], "source": "contracts/NFDInstance.algo.ts:1455", "teal": 6307}, {"pc": [5791, 5792], "source": "contracts/NFDInstance.algo.ts:1455", "teal": 6308}, {"pc": [5793, 5794], "source": "contracts/NFDInstance.algo.ts:1455", "teal": 6309}, {"pc": [5795, 5796], "source": "contracts/NFDInstance.algo.ts:1456", "teal": 6313}, {"pc": [5797, 5798], "source": "contracts/NFDInstance.algo.ts:1454", "teal": 6316}, {"pc": [5799, 5800], "source": "contracts/NFDInstance.algo.ts:1454", "teal": 6319}, {"pc": [5801], "source": "contracts/NFDInstance.algo.ts:1454", "teal": 6320}, {"pc": [5802, 5803, 5804], "source": "contracts/NFDInstance.algo.ts:1459", "teal": 6324}, {"pc": [5805], "source": "contracts/NFDInstance.algo.ts:1459", "teal": 6327}, {"pc": [5806], "source": "contracts/NFDInstance.algo.ts:1459", "teal": 6328}, {"pc": [5807, 5808], "source": "contracts/NFDInstance.algo.ts:1462", "teal": 6332}, {"pc": [5809, 5810], "source": "contracts/NFDInstance.algo.ts:1462", "teal": 6333}, {"pc": [5811], "source": "contracts/NFDInstance.algo.ts:1462", "teal": 6334}, {"pc": [5812], "source": "contracts/NFDInstance.algo.ts:1462", "teal": 6335}, {"pc": [5813, 5814], "source": "contracts/NFDInstance.algo.ts:1462", "teal": 6336}, {"pc": [5815], "source": "contracts/NFDInstance.algo.ts:1462", "teal": 6337}, {"pc": [5816, 5817], "source": "contracts/NFDInstance.algo.ts:1462", "teal": 6338}, {"pc": [5818, 5819], "source": "contracts/NFDInstance.algo.ts:1464", "teal": 6343}, {"pc": [5820], "source": "contracts/NFDInstance.algo.ts:1464", "teal": 6344}, {"pc": [5821], "source": "contracts/NFDInstance.algo.ts:1464", "teal": 6345}, {"pc": [5822, 5823, 5824], "source": "contracts/NFDInstance.algo.ts:1464", "teal": 6346}, {"pc": [5825, 5826], "source": "contracts/NFDInstance.algo.ts:1465", "teal": 6351}, {"pc": [5827, 5828], "source": "contracts/NFDInstance.algo.ts:1465", "teal": 6352}, {"pc": [5829, 5830, 5831], "source": "contracts/NFDInstance.algo.ts:1464", "teal": 6353}, {"pc": [5832, 5833], "source": "contracts/NFDInstance.algo.ts:1468", "teal": 6358}, {"pc": [5834, 5835], "source": "contracts/NFDInstance.algo.ts:1468", "teal": 6359}, {"pc": [5836, 5837], "source": "contracts/NFDInstance.algo.ts:1470", "teal": 6365}, {"pc": [5838, 5839], "source": "contracts/NFDInstance.algo.ts:1470", "teal": 6366}, {"pc": [5840], "source": "contracts/NFDInstance.algo.ts:1470", "teal": 6367}, {"pc": [5841, 5842, 5843], "source": "contracts/NFDInstance.algo.ts:1470", "teal": 6368}, {"pc": [5844], "source": "contracts/NFDInstance.algo.ts:1471", "teal": 6373}, {"pc": [5845], "source": "contracts/NFDInstance.algo.ts:1473", "teal": 6384}, {"pc": [5846, 5847], "source": "contracts/NFDInstance.algo.ts:1473", "teal": 6385}, {"pc": [5848, 5849], "source": "contracts/NFDInstance.algo.ts:1473", "teal": 6386}, {"pc": [5850, 5851], "source": "contracts/NFDInstance.algo.ts:1474", "teal": 6390}, {"pc": [5852], "source": "contracts/NFDInstance.algo.ts:1474", "teal": 6391}, {"pc": [5853], "source": "contracts/NFDInstance.algo.ts:1474", "teal": 6392}, {"pc": [5854, 5855], "source": "contracts/NFDInstance.algo.ts:1474", "teal": 6393}, {"pc": [5856], "source": "contracts/NFDInstance.algo.ts:1475", "teal": 6397}, {"pc": [5857, 5858], "source": "contracts/NFDInstance.algo.ts:1475", "teal": 6398}, {"pc": [5859, 5860], "source": "contracts/NFDInstance.algo.ts:1476", "teal": 6402}, {"pc": [5861, 5862], "source": "contracts/NFDInstance.algo.ts:1476", "teal": 6403}, {"pc": [5863, 5864], "source": "contracts/NFDInstance.algo.ts:1477", "teal": 6407}, {"pc": [5865, 5866], "source": "contracts/NFDInstance.algo.ts:1477", "teal": 6408}, {"pc": [5867, 5868], "source": "contracts/NFDInstance.algo.ts:1478", "teal": 6412}, {"pc": [5869, 5870], "source": "contracts/NFDInstance.algo.ts:1478", "teal": 6413}, {"pc": [5871], "source": "contracts/NFDInstance.algo.ts:1473", "teal": 6416}, {"pc": [5872, 5873], "source": "contracts/NFDInstance.algo.ts:1473", "teal": 6417}, {"pc": [5874], "source": "contracts/NFDInstance.algo.ts:1473", "teal": 6420}, {"pc": [5875], "source": "contracts/NFDInstance.algo.ts:1459", "teal": 6421}, {"pc": [5876, 5877, 5878], "source": "contracts/NFDInstance.algo.ts:1489", "teal": 6431}, {"pc": [5879], "source": "contracts/NFDInstance.algo.ts:1489", "teal": 6434}, {"pc": [5880], "source": "contracts/NFDInstance.algo.ts:1489", "teal": 6435}, {"pc": [5881, 5882], "source": "contracts/NFDInstance.algo.ts:1490", "teal": 6439}, {"pc": [5883], "source": "contracts/NFDInstance.algo.ts:1490", "teal": 6440}, {"pc": [5884], "source": "contracts/NFDInstance.algo.ts:1490", "teal": 6441}, {"pc": [5885], "source": "contracts/NFDInstance.algo.ts:1490", "teal": 6442}, {"pc": [5886, 5887], "source": "contracts/NFDInstance.algo.ts:1490", "teal": 6443}, {"pc": [5888], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6447}, {"pc": [5889, 5890], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6448}, {"pc": [5891, 5892], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6453}, {"pc": [5893, 5894], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6454}, {"pc": [5895], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6455}, {"pc": [5896, 5897, 5898], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6456}, {"pc": [5899, 5900], "source": "contracts/NFDInstance.algo.ts:1492", "teal": 6461}, {"pc": [5901, 5902], "source": "contracts/NFDInstance.algo.ts:1492", "teal": 6462}, {"pc": [5903], "source": "contracts/NFDInstance.algo.ts:1492", "teal": 6463}, {"pc": [5904], "source": "contracts/NFDInstance.algo.ts:1492", "teal": 6464}, {"pc": [5905], "source": "contracts/NFDInstance.algo.ts:1492", "teal": 6465}, {"pc": [5906], "source": "contracts/NFDInstance.algo.ts:1492", "teal": 6466}, {"pc": [5907, 5908], "source": "contracts/NFDInstance.algo.ts:1492", "teal": 6467}, {"pc": [5909], "source": "contracts/NFDInstance.algo.ts:1492", "teal": 6468}, {"pc": [5910, 5911, 5912], "source": "contracts/NFDInstance.algo.ts:1492", "teal": 6469}, {"pc": [5913], "source": "contracts/NFDInstance.algo.ts:1493", "teal": 6474}, {"pc": [5914, 5915, 5916], "source": "contracts/NFDInstance.algo.ts:1493", "teal": 6475}, {"pc": [5917, 5918], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6482}, {"pc": [5919], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6483}, {"pc": [5920], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6484}, {"pc": [5921, 5922], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6485}, {"pc": [5923, 5924, 5925], "source": "contracts/NFDInstance.algo.ts:1491", "teal": 6486}, {"pc": [5926], "source": "contracts/NFDInstance.algo.ts:1496", "teal": 6491}, {"pc": [5927, 5928], "source": "contracts/NFDInstance.algo.ts:1489", "teal": 6495}, {"pc": [5929, 5930], "source": "contracts/NFDInstance.algo.ts:1489", "teal": 6498}, {"pc": [5931], "source": "contracts/NFDInstance.algo.ts:1489", "teal": 6499}, {"pc": [5932, 5933, 5934], "source": "contracts/NFDInstance.algo.ts:1500", "teal": 6503}, {"pc": [5935], "source": "contracts/NFDInstance.algo.ts:1500", "teal": 6506}, {"pc": [5936, 5937], "source": "contracts/NFDInstance.algo.ts:1500", "teal": 6507}, {"pc": [5938, 5939], "source": "contracts/NFDInstance.algo.ts:1501", "teal": 6511}, {"pc": [5940], "source": "contracts/NFDInstance.algo.ts:1501", "teal": 6512}, {"pc": [5941], "errorMessage": "box value does not exist: this.boxes(key).value", "source": "contracts/NFDInstance.algo.ts:1501", "teal": 6515}, {"pc": [5942, 5943], "source": "contracts/NFDInstance.algo.ts:1501", "teal": 6516}, {"pc": [5944, 5945], "source": "contracts/NFDInstance.algo.ts:1503", "teal": 6520}, {"pc": [5946, 5947], "source": "contracts/NFDInstance.algo.ts:1503", "teal": 6521}, {"pc": [5948], "source": "contracts/NFDInstance.algo.ts:1503", "teal": 6522}, {"pc": [5949], "source": "contracts/NFDInstance.algo.ts:1503", "teal": 6523}, {"pc": [5950, 5951], "source": "contracts/NFDInstance.algo.ts:1505", "teal": 6527}, {"pc": [5952], "source": "contracts/NFDInstance.algo.ts:1505", "teal": 6528}, {"pc": [5953, 5954], "source": "contracts/NFDInstance.algo.ts:1505", "teal": 6529}, {"pc": [5955], "source": "contracts/NFDInstance.algo.ts:1505", "teal": 6530}, {"pc": [5956], "errorMessage": "address 'set' should already have at least two values", "source": "contracts/NFDInstance.algo.ts:1505", "teal": 6533}, {"pc": [5957, 5958], "source": "contracts/NFDInstance.algo.ts:1508", "teal": 6538}, {"pc": [5959, 5960, 5961], "source": "contracts/NFDInstance.algo.ts:1508", "teal": 6539}, {"pc": [5962, 5963], "source": "contracts/NFDInstance.algo.ts:1508", "teal": 6540}, {"pc": [5964], "source": "contracts/NFDInstance.algo.ts:1508", "teal": 6541}, {"pc": [5965, 5966, 5967], "source": "contracts/NFDInstance.algo.ts:1508", "teal": 6542}, {"pc": [5968], "source": "contracts/NFDInstance.algo.ts:1509", "teal": 6547}, {"pc": [5969, 5970], "source": "contracts/NFDInstance.algo.ts:1512", "teal": 6552}, {"pc": [5971], "source": "contracts/NFDInstance.algo.ts:1512", "teal": 6553}, {"pc": [5972], "source": "contracts/NFDInstance.algo.ts:1512", "teal": 6554}, {"pc": [5973], "source": "contracts/NFDInstance.algo.ts:1512", "teal": 6555}, {"pc": [5974, 5975], "source": "contracts/NFDInstance.algo.ts:1512", "teal": 6556}, {"pc": [5976], "source": "contracts/NFDInstance.algo.ts:1513", "teal": 6560}, {"pc": [5977, 5978], "source": "contracts/NFDInstance.algo.ts:1513", "teal": 6561}, {"pc": [5979], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6565}, {"pc": [5980, 5981], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6566}, {"pc": [5982, 5983], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6571}, {"pc": [5984, 5985], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6572}, {"pc": [5986], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6573}, {"pc": [5987, 5988, 5989], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6574}, {"pc": [5990, 5991], "source": "contracts/NFDInstance.algo.ts:1516", "teal": 6579}, {"pc": [5992, 5993], "source": "contracts/NFDInstance.algo.ts:1516", "teal": 6580}, {"pc": [5994], "source": "contracts/NFDInstance.algo.ts:1516", "teal": 6581}, {"pc": [5995], "source": "contracts/NFDInstance.algo.ts:1516", "teal": 6582}, {"pc": [5996], "source": "contracts/NFDInstance.algo.ts:1516", "teal": 6583}, {"pc": [5997], "source": "contracts/NFDInstance.algo.ts:1516", "teal": 6584}, {"pc": [5998, 5999], "source": "contracts/NFDInstance.algo.ts:1516", "teal": 6585}, {"pc": [6000], "source": "contracts/NFDInstance.algo.ts:1516", "teal": 6586}, {"pc": [6001, 6002, 6003], "source": "contracts/NFDInstance.algo.ts:1516", "teal": 6587}, {"pc": [6004, 6005], "source": "contracts/NFDInstance.algo.ts:1517", "teal": 6592}, {"pc": [6006, 6007], "source": "contracts/NFDInstance.algo.ts:1517", "teal": 6593}, {"pc": [6008, 6009, 6010], "source": "contracts/NFDInstance.algo.ts:1518", "teal": 6594}, {"pc": [6011, 6012], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6601}, {"pc": [6013], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6602}, {"pc": [6014], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6603}, {"pc": [6015, 6016], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6604}, {"pc": [6017, 6018, 6019], "source": "contracts/NFDInstance.algo.ts:1515", "teal": 6605}, {"pc": [6020, 6021], "source": "contracts/NFDInstance.algo.ts:1521", "teal": 6610}, {"pc": [6022], "source": "contracts/NFDInstance.algo.ts:1521", "teal": 6611}, {"pc": [6023], "source": "contracts/NFDInstance.algo.ts:1521", "teal": 6612}, {"pc": [6024], "errorMessage": "address must be found in set in order to move it", "source": "contracts/NFDInstance.algo.ts:1521", "teal": 6615}, {"pc": [6025, 6026], "source": "contracts/NFDInstance.algo.ts:1523", "teal": 6619}, {"pc": [6027, 6028, 6029], "source": "contracts/NFDInstance.algo.ts:1523", "teal": 6620}, {"pc": [6030, 6031], "source": "contracts/NFDInstance.algo.ts:1523", "teal": 6621}, {"pc": [6032, 6033], "source": "contracts/NFDInstance.algo.ts:1525", "teal": 6625}, {"pc": [6034], "source": "contracts/NFDInstance.algo.ts:1525", "teal": 6626}, {"pc": [6035, 6036], "source": "contracts/NFDInstance.algo.ts:1525", "teal": 6627}, {"pc": [6037], "source": "contracts/NFDInstance.algo.ts:1525", "teal": 6628}, {"pc": [6038, 6039], "source": "contracts/NFDInstance.algo.ts:1525", "teal": 6629}, {"pc": [6040, 6041], "source": "contracts/NFDInstance.algo.ts:1527", "teal": 6633}, {"pc": [6042, 6043], "source": "contracts/NFDInstance.algo.ts:1527", "teal": 6634}, {"pc": [6044, 6045], "source": "contracts/NFDInstance.algo.ts:1527", "teal": 6635}, {"pc": [6046], "source": "contracts/NFDInstance.algo.ts:1527", "teal": 6636}, {"pc": [6047], "source": "contracts/NFDInstance.algo.ts:1527", "teal": 6637}, {"pc": [6048, 6049], "source": "contracts/NFDInstance.algo.ts:1527", "teal": 6638}, {"pc": [6050], "source": "contracts/NFDInstance.algo.ts:1527", "teal": 6639}, {"pc": [6051], "source": "contracts/NFDInstance.algo.ts:1527", "teal": 6640}, {"pc": [6052], "source": "contracts/NFDInstance.algo.ts:1500", "teal": 6641}, {"pc": [6053, 6054, 6055], "source": "contracts/NFDInstance.algo.ts:1537", "teal": 6651}, {"pc": [6056], "source": "contracts/NFDInstance.algo.ts:1537", "teal": 6654}, {"pc": [6057, 6058], "source": "contracts/NFDInstance.algo.ts:1537", "teal": 6655}, {"pc": [6059, 6060], "source": "contracts/NFDInstance.algo.ts:1538", "teal": 6660}, {"pc": [6061], "source": "contracts/NFDInstance.algo.ts:1538", "teal": 6661}, {"pc": [6062], "source": "contracts/NFDInstance.algo.ts:1538", "teal": 6662}, {"pc": [6063], "source": "contracts/NFDInstance.algo.ts:1538", "teal": 6663}, {"pc": [6064], "source": "contracts/NFDInstance.algo.ts:1538", "teal": 6664}, {"pc": [6065, 6066, 6067], "source": "contracts/NFDInstance.algo.ts:1538", "teal": 6665}, {"pc": [6068, 6069], "source": "contracts/NFDInstance.algo.ts:1540", "teal": 6670}, {"pc": [6070, 6071], "source": "contracts/NFDInstance.algo.ts:1540", "teal": 6671}, {"pc": [6072], "source": "contracts/NFDInstance.algo.ts:1540", "teal": 6672}, {"pc": [6073], "source": "contracts/NFDInstance.algo.ts:1541", "teal": 6676}, {"pc": [6074, 6075, 6076], "source": "contracts/NFDInstance.algo.ts:1541", "teal": 6677}, {"pc": [6077, 6078], "source": "contracts/NFDInstance.algo.ts:1543", "teal": 6682}, {"pc": [6079], "source": "contracts/NFDInstance.algo.ts:1543", "teal": 6683}, {"pc": [6080, 6081], "source": "contracts/NFDInstance.algo.ts:1543", "teal": 6684}, {"pc": [6082, 6083], "source": "contracts/NFDInstance.algo.ts:1544", "teal": 6688}, {"pc": [6084], "source": "contracts/NFDInstance.algo.ts:1544", "teal": 6689}, {"pc": [6085, 6086], "source": "contracts/NFDInstance.algo.ts:1544", "teal": 6690}, {"pc": [6087, 6088], "source": "contracts/NFDInstance.algo.ts:1545", "teal": 6694}, {"pc": [6089], "source": "contracts/NFDInstance.algo.ts:1545", "teal": 6695}, {"pc": [6090], "errorMessage": "box value does not exist: this.boxes(key).value", "source": "contracts/NFDInstance.algo.ts:1545", "teal": 6698}, {"pc": [6091, 6092], "source": "contracts/NFDInstance.algo.ts:1545", "teal": 6699}, {"pc": [6093, 6094], "source": "contracts/NFDInstance.algo.ts:1546", "teal": 6703}, {"pc": [6095], "source": "contracts/NFDInstance.algo.ts:1546", "teal": 6704}, {"pc": [6096, 6097], "source": "contracts/NFDInstance.algo.ts:1546", "teal": 6705}, {"pc": [6098], "source": "contracts/NFDInstance.algo.ts:1546", "teal": 6706}, {"pc": [6099, 6100], "source": "contracts/NFDInstance.algo.ts:1546", "teal": 6707}, {"pc": [6101, 6102], "source": "contracts/NFDInstance.algo.ts:1548", "teal": 6711}, {"pc": [6103], "source": "contracts/NFDInstance.algo.ts:1548", "teal": 6712}, {"pc": [6104, 6105], "source": "contracts/NFDInstance.algo.ts:1548", "teal": 6713}, {"pc": [6106], "source": "contracts/NFDInstance.algo.ts:1548", "teal": 6714}, {"pc": [6107], "source": "contracts/NFDInstance.algo.ts:1548", "teal": 6715}, {"pc": [6108], "source": "contracts/NFDInstance.algo.ts:1548", "teal": 6716}, {"pc": [6109], "errorMessage": "existing set must be multiple of key being added", "source": "contracts/NFDInstance.algo.ts:1548", "teal": 6719}, {"pc": [6110], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6723}, {"pc": [6111, 6112], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6724}, {"pc": [6113, 6114], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6729}, {"pc": [6115, 6116], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6730}, {"pc": [6117], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6731}, {"pc": [6118, 6119, 6120], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6732}, {"pc": [6121, 6122], "source": "contracts/NFDInstance.algo.ts:1550", "teal": 6736}, {"pc": [6123, 6124], "source": "contracts/NFDInstance.algo.ts:1550", "teal": 6737}, {"pc": [6125, 6126], "source": "contracts/NFDInstance.algo.ts:1550", "teal": 6738}, {"pc": [6127], "source": "contracts/NFDInstance.algo.ts:1550", "teal": 6739}, {"pc": [6128, 6129], "source": "contracts/NFDInstance.algo.ts:1550", "teal": 6740}, {"pc": [6130], "source": "contracts/NFDInstance.algo.ts:1550", "teal": 6741}, {"pc": [6131, 6132], "source": "contracts/NFDInstance.algo.ts:1550", "teal": 6742}, {"pc": [6133, 6134], "source": "contracts/NFDInstance.algo.ts:1552", "teal": 6747}, {"pc": [6135, 6136], "source": "contracts/NFDInstance.algo.ts:1552", "teal": 6748}, {"pc": [6137], "source": "contracts/NFDInstance.algo.ts:1552", "teal": 6749}, {"pc": [6138, 6139, 6140], "source": "contracts/NFDInstance.algo.ts:1552", "teal": 6750}, {"pc": [6141, 6142], "source": "contracts/NFDInstance.algo.ts:1554", "teal": 6755}, {"pc": [6143, 6144], "source": "contracts/NFDInstance.algo.ts:1554", "teal": 6756}, {"pc": [6145, 6146], "source": "contracts/NFDInstance.algo.ts:1554", "teal": 6757}, {"pc": [6147], "source": "contracts/NFDInstance.algo.ts:1554", "teal": 6758}, {"pc": [6148, 6149], "source": "contracts/NFDInstance.algo.ts:1554", "teal": 6759}, {"pc": [6150], "source": "contracts/NFDInstance.algo.ts:1554", "teal": 6760}, {"pc": [6151], "source": "contracts/NFDInstance.algo.ts:1555", "teal": 6764}, {"pc": [6152, 6153, 6154], "source": "contracts/NFDInstance.algo.ts:1555", "teal": 6765}, {"pc": [6155, 6156], "source": "contracts/NFDInstance.algo.ts:1557", "teal": 6771}, {"pc": [6157, 6158], "source": "contracts/NFDInstance.algo.ts:1557", "teal": 6772}, {"pc": [6159], "source": "contracts/NFDInstance.algo.ts:1557", "teal": 6773}, {"pc": [6160, 6161, 6162], "source": "contracts/NFDInstance.algo.ts:1557", "teal": 6774}, {"pc": [6163], "source": "contracts/NFDInstance.algo.ts:1558", "teal": 6779}, {"pc": [6164, 6165, 6166], "source": "contracts/NFDInstance.algo.ts:1558", "teal": 6780}, {"pc": [6167, 6168], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6787}, {"pc": [6169], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6788}, {"pc": [6170], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6789}, {"pc": [6171, 6172], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6790}, {"pc": [6173, 6174, 6175], "source": "contracts/NFDInstance.algo.ts:1549", "teal": 6791}, {"pc": [6176, 6177], "source": "contracts/NFDInstance.algo.ts:1562", "teal": 6797}, {"pc": [6178], "source": "contracts/NFDInstance.algo.ts:1562", "teal": 6798}, {"pc": [6179, 6180, 6181], "source": "contracts/NFDInstance.algo.ts:1562", "teal": 6799}, {"pc": [6182], "source": "contracts/NFDInstance.algo.ts:1562", "teal": 6800}, {"pc": [6183, 6184, 6185], "source": "contracts/NFDInstance.algo.ts:1562", "teal": 6801}, {"pc": [6186, 6187], "source": "contracts/NFDInstance.algo.ts:1563", "teal": 6806}, {"pc": [6188], "source": "contracts/NFDInstance.algo.ts:1563", "teal": 6807}, {"pc": [6189, 6190], "source": "contracts/NFDInstance.algo.ts:1564", "teal": 6811}, {"pc": [6191, 6192], "source": "contracts/NFDInstance.algo.ts:1564", "teal": 6812}, {"pc": [6193, 6194], "source": "contracts/NFDInstance.algo.ts:1564", "teal": 6813}, {"pc": [6195], "source": "contracts/NFDInstance.algo.ts:1564", "teal": 6814}, {"pc": [6196], "source": "contracts/NFDInstance.algo.ts:1564", "teal": 6815}, {"pc": [6197], "source": "contracts/NFDInstance.algo.ts:1565", "teal": 6819}, {"pc": [6198, 6199, 6200], "source": "contracts/NFDInstance.algo.ts:1565", "teal": 6820}, {"pc": [6201], "source": "contracts/NFDInstance.algo.ts:1568", "teal": 6825}, {"pc": [6202, 6203], "source": "contracts/NFDInstance.algo.ts:1537", "teal": 6829}, {"pc": [6204, 6205], "source": "contracts/NFDInstance.algo.ts:1537", "teal": 6832}, {"pc": [6206], "source": "contracts/NFDInstance.algo.ts:1537", "teal": 6833}, {"pc": [6207, 6208, 6209], "source": "contracts/NFDInstance.algo.ts:1578", "teal": 6843}, {"pc": [6210], "source": "contracts/NFDInstance.algo.ts:1578", "teal": 6846}, {"pc": [6211, 6212], "source": "contracts/NFDInstance.algo.ts:1578", "teal": 6847}, {"pc": [6213, 6214], "source": "contracts/NFDInstance.algo.ts:1579", "teal": 6851}, {"pc": [6215], "source": "contracts/NFDInstance.algo.ts:1579", "teal": 6852}, {"pc": [6216], "errorMessage": "box value does not exist: this.boxes(key).value", "source": "contracts/NFDInstance.algo.ts:1579", "teal": 6855}, {"pc": [6217, 6218], "source": "contracts/NFDInstance.algo.ts:1579", "teal": 6856}, {"pc": [6219, 6220], "source": "contracts/NFDInstance.algo.ts:1580", "teal": 6860}, {"pc": [6221], "source": "contracts/NFDInstance.algo.ts:1580", "teal": 6861}, {"pc": [6222], "source": "contracts/NFDInstance.algo.ts:1580", "teal": 6862}, {"pc": [6223], "source": "contracts/NFDInstance.algo.ts:1580", "teal": 6863}, {"pc": [6224, 6225], "source": "contracts/NFDInstance.algo.ts:1580", "teal": 6864}, {"pc": [6226, 6227], "source": "contracts/NFDInstance.algo.ts:1582", "teal": 6868}, {"pc": [6228, 6229], "source": "contracts/NFDInstance.algo.ts:1582", "teal": 6869}, {"pc": [6230], "source": "contracts/NFDInstance.algo.ts:1582", "teal": 6870}, {"pc": [6231], "source": "contracts/NFDInstance.algo.ts:1582", "teal": 6871}, {"pc": [6232], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 6875}, {"pc": [6233, 6234], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 6876}, {"pc": [6235, 6236], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 6881}, {"pc": [6237, 6238], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 6882}, {"pc": [6239], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 6883}, {"pc": [6240, 6241, 6242], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 6884}, {"pc": [6243, 6244], "source": "contracts/NFDInstance.algo.ts:1585", "teal": 6889}, {"pc": [6245, 6246], "source": "contracts/NFDInstance.algo.ts:1585", "teal": 6890}, {"pc": [6247], "source": "contracts/NFDInstance.algo.ts:1585", "teal": 6891}, {"pc": [6248], "source": "contracts/NFDInstance.algo.ts:1585", "teal": 6892}, {"pc": [6249], "source": "contracts/NFDInstance.algo.ts:1585", "teal": 6893}, {"pc": [6250], "source": "contracts/NFDInstance.algo.ts:1585", "teal": 6894}, {"pc": [6251, 6252], "source": "contracts/NFDInstance.algo.ts:1585", "teal": 6895}, {"pc": [6253], "source": "contracts/NFDInstance.algo.ts:1585", "teal": 6896}, {"pc": [6254, 6255, 6256], "source": "contracts/NFDInstance.algo.ts:1585", "teal": 6897}, {"pc": [6257, 6258], "source": "contracts/NFDInstance.algo.ts:1586", "teal": 6903}, {"pc": [6259, 6260], "source": "contracts/NFDInstance.algo.ts:1586", "teal": 6904}, {"pc": [6261], "source": "contracts/NFDInstance.algo.ts:1586", "teal": 6905}, {"pc": [6262], "source": "contracts/NFDInstance.algo.ts:1586", "teal": 6906}, {"pc": [6263], "source": "contracts/NFDInstance.algo.ts:1586", "teal": 6907}, {"pc": [6264, 6265, 6266], "source": "contracts/NFDInstance.algo.ts:1586", "teal": 6908}, {"pc": [6267, 6268], "source": "contracts/NFDInstance.algo.ts:1587", "teal": 6913}, {"pc": [6269], "source": "contracts/NFDInstance.algo.ts:1587", "teal": 6914}, {"pc": [6270, 6271], "source": "contracts/NFDInstance.algo.ts:1590", "teal": 6919}, {"pc": [6272], "source": "contracts/NFDInstance.algo.ts:1590", "teal": 6920}, {"pc": [6273], "source": "contracts/NFDInstance.algo.ts:1590", "teal": 6921}, {"pc": [6274, 6275, 6276], "source": "contracts/NFDInstance.algo.ts:1590", "teal": 6922}, {"pc": [6277, 6278], "source": "contracts/NFDInstance.algo.ts:1591", "teal": 6927}, {"pc": [6279, 6280], "source": "contracts/NFDInstance.algo.ts:1591", "teal": 6928}, {"pc": [6281], "source": "contracts/NFDInstance.algo.ts:1591", "teal": 6929}, {"pc": [6282, 6283], "source": "contracts/NFDInstance.algo.ts:1591", "teal": 6930}, {"pc": [6284], "source": "contracts/NFDInstance.algo.ts:1591", "teal": 6931}, {"pc": [6285], "source": "contracts/NFDInstance.algo.ts:1591", "teal": 6932}, {"pc": [6286], "source": "contracts/NFDInstance.algo.ts:1591", "teal": 6933}, {"pc": [6287], "source": "contracts/NFDInstance.algo.ts:1591", "teal": 6934}, {"pc": [6288], "source": "contracts/NFDInstance.algo.ts:1593", "teal": 6938}, {"pc": [6289, 6290], "source": "contracts/NFDInstance.algo.ts:1593", "teal": 6939}, {"pc": [6291, 6292], "source": "contracts/NFDInstance.algo.ts:1594", "teal": 6943}, {"pc": [6293, 6294], "source": "contracts/NFDInstance.algo.ts:1594", "teal": 6944}, {"pc": [6295], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6948}, {"pc": [6296, 6297], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6949}, {"pc": [6298, 6299], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6954}, {"pc": [6300, 6301], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6955}, {"pc": [6302], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6956}, {"pc": [6303], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6957}, {"pc": [6304], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6958}, {"pc": [6305, 6306, 6307], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6959}, {"pc": [6308, 6309], "source": "contracts/NFDInstance.algo.ts:1596", "teal": 6964}, {"pc": [6310, 6311], "source": "contracts/NFDInstance.algo.ts:1596", "teal": 6965}, {"pc": [6312], "source": "contracts/NFDInstance.algo.ts:1596", "teal": 6966}, {"pc": [6313], "source": "contracts/NFDInstance.algo.ts:1596", "teal": 6967}, {"pc": [6314], "source": "contracts/NFDInstance.algo.ts:1596", "teal": 6968}, {"pc": [6315], "source": "contracts/NFDInstance.algo.ts:1596", "teal": 6969}, {"pc": [6316, 6317], "source": "contracts/NFDInstance.algo.ts:1596", "teal": 6970}, {"pc": [6318], "source": "contracts/NFDInstance.algo.ts:1596", "teal": 6971}, {"pc": [6319, 6320, 6321], "source": "contracts/NFDInstance.algo.ts:1596", "teal": 6972}, {"pc": [6322], "source": "contracts/NFDInstance.algo.ts:1597", "teal": 6977}, {"pc": [6323, 6324], "source": "contracts/NFDInstance.algo.ts:1597", "teal": 6978}, {"pc": [6325, 6326, 6327], "source": "contracts/NFDInstance.algo.ts:1598", "teal": 6979}, {"pc": [6328, 6329], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6986}, {"pc": [6330], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6987}, {"pc": [6331], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6988}, {"pc": [6332, 6333], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6989}, {"pc": [6334, 6335, 6336], "source": "contracts/NFDInstance.algo.ts:1595", "teal": 6990}, {"pc": [6337, 6338], "source": "contracts/NFDInstance.algo.ts:1601", "teal": 6996}, {"pc": [6339, 6340, 6341], "source": "contracts/NFDInstance.algo.ts:1601", "teal": 6997}, {"pc": [6342, 6343], "source": "contracts/NFDInstance.algo.ts:1602", "teal": 7002}, {"pc": [6344], "source": "contracts/NFDInstance.algo.ts:1602", "teal": 7003}, {"pc": [6345], "source": "contracts/NFDInstance.algo.ts:1605", "teal": 7010}, {"pc": [6346, 6347, 6348], "source": "contracts/NFDInstance.algo.ts:1605", "teal": 7011}, {"pc": [6349, 6350], "source": "contracts/NFDInstance.algo.ts:1608", "teal": 7016}, {"pc": [6351, 6352], "source": "contracts/NFDInstance.algo.ts:1608", "teal": 7017}, {"pc": [6353], "source": "contracts/NFDInstance.algo.ts:1608", "teal": 7018}, {"pc": [6354], "source": "contracts/NFDInstance.algo.ts:1608", "teal": 7019}, {"pc": [6355, 6356], "source": "contracts/NFDInstance.algo.ts:1608", "teal": 7020}, {"pc": [6357], "source": "contracts/NFDInstance.algo.ts:1608", "teal": 7021}, {"pc": [6358], "source": "contracts/NFDInstance.algo.ts:1609", "teal": 7025}, {"pc": [6359, 6360, 6361], "source": "contracts/NFDInstance.algo.ts:1609", "teal": 7026}, {"pc": [6362, 6363], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 7033}, {"pc": [6364], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 7034}, {"pc": [6365], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 7035}, {"pc": [6366, 6367], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 7036}, {"pc": [6368, 6369, 6370], "source": "contracts/NFDInstance.algo.ts:1584", "teal": 7037}, {"pc": [6371], "source": "contracts/NFDInstance.algo.ts:1612", "teal": 7042}, {"pc": [6372, 6373], "source": "contracts/NFDInstance.algo.ts:1578", "teal": 7046}, {"pc": [6374, 6375], "source": "contracts/NFDInstance.algo.ts:1578", "teal": 7049}, {"pc": [6376], "source": "contracts/NFDInstance.algo.ts:1578", "teal": 7050}, {"pc": [6377, 6378, 6379], "source": "contracts/NFDInstance.algo.ts:1615", "teal": 7054}, {"pc": [6380, 6381], "source": "contracts/NFDInstance.algo.ts:1617", "teal": 7058}, {"pc": [6382], "source": "contracts/NFDInstance.algo.ts:1617", "teal": 7059}, {"pc": [6383], "source": "contracts/NFDInstance.algo.ts:1617", "teal": 7060}, {"pc": [6384], "source": "contracts/NFDInstance.algo.ts:1617", "teal": 7061}, {"pc": [6385], "errorMessage": "sender must be owner", "source": "contracts/NFDInstance.algo.ts:1617", "teal": 7064}, {"pc": [6386], "source": "contracts/NFDInstance.algo.ts:1615", "teal": 7065}, {"pc": [6387, 6388, 6389, 6390, 6391, 6392], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7068}, {"pc": [6393, 6394, 6395], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7069}, {"pc": [6396, 6397, 6398, 6399], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7070}, {"pc": [6400], "errorMessage": "this contract does not implement the given ABI method for create NoOp", "source": "contracts/NFDInstance.algo.ts:17", "teal": 7073}, {"pc": [6401, 6402, 6403, 6404, 6405, 6406], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7076}, {"pc": [6407, 6408, 6409, 6410, 6411, 6412], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7077}, {"pc": [6413, 6414, 6415, 6416, 6417, 6418], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7078}, {"pc": [6419, 6420, 6421, 6422, 6423, 6424], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7079}, {"pc": [6425, 6426, 6427, 6428, 6429, 6430], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7080}, {"pc": [6431, 6432, 6433, 6434, 6435, 6436], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7081}, {"pc": [6437, 6438, 6439, 6440, 6441, 6442], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7082}, {"pc": [6443, 6444, 6445, 6446, 6447, 6448], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7083}, {"pc": [6449, 6450, 6451, 6452, 6453, 6454], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7084}, {"pc": [6455, 6456, 6457, 6458, 6459, 6460], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7085}, {"pc": [6461, 6462, 6463, 6464, 6465, 6466], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7086}, {"pc": [6467, 6468, 6469, 6470, 6471, 6472], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7087}, {"pc": [6473, 6474, 6475, 6476, 6477, 6478], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7088}, {"pc": [6479, 6480, 6481, 6482, 6483, 6484], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7089}, {"pc": [6485, 6486, 6487, 6488, 6489, 6490], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7090}, {"pc": [6491, 6492, 6493, 6494, 6495, 6496], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7091}, {"pc": [6497, 6498, 6499, 6500, 6501, 6502], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7092}, {"pc": [6503, 6504, 6505, 6506, 6507, 6508], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7093}, {"pc": [6509, 6510, 6511, 6512, 6513, 6514], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7094}, {"pc": [6515, 6516, 6517, 6518, 6519, 6520], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7095}, {"pc": [6521, 6522, 6523, 6524, 6525, 6526], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7096}, {"pc": [6527, 6528, 6529, 6530, 6531, 6532], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7097}, {"pc": [6533, 6534, 6535, 6536, 6537, 6538], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7098}, {"pc": [6539, 6540, 6541, 6542, 6543, 6544], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7099}, {"pc": [6545, 6546, 6547], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7100}, {"pc": [6548, 6549, 6550, 6551, 6552, 6553, 6554, 6555, 6556, 6557, 6558, 6559, 6560, 6561, 6562, 6563, 6564, 6565, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 6585, 6586, 6587, 6588, 6589, 6590, 6591, 6592, 6593, 6594, 6595, 6596, 6597], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7101}, {"pc": [6598, 6599, 6600], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7104}, {"pc": [6601], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7105}, {"pc": [6602], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7106}, {"pc": [6603, 6604, 6605, 6606, 6607, 6608], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7109}, {"pc": [6609, 6610, 6611], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7110}, {"pc": [6612, 6613, 6614, 6615], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7111}, {"pc": [6616], "errorMessage": "this contract does not implement the given ABI method for call UpdateApplication", "source": "contracts/NFDInstance.algo.ts:17", "teal": 7114}, {"pc": [6617, 6618, 6619], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7117}, {"pc": [6620, 6621, 6622, 6623, 6624, 6625, 6626, 6627, 6628, 6629, 6630, 6631], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7118}, {"pc": [6632, 6633], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7119}, {"pc": [6634], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7120}, {"pc": [6635], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7121}, {"pc": [6636], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7122}, {"pc": [6637, 6638, 6639], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7126}, {"pc": [6640, 6641], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7127}, {"pc": [6642], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7128}, {"pc": [6643], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7129}, {"pc": [6644, 6645, 6646], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7130}, {"pc": [6647, 6648], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7131}, {"pc": [6649], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7132}, {"pc": [6650, 6651], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7135}, {"pc": [6652, 6653], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7136}, {"pc": [6654], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7137}, {"pc": [6655], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7138}, {"pc": [6656], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7139}, {"pc": [6657, 6658, 6659], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7140}, {"pc": [6660, 6661], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7141}, {"pc": [6662, 6663], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7142}, {"pc": [6664], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7143}, {"pc": [6665, 6666, 6667], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7144}, {"pc": [6668, 6669, 6670], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7145}, {"pc": [6671], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7148}, {"pc": [6672, 6673], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7151}, {"pc": [6674, 6675], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7152}, {"pc": [6676], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7153}, {"pc": [6677, 6678, 6679], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7154}, {"pc": [6680], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7155}, {"pc": [6681], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7156}, {"pc": [6682, 6683, 6684], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7159}, {"pc": [6685, 6686], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7160}, {"pc": [6687, 6688], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7161}, {"pc": [6689], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7162}, {"pc": [6690, 6691], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7163}, {"pc": [6692, 6693], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7164}, {"pc": [6694], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7165}, {"pc": [6695, 6696, 6697], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7168}, {"pc": [6698, 6699], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7169}, {"pc": [6700, 6701], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7170}, {"pc": [6702], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7171}, {"pc": [6703, 6704], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7172}, {"pc": [6705, 6706], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7173}, {"pc": [6707], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7174}, {"pc": [6708], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7175}, {"pc": [6709, 6710], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7176}, {"pc": [6711], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7177}, {"pc": [6712], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7178}, {"pc": [6713], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7179}, {"pc": [6714, 6715, 6716], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7180}, {"pc": [6717, 6718], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7181}, {"pc": [6719, 6720], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7182}, {"pc": [6721], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7183}, {"pc": [6722], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7184}, {"pc": [6723, 6724], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7185}, {"pc": [6725, 6726], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7186}, {"pc": [6727, 6728], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7187}, {"pc": [6729, 6730], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7188}, {"pc": [6731], "source": "contracts/NFDInstance.algo.ts:17", "teal": 7189}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"admin_asa_id": {"type": "uint64"}, "registry_app_id": {"type": "uint64"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: typing.Any | None = None) -> list[typing.Any] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: typing.Any) -> typing.Any:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class PayoutInfo:
    """Struct for PayoutInfo"""
    amountToSeller: int
    commissionAddress: str
    amountToCommission: int
    segmentRootOwner: str
    amountToSegmentRoot: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class MintAsaArgs:
    """Dataclass for mint_asa arguments"""
    nfdName: str
    url: str

    @property
    def abi_method_signature(self) -> str:
        return "mintAsa(string,string)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DeleteFieldsArgs:
    """Dataclass for delete_fields arguments"""
    fieldNames: list[bytes | str]

    @property
    def abi_method_signature(self) -> str:
        return "deleteFields(byte[][])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateSegmentCountArgs:
    """Dataclass for update_segment_count arguments"""
    childNfdName: str
    childNfdAppID: int

    @property
    def abi_method_signature(self) -> str:
        return "updateSegmentCount(string,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetFieldUpdateCostArgs:
    """Dataclass for get_field_update_cost arguments"""
    fieldAndVals: list[bytes | str]

    @property
    def abi_method_signature(self) -> str:
        return "getFieldUpdateCost(byte[][])uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateFieldsArgs:
    """Dataclass for update_fields arguments"""
    fieldAndVals: list[bytes | str]

    @property
    def abi_method_signature(self) -> str:
        return "updateFields(byte[][])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ReadFieldArgs:
    """Dataclass for read_field arguments"""
    fieldName: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "readField(byte[])byte[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class OfferForSaleArgs:
    """Dataclass for offer_for_sale arguments"""
    sellAmount: int
    reservedFor: str

    @property
    def abi_method_signature(self) -> str:
        return "offerForSale(uint64,address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PostOfferArgs:
    """Dataclass for post_offer arguments"""
    offer: int
    note: str

    @property
    def abi_method_signature(self) -> str:
        return "postOffer(uint64,string)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MintPayoutArgs:
    """Dataclass for mint_payout arguments"""
    oneYearPrice: int
    segmentPlatformCostInAlgo: int

    @property
    def abi_method_signature(self) -> str:
        return "mintPayout(uint64,uint64)(uint64,address,uint64,address,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class PurchaseArgs:
    """Dataclass for purchase arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "purchase(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class IsAddressInFieldArgs:
    """Dataclass for is_address_in_field arguments"""
    fieldName: str
    address: str

    @property
    def abi_method_signature(self) -> str:
        return "isAddressInField(string,address)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateHashArgs:
    """Dataclass for update_hash arguments"""
    hash: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "updateHash(byte[])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ContractLockArgs:
    """Dataclass for contract_lock arguments"""
    lock: bool

    @property
    def abi_method_signature(self) -> str:
        return "contractLock(bool)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SegmentLockArgs:
    """Dataclass for segment_lock arguments"""
    lock: bool
    usdPrice: int

    @property
    def abi_method_signature(self) -> str:
        return "segmentLock(bool,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VaultOptInLockArgs:
    """Dataclass for vault_opt_in_lock arguments"""
    lock: bool

    @property
    def abi_method_signature(self) -> str:
        return "vaultOptInLock(bool)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VaultOptInArgs:
    """Dataclass for vault_opt_in arguments"""
    assets: list[int]

    @property
    def abi_method_signature(self) -> str:
        return "vaultOptIn(uint64[])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class VaultSendArgs:
    """Dataclass for vault_send arguments"""
    amount: int
    receiver: str
    note: str
    asset: int
    otherAssets: list[int]

    @property
    def abi_method_signature(self) -> str:
        return "vaultSend(uint64,address,string,uint64,uint64[])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RenewArgs:
    """Dataclass for renew arguments"""
    payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "renew(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetPrimaryAddressArgs:
    """Dataclass for set_primary_address arguments"""
    fieldName: str
    address: str

    @property
    def abi_method_signature(self) -> str:
        return "setPrimaryAddress(string,address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RegistryAddingVerifiedAddressArgs:
    """Dataclass for registry_adding_verified_address arguments"""
    fieldBeingVerified: str
    fieldSetName: str

    @property
    def abi_method_signature(self) -> str:
        return "registryAddingVerifiedAddress(string,string)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RegistryRemovingVerifiedAddressArgs:
    """Dataclass for registry_removing_verified_address arguments"""
    fieldBeingChanged: str
    address: str
    mbrRefundDest: str

    @property
    def abi_method_signature(self) -> str:
        return "registryRemovingVerifiedAddress(string,address,address)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateApplicationArgs:
    """Dataclass for create_application arguments"""
    nfdName: str
    seller: str
    buyer: str
    purchaseAmount: int
    expTime: int
    commission1Addr: str
    commission1Pct: int
    commission2Addr: str
    commission2Pct: int
    segmentRootAppId: int
    segmentRootCommissionAddr: str

    @property
    def abi_method_signature(self) -> str:
        return "createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateApplicationArgs:
    """Dataclass for update_application arguments"""
    versionNum: str

    @property
    def abi_method_signature(self) -> str:
        return "updateApplication(string)void"


class _NfdInstanceUpdate:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_application(
        self,
        args: tuple[str] | UpdateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppUpdateMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.params.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateApplication(string)void",
            "args": method_args,
        }))


class NfdInstanceParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_NfdInstanceUpdate":
        return _NfdInstanceUpdate(self.app_client)

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gas()void",
        }))

    def mint_asa(
        self,
        args: tuple[str, str] | MintAsaArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mintAsa(string,string)void",
            "args": method_args,
        }))

    def delete_fields(
        self,
        args: tuple[list[bytes | str]] | DeleteFieldsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deleteFields(byte[][])void",
            "args": method_args,
        }))

    def update_segment_count(
        self,
        args: tuple[str, int] | UpdateSegmentCountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateSegmentCount(string,uint64)void",
            "args": method_args,
        }))

    def get_field_update_cost(
        self,
        args: tuple[list[bytes | str]] | GetFieldUpdateCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getFieldUpdateCost(byte[][])uint64",
            "args": method_args,
        }))

    def update_fields(
        self,
        args: tuple[list[bytes | str]] | UpdateFieldsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateFields(byte[][])void",
            "args": method_args,
        }))

    def read_field(
        self,
        args: tuple[bytes | str] | ReadFieldArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "readField(byte[])byte[]",
            "args": method_args,
        }))

    def offer_for_sale(
        self,
        args: tuple[int, str] | OfferForSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "offerForSale(uint64,address)void",
            "args": method_args,
        }))

    def cancel_sale(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cancelSale()void",
        }))

    def post_offer(
        self,
        args: tuple[int, str] | PostOfferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "postOffer(uint64,string)void",
            "args": method_args,
        }))

    def mint_payout(
        self,
        args: tuple[int, int] | MintPayoutArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mintPayout(uint64,uint64)(uint64,address,uint64,address,uint64)",
            "args": method_args,
        }))

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | PurchaseArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase(pay)void",
            "args": method_args,
        }))

    def is_address_in_field(
        self,
        args: tuple[str, str] | IsAddressInFieldArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "isAddressInField(string,address)bool",
            "args": method_args,
        }))

    def get_renew_price(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getRenewPrice()uint64",
        }))

    def update_hash(
        self,
        args: tuple[bytes | str] | UpdateHashArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateHash(byte[])void",
            "args": method_args,
        }))

    def contract_lock(
        self,
        args: tuple[bool] | ContractLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "contractLock(bool)void",
            "args": method_args,
        }))

    def segment_lock(
        self,
        args: tuple[bool, int] | SegmentLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "segmentLock(bool,uint64)void",
            "args": method_args,
        }))

    def vault_opt_in_lock(
        self,
        args: tuple[bool] | VaultOptInLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vaultOptInLock(bool)void",
            "args": method_args,
        }))

    def vault_opt_in(
        self,
        args: tuple[list[int]] | VaultOptInArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vaultOptIn(uint64[])void",
            "args": method_args,
        }))

    def vault_send(
        self,
        args: tuple[int, str, str, int, list[int]] | VaultSendArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vaultSend(uint64,address,string,uint64,uint64[])void",
            "args": method_args,
        }))

    def renew(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RenewArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "renew(pay)void",
            "args": method_args,
        }))

    def set_primary_address(
        self,
        args: tuple[str, str] | SetPrimaryAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "setPrimaryAddress(string,address)void",
            "args": method_args,
        }))

    def registry_adding_verified_address(
        self,
        args: tuple[str, str] | RegistryAddingVerifiedAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registryAddingVerifiedAddress(string,string)bool",
            "args": method_args,
        }))

    def registry_removing_verified_address(
        self,
        args: tuple[str, str, str] | RegistryRemovingVerifiedAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registryRemovingVerifiedAddress(string,address,address)bool",
            "args": method_args,
        }))

    def create_application(
        self,
        args: tuple[str, str, str, int, int, str, int, str, int, int, str] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _NfdInstanceUpdateTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_application(
        self,
        args: tuple[str] | UpdateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        return self.app_client.create_transaction.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateApplication(string)void",
            "args": method_args,
        }))


class NfdInstanceCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_NfdInstanceUpdateTransaction":
        return _NfdInstanceUpdateTransaction(self.app_client)

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gas()void",
        }))

    def mint_asa(
        self,
        args: tuple[str, str] | MintAsaArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mintAsa(string,string)void",
            "args": method_args,
        }))

    def delete_fields(
        self,
        args: tuple[list[bytes | str]] | DeleteFieldsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deleteFields(byte[][])void",
            "args": method_args,
        }))

    def update_segment_count(
        self,
        args: tuple[str, int] | UpdateSegmentCountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateSegmentCount(string,uint64)void",
            "args": method_args,
        }))

    def get_field_update_cost(
        self,
        args: tuple[list[bytes | str]] | GetFieldUpdateCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getFieldUpdateCost(byte[][])uint64",
            "args": method_args,
        }))

    def update_fields(
        self,
        args: tuple[list[bytes | str]] | UpdateFieldsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateFields(byte[][])void",
            "args": method_args,
        }))

    def read_field(
        self,
        args: tuple[bytes | str] | ReadFieldArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "readField(byte[])byte[]",
            "args": method_args,
        }))

    def offer_for_sale(
        self,
        args: tuple[int, str] | OfferForSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "offerForSale(uint64,address)void",
            "args": method_args,
        }))

    def cancel_sale(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cancelSale()void",
        }))

    def post_offer(
        self,
        args: tuple[int, str] | PostOfferArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "postOffer(uint64,string)void",
            "args": method_args,
        }))

    def mint_payout(
        self,
        args: tuple[int, int] | MintPayoutArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mintPayout(uint64,uint64)(uint64,address,uint64,address,uint64)",
            "args": method_args,
        }))

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | PurchaseArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase(pay)void",
            "args": method_args,
        }))

    def is_address_in_field(
        self,
        args: tuple[str, str] | IsAddressInFieldArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "isAddressInField(string,address)bool",
            "args": method_args,
        }))

    def get_renew_price(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getRenewPrice()uint64",
        }))

    def update_hash(
        self,
        args: tuple[bytes | str] | UpdateHashArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateHash(byte[])void",
            "args": method_args,
        }))

    def contract_lock(
        self,
        args: tuple[bool] | ContractLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "contractLock(bool)void",
            "args": method_args,
        }))

    def segment_lock(
        self,
        args: tuple[bool, int] | SegmentLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "segmentLock(bool,uint64)void",
            "args": method_args,
        }))

    def vault_opt_in_lock(
        self,
        args: tuple[bool] | VaultOptInLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vaultOptInLock(bool)void",
            "args": method_args,
        }))

    def vault_opt_in(
        self,
        args: tuple[list[int]] | VaultOptInArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vaultOptIn(uint64[])void",
            "args": method_args,
        }))

    def vault_send(
        self,
        args: tuple[int, str, str, int, list[int]] | VaultSendArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vaultSend(uint64,address,string,uint64,uint64[])void",
            "args": method_args,
        }))

    def renew(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RenewArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "renew(pay)void",
            "args": method_args,
        }))

    def set_primary_address(
        self,
        args: tuple[str, str] | SetPrimaryAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "setPrimaryAddress(string,address)void",
            "args": method_args,
        }))

    def registry_adding_verified_address(
        self,
        args: tuple[str, str] | RegistryAddingVerifiedAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registryAddingVerifiedAddress(string,string)bool",
            "args": method_args,
        }))

    def registry_removing_verified_address(
        self,
        args: tuple[str, str, str] | RegistryRemovingVerifiedAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registryRemovingVerifiedAddress(string,address,address)bool",
            "args": method_args,
        }))

    def create_application(
        self,
        args: tuple[str, str, str, int, int, str, int, str, int, int, str] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _NfdInstanceUpdateSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def update_application(
        self,
        args: tuple[str] | UpdateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        compilation_params = compilation_params or algokit_utils.AppClientCompilationParams()
        response = self.app_client.send.update(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateApplication(string)void",
            "args": method_args,
        }), send_params=send_params, compilation_params=compilation_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppUpdateTransactionResult[None], parsed_response)


class NfdInstanceSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def update(self) -> "_NfdInstanceUpdateSend":
        return _NfdInstanceUpdateSend(self.app_client)

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gas()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def mint_asa(
        self,
        args: tuple[str, str] | MintAsaArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mintAsa(string,string)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def delete_fields(
        self,
        args: tuple[list[bytes | str]] | DeleteFieldsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "deleteFields(byte[][])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def update_segment_count(
        self,
        args: tuple[str, int] | UpdateSegmentCountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateSegmentCount(string,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_field_update_cost(
        self,
        args: tuple[list[bytes | str]] | GetFieldUpdateCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getFieldUpdateCost(byte[][])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def update_fields(
        self,
        args: tuple[list[bytes | str]] | UpdateFieldsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateFields(byte[][])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def read_field(
        self,
        args: tuple[bytes | str] | ReadFieldArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bytes]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "readField(byte[])byte[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bytes], parsed_response)

    def offer_for_sale(
        self,
        args: tuple[int, str] | OfferForSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "offerForSale(uint64,address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def cancel_sale(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "cancelSale()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def post_offer(
        self,
        args: tuple[int, str] | PostOfferArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "postOffer(uint64,string)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def mint_payout(
        self,
        args: tuple[int, int] | MintPayoutArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PayoutInfo]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "mintPayout(uint64,uint64)(uint64,address,uint64,address,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(PayoutInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PayoutInfo], parsed_response)

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | PurchaseArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "purchase(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def is_address_in_field(
        self,
        args: tuple[str, str] | IsAddressInFieldArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "isAddressInField(string,address)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def get_renew_price(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getRenewPrice()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def update_hash(
        self,
        args: tuple[bytes | str] | UpdateHashArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "updateHash(byte[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def contract_lock(
        self,
        args: tuple[bool] | ContractLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "contractLock(bool)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def segment_lock(
        self,
        args: tuple[bool, int] | SegmentLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "segmentLock(bool,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def vault_opt_in_lock(
        self,
        args: tuple[bool] | VaultOptInLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vaultOptInLock(bool)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def vault_opt_in(
        self,
        args: tuple[list[int]] | VaultOptInArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vaultOptIn(uint64[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def vault_send(
        self,
        args: tuple[int, str, str, int, list[int]] | VaultSendArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "vaultSend(uint64,address,string,uint64,uint64[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def renew(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RenewArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "renew(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def set_primary_address(
        self,
        args: tuple[str, str] | SetPrimaryAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "setPrimaryAddress(string,address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def registry_adding_verified_address(
        self,
        args: tuple[str, str] | RegistryAddingVerifiedAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registryAddingVerifiedAddress(string,string)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def registry_removing_verified_address(
        self,
        args: tuple[str, str, str] | RegistryRemovingVerifiedAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "registryRemovingVerifiedAddress(string,address,address)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def create_application(
        self,
        args: tuple[str, str, str, int, int, str, int, str, int, int, str] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class NfdInstanceState:
    """Methods to access state for the current NFDInstance app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def global_state(self) -> "_MapState[bytes, bytes]":
        """Get values from the global_state map in global_state state"""
        return _MapState(
            self.app_client.state.global_state,
            "global_state",
            None
        )

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def boxes(self) -> "_MapState[bytes, bytes]":
        """Get values from the boxes map in box state"""
        return _MapState(
            self.app_client.state.box,
            "boxes",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class NfdInstanceClient:
    """Client for interacting with NFDInstance smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = NfdInstanceParams(self.app_client)
        self.create_transaction = NfdInstanceCreateTransactionParams(self.app_client)
        self.send = NfdInstanceSend(self.app_client)
        self.state = NfdInstanceState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "NfdInstanceClient":
        return NfdInstanceClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "NfdInstanceClient":
        return NfdInstanceClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "NfdInstanceClient":
        return NfdInstanceClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "NfdInstanceComposer":
        return NfdInstanceComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["gas()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mintAsa(string,string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["deleteFields(byte[][])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["updateSegmentCount(string,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getFieldUpdateCost(byte[][])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["updateFields(byte[][])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["readField(byte[])byte[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bytes | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["offerForSale(uint64,address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["cancelSale()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["postOffer(uint64,string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["mintPayout(uint64,uint64)(uint64,address,uint64,address,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PayoutInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["purchase(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["isAddressInField(string,address)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getRenewPrice()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["updateHash(byte[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["contractLock(bool)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["segmentLock(bool,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vaultOptInLock(bool)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vaultOptIn(uint64[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["vaultSend(uint64,address,string,uint64,uint64[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["renew(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["setPrimaryAddress(string,address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["registryAddingVerifiedAddress(string,string)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["registryRemovingVerifiedAddress(string,address,address)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["updateApplication(string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | PayoutInfo | bool | bytes | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class NfdInstanceMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        CreateApplicationArgs,
        str | None,
    ]
):
    """Parameters for creating NfdInstance contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

@dataclasses.dataclass(frozen=True)
class NfdInstanceMethodCallUpdateParams(
    algokit_utils.BaseAppClientMethodCallParams[
        UpdateApplicationArgs,
        str | None,
    ]
):
    """Parameters for calling NfdInstance contract using ABI"""
    on_complete: typing.Literal[OnComplete.UpdateApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class NfdInstanceFactory(algokit_utils.TypedAppFactoryProtocol[NfdInstanceMethodCallCreateParams, NfdInstanceMethodCallUpdateParams, None]):
    """Factory for deploying and managing NfdInstanceClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = NfdInstanceFactoryParams(self.app_factory)
        self.create_transaction = NfdInstanceFactoryCreateTransaction(self.app_factory)
        self.send = NfdInstanceFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: NfdInstanceMethodCallCreateParams | None = None,
        update_params: NfdInstanceMethodCallUpdateParams | None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[NfdInstanceClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params.to_algokit_utils_params() if update_params else None,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return NfdInstanceClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> NfdInstanceClient:
        """Get an app client by creator address and name"""
        return NfdInstanceClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> NfdInstanceClient:
        """Get an app client by app ID"""
        return NfdInstanceClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class NfdInstanceFactoryParams:
    """Parameters for creating transactions for NfdInstance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = NfdInstanceFactoryCreateParams(app_factory)
        self.update = NfdInstanceFactoryUpdateParams(app_factory)
        self.delete = NfdInstanceFactoryDeleteParams(app_factory)

class NfdInstanceFactoryCreateParams:
    """Parameters for 'create' operations of NfdInstance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def gas(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the gas()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "gas()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def mint_asa(
        self,
        args: tuple[str, str] | MintAsaArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mintAsa(string,string)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mintAsa(string,string)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def delete_fields(
        self,
        args: tuple[list[bytes | str]] | DeleteFieldsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the deleteFields(byte[][])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "deleteFields(byte[][])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_segment_count(
        self,
        args: tuple[str, int] | UpdateSegmentCountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the updateSegmentCount(string,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "updateSegmentCount(string,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_field_update_cost(
        self,
        args: tuple[list[bytes | str]] | GetFieldUpdateCostArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getFieldUpdateCost(byte[][])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getFieldUpdateCost(byte[][])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_fields(
        self,
        args: tuple[list[bytes | str]] | UpdateFieldsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the updateFields(byte[][])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "updateFields(byte[][])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def read_field(
        self,
        args: tuple[bytes | str] | ReadFieldArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the readField(byte[])byte[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "readField(byte[])byte[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def offer_for_sale(
        self,
        args: tuple[int, str] | OfferForSaleArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the offerForSale(uint64,address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "offerForSale(uint64,address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def cancel_sale(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the cancelSale()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "cancelSale()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def post_offer(
        self,
        args: tuple[int, str] | PostOfferArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the postOffer(uint64,string)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "postOffer(uint64,string)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def mint_payout(
        self,
        args: tuple[int, int] | MintPayoutArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the mintPayout(uint64,uint64)(uint64,address,uint64,address,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "mintPayout(uint64,uint64)(uint64,address,uint64,address,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | PurchaseArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the purchase(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "purchase(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def is_address_in_field(
        self,
        args: tuple[str, str] | IsAddressInFieldArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the isAddressInField(string,address)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "isAddressInField(string,address)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_renew_price(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getRenewPrice()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getRenewPrice()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def update_hash(
        self,
        args: tuple[bytes | str] | UpdateHashArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the updateHash(byte[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "updateHash(byte[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def contract_lock(
        self,
        args: tuple[bool] | ContractLockArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the contractLock(bool)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "contractLock(bool)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def segment_lock(
        self,
        args: tuple[bool, int] | SegmentLockArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the segmentLock(bool,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "segmentLock(bool,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def vault_opt_in_lock(
        self,
        args: tuple[bool] | VaultOptInLockArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vaultOptInLock(bool)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vaultOptInLock(bool)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def vault_opt_in(
        self,
        args: tuple[list[int]] | VaultOptInArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vaultOptIn(uint64[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vaultOptIn(uint64[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def vault_send(
        self,
        args: tuple[int, str, str, int, list[int]] | VaultSendArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the vaultSend(uint64,address,string,uint64,uint64[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "vaultSend(uint64,address,string,uint64,uint64[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def renew(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RenewArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the renew(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "renew(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_primary_address(
        self,
        args: tuple[str, str] | SetPrimaryAddressArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the setPrimaryAddress(string,address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "setPrimaryAddress(string,address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def registry_adding_verified_address(
        self,
        args: tuple[str, str] | RegistryAddingVerifiedAddressArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the registryAddingVerifiedAddress(string,string)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "registryAddingVerifiedAddress(string,string)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def registry_removing_verified_address(
        self,
        args: tuple[str, str, str] | RegistryRemovingVerifiedAddressArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the registryRemovingVerifiedAddress(string,address,address)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "registryRemovingVerifiedAddress(string,address,address)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_application(
        self,
        args: tuple[str, str, str, int, int, str, int, str, int, int, str] | CreateApplicationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_application(
        self,
        args: tuple[str] | UpdateApplicationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the updateApplication(string)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "updateApplication(string)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class NfdInstanceFactoryUpdateParams:
    """Parameters for 'update' operations of NfdInstance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class NfdInstanceFactoryDeleteParams:
    """Parameters for 'delete' operations of NfdInstance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class NfdInstanceFactoryCreateTransaction:
    """Create transactions for NfdInstance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = NfdInstanceFactoryCreateTransactionCreate(app_factory)


class NfdInstanceFactoryCreateTransactionCreate:
    """Create new instances of NfdInstance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class NfdInstanceFactorySend:
    """Send calls to NfdInstance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = NfdInstanceFactorySendCreate(app_factory)


class NfdInstanceFactorySendCreate:
    """Send create calls to NfdInstance contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[NfdInstanceClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return NfdInstanceClient(result[0]), result[1]

    def create_application(
        self,
        args: tuple[str, str, str, int, int, str, int, str, int, int, str] | CreateApplicationArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[NfdInstanceClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void",
                    "args": _parse_abi_args(args),
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return NfdInstanceClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class _NfdInstanceUpdateComposer:
    def __init__(self, composer: "NfdInstanceComposer"):
        self.composer = composer
    def update_application(
        self,
        args: tuple[str] | UpdateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self.composer._composer.add_app_update_method_call(
            self.composer.client.params.update.update_application(
                args=args,
                params=params,
                compilation_params=compilation_params
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "updateApplication(string)void", v
            )
        )
        return self.composer


class NfdInstanceComposer:
    """Composer for creating transaction groups for NfdInstance contract calls"""

    def __init__(self, client: "NfdInstanceClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], typing.Any] | None] = []

    @property
    def update(self) -> "_NfdInstanceUpdateComposer":
        return _NfdInstanceUpdateComposer(self)

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.gas(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "gas()void", v
            )
        )
        return self

    def mint_asa(
        self,
        args: tuple[str, str] | MintAsaArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_asa(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mintAsa(string,string)void", v
            )
        )
        return self

    def delete_fields(
        self,
        args: tuple[list[bytes | str]] | DeleteFieldsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.delete_fields(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "deleteFields(byte[][])void", v
            )
        )
        return self

    def update_segment_count(
        self,
        args: tuple[str, int] | UpdateSegmentCountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_segment_count(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "updateSegmentCount(string,uint64)void", v
            )
        )
        return self

    def get_field_update_cost(
        self,
        args: tuple[list[bytes | str]] | GetFieldUpdateCostArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_field_update_cost(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getFieldUpdateCost(byte[][])uint64", v
            )
        )
        return self

    def update_fields(
        self,
        args: tuple[list[bytes | str]] | UpdateFieldsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_fields(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "updateFields(byte[][])void", v
            )
        )
        return self

    def read_field(
        self,
        args: tuple[bytes | str] | ReadFieldArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.read_field(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "readField(byte[])byte[]", v
            )
        )
        return self

    def offer_for_sale(
        self,
        args: tuple[int, str] | OfferForSaleArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.offer_for_sale(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "offerForSale(uint64,address)void", v
            )
        )
        return self

    def cancel_sale(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.cancel_sale(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "cancelSale()void", v
            )
        )
        return self

    def post_offer(
        self,
        args: tuple[int, str] | PostOfferArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.post_offer(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "postOffer(uint64,string)void", v
            )
        )
        return self

    def mint_payout(
        self,
        args: tuple[int, int] | MintPayoutArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.mint_payout(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "mintPayout(uint64,uint64)(uint64,address,uint64,address,uint64)", v
            )
        )
        return self

    def purchase(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | PurchaseArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.purchase(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "purchase(pay)void", v
            )
        )
        return self

    def is_address_in_field(
        self,
        args: tuple[str, str] | IsAddressInFieldArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.is_address_in_field(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "isAddressInField(string,address)bool", v
            )
        )
        return self

    def get_renew_price(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_renew_price(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getRenewPrice()uint64", v
            )
        )
        return self

    def update_hash(
        self,
        args: tuple[bytes | str] | UpdateHashArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_hash(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "updateHash(byte[])void", v
            )
        )
        return self

    def contract_lock(
        self,
        args: tuple[bool] | ContractLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.contract_lock(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "contractLock(bool)void", v
            )
        )
        return self

    def segment_lock(
        self,
        args: tuple[bool, int] | SegmentLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.segment_lock(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "segmentLock(bool,uint64)void", v
            )
        )
        return self

    def vault_opt_in_lock(
        self,
        args: tuple[bool] | VaultOptInLockArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vault_opt_in_lock(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vaultOptInLock(bool)void", v
            )
        )
        return self

    def vault_opt_in(
        self,
        args: tuple[list[int]] | VaultOptInArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vault_opt_in(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vaultOptIn(uint64[])void", v
            )
        )
        return self

    def vault_send(
        self,
        args: tuple[int, str, str, int, list[int]] | VaultSendArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.vault_send(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "vaultSend(uint64,address,string,uint64,uint64[])void", v
            )
        )
        return self

    def renew(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | RenewArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.renew(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "renew(pay)void", v
            )
        )
        return self

    def set_primary_address(
        self,
        args: tuple[str, str] | SetPrimaryAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_primary_address(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "setPrimaryAddress(string,address)void", v
            )
        )
        return self

    def registry_adding_verified_address(
        self,
        args: tuple[str, str] | RegistryAddingVerifiedAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.registry_adding_verified_address(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "registryAddingVerifiedAddress(string,string)bool", v
            )
        )
        return self

    def registry_removing_verified_address(
        self,
        args: tuple[str, str, str] | RegistryRemovingVerifiedAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.registry_removing_verified_address(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "registryRemovingVerifiedAddress(string,address,address)bool", v
            )
        )
        return self

    def create_application(
        self,
        args: tuple[str, str, str, int, int, str, int, str, int, int, str] | CreateApplicationArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_application(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "createApplication(string,address,address,uint64,uint64,address,uint64,address,uint64,uint64,address)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "NfdInstanceComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "NfdInstanceComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
