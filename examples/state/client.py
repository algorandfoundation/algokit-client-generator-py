# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
import base64
import dataclasses
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.atomic_transaction_composer import TransactionSigner, TransactionWithSigner

_APP_SPEC_JSON = r"""{
    "hints": {
        "call_abi(string)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "call_abi_txn(pay,string)string": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_global(uint64,uint64,string,byte[4])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_local(uint64,uint64,string,byte[4])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_box(byte[4],string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "error()void": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "default_value(string)string": {
            "read_only": true,
            "default_arguments": {
                "arg_with_default": {
                    "source": "constant",
                    "data": "default value"
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "default_value_from_abi(string)string": {
            "read_only": true,
            "default_arguments": {
                "arg_with_default": {
                    "source": "abi-method",
                    "data": {
                        "name": "default_value",
                        "args": [
                            {
                                "type": "string",
                                "name": "arg_with_default"
                            }
                        ],
                        "returns": {
                            "type": "string"
                        }
                    }
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_abi(string)string": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "update_abi(string)string": {
            "call_config": {
                "update_application": "CALL"
            }
        },
        "delete_abi(string)string": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "opt_in()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 2,
            "num_uints": 2
        }
    },
    "schema": {
        "global": {
            "declared": {
                "bytes1": {
                    "type": "bytes",
                    "key": "bytes1",
                    "descr": ""
                },
                "bytes2": {
                    "type": "bytes",
                    "key": "bytes2",
                    "descr": ""
                },
                "int1": {
                    "type": "uint64",
                    "key": "int1",
                    "descr": ""
                },
                "int2": {
                    "type": "uint64",
                    "key": "int2",
                    "descr": ""
                },
                "value": {
                    "type": "uint64",
                    "key": "value",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "local_bytes1": {
                    "type": "bytes",
                    "key": "local_bytes1",
                    "descr": ""
                },
                "local_bytes2": {
                    "type": "bytes",
                    "key": "local_bytes2",
                    "descr": ""
                },
                "local_int1": {
                    "type": "uint64",
                    "key": "local_int1",
                    "descr": ""
                },
                "local_int2": {
                    "type": "uint64",
                    "key": "local_int2",
                    "descr": ""
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "StateApp",
        "methods": [
            {
                "name": "call_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "call_abi_txn",
                "args": [
                    {
                        "type": "pay",
                        "name": "txn"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "set_global",
                "args": [
                    {
                        "type": "uint64",
                        "name": "int1"
                    },
                    {
                        "type": "uint64",
                        "name": "int2"
                    },
                    {
                        "type": "string",
                        "name": "bytes1"
                    },
                    {
                        "type": "byte[4]",
                        "name": "bytes2"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_local",
                "args": [
                    {
                        "type": "uint64",
                        "name": "int1"
                    },
                    {
                        "type": "uint64",
                        "name": "int2"
                    },
                    {
                        "type": "string",
                        "name": "bytes1"
                    },
                    {
                        "type": "byte[4]",
                        "name": "bytes2"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_box",
                "args": [
                    {
                        "type": "byte[4]",
                        "name": "name"
                    },
                    {
                        "type": "string",
                        "name": "value"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "error",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "default_value",
                "args": [
                    {
                        "type": "string",
                        "name": "arg_with_default"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "default_value_from_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "arg_with_default"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "create_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "input"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "update_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "input"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "delete_abi",
                "args": [
                    {
                        "type": "string",
                        "name": "input"
                    }
                ],
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "opt_in",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "delete_application": "CALL",
        "no_op": "CREATE",
        "opt_in": "CREATE",
        "update_application": "CALL"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_T = typing.TypeVar("_T")
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


@dataclasses.dataclass(kw_only=True)
class _TypedDeployCreateArgs(algokit_utils.DeployCreateCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


@dataclasses.dataclass(kw_only=True)
class _TypedDeployArgs(algokit_utils.DeployCallArgs, _TArgsHolder[_TArgs], typing.Generic[_TArgs]):
    pass


def _as_dict(data: _T | None) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    return {f.name: getattr(data, f.name) for f in dataclasses.fields(data) if getattr(data, f.name) is not None}


def _convert_on_complete(on_complete: algokit_utils.OnCompleteActionName) -> algosdk.transaction.OnComplete:
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    return getattr(algosdk.transaction.OnComplete, on_complete_enum)


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> dict[str, typing.Any] | None:
    if deploy_args is None:
        return None

    deploy_args_dict = _as_dict(deploy_args)
    if hasattr(deploy_args, "args") and hasattr(deploy_args.args, "method"):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class CallAbiArgs(_ArgsBase[str]):
    value: str

    @staticmethod
    def method() -> str:
        return "call_abi(string)string"


@dataclasses.dataclass(kw_only=True)
class CallAbiTxnArgs(_ArgsBase[str]):
    txn: TransactionWithSigner
    value: str

    @staticmethod
    def method() -> str:
        return "call_abi_txn(pay,string)string"


@dataclasses.dataclass(kw_only=True)
class SetGlobalArgs(_ArgsBase[None]):
    int1: int
    int2: int
    bytes1: str
    bytes2: bytes | tuple[int, int, int, int]

    @staticmethod
    def method() -> str:
        return "set_global(uint64,uint64,string,byte[4])void"


@dataclasses.dataclass(kw_only=True)
class SetLocalArgs(_ArgsBase[None]):
    int1: int
    int2: int
    bytes1: str
    bytes2: bytes | tuple[int, int, int, int]

    @staticmethod
    def method() -> str:
        return "set_local(uint64,uint64,string,byte[4])void"


@dataclasses.dataclass(kw_only=True)
class SetBoxArgs(_ArgsBase[None]):
    name: bytes | tuple[int, int, int, int]
    value: str

    @staticmethod
    def method() -> str:
        return "set_box(byte[4],string)void"


@dataclasses.dataclass(kw_only=True)
class ErrorArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "error()void"


@dataclasses.dataclass(kw_only=True)
class DefaultValueArgs(_ArgsBase[str]):
    arg_with_default: str | None = None

    @staticmethod
    def method() -> str:
        return "default_value(string)string"


@dataclasses.dataclass(kw_only=True)
class DefaultValueFromAbiArgs(_ArgsBase[str]):
    arg_with_default: str | None = None

    @staticmethod
    def method() -> str:
        return "default_value_from_abi(string)string"


@dataclasses.dataclass(kw_only=True)
class CreateAbiArgs(_ArgsBase[str]):
    input: str

    @staticmethod
    def method() -> str:
        return "create_abi(string)string"


@dataclasses.dataclass(kw_only=True)
class UpdateAbiArgs(_ArgsBase[str]):
    input: str

    @staticmethod
    def method() -> str:
        return "update_abi(string)string"


@dataclasses.dataclass(kw_only=True)
class DeleteAbiArgs(_ArgsBase[str]):
    input: str

    @staticmethod
    def method() -> str:
        return "delete_abi(string)string"


@dataclasses.dataclass(kw_only=True)
class OptInArgs(_ArgsBase[None]):
    @staticmethod
    def method() -> str:
        return "opt_in()void"


DeployCreate_CreateAbiArgs = _TypedDeployCreateArgs[CreateAbiArgs]
Deploy_UpdateAbiArgs = _TypedDeployArgs[UpdateAbiArgs]
Deploy_DeleteAbiArgs = _TypedDeployArgs[DeleteAbiArgs]


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class GlobalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.bytes1 = ByteReader(typing.cast(bytes, data.get(b"bytes1")))
        self.bytes2 = ByteReader(typing.cast(bytes, data.get(b"bytes2")))
        self.int1 = typing.cast(int, data.get(b"int1"))
        self.int2 = typing.cast(int, data.get(b"int2"))
        self.value = typing.cast(int, data.get(b"value"))


class LocalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.local_bytes1 = ByteReader(typing.cast(bytes, data.get(b"local_bytes1")))
        self.local_bytes2 = ByteReader(typing.cast(bytes, data.get(b"local_bytes2")))
        self.local_int1 = typing.cast(int, data.get(b"local_int1"))
        self.local_int2 = typing.cast(int, data.get(b"local_int2"))


class StateAppClient:
    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        self.app_spec = APP_SPEC

        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    def get_global_state(self) -> GlobalState:
        state = self.app_client.get_global_state(raw=True)
        return GlobalState(state)

    def get_local_state(self, account: str | None = None) -> LocalState:
        state = self.app_client.get_local_state(account, raw=True)
        return LocalState(state)

    def call_abi(
        self,
        *,
        value: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        args = CallAbiArgs(
            value=value,
        )
        return self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    def call_abi_txn(
        self,
        *,
        txn: TransactionWithSigner,
        value: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        args = CallAbiTxnArgs(
            txn=txn,
            value=value,
        )
        return self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    def set_global(
        self,
        *,
        int1: int,
        int2: int,
        bytes1: str,
        bytes2: bytes | tuple[int, int, int, int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        args = SetGlobalArgs(
            int1=int1,
            int2=int2,
            bytes1=bytes1,
            bytes2=bytes2,
        )
        return self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    def set_local(
        self,
        *,
        int1: int,
        int2: int,
        bytes1: str,
        bytes2: bytes | tuple[int, int, int, int],
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        args = SetLocalArgs(
            int1=int1,
            int2=int2,
            bytes1=bytes1,
            bytes2=bytes2,
        )
        return self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    def set_box(
        self,
        *,
        name: bytes | tuple[int, int, int, int],
        value: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        args = SetBoxArgs(
            name=name,
            value=value,
        )
        return self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    def error(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        args = ErrorArgs()
        return self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    def default_value(
        self,
        *,
        arg_with_default: str | None = None,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        args = DefaultValueArgs(
            arg_with_default=arg_with_default,
        )
        return self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    def default_value_from_abi(
        self,
        *,
        arg_with_default: str | None = None,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        args = DefaultValueFromAbiArgs(
            arg_with_default=arg_with_default,
        )
        return self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    @typing.overload
    def create(
        self,
        *,
        args: typing.Literal[None] = None,
        on_complete: typing.Literal["no_op", "opt_in"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        ...

    @typing.overload
    def create(
        self,
        *,
        args: CreateAbiArgs,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        ...

    def create(
        self,
        *,
        args: CreateAbiArgs | None = None,
        on_complete: typing.Literal["no_op", "opt_in"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> (
        algokit_utils.TransactionResponse
        | algokit_utils.ABITransactionResponse[str]
    ):
        return self.app_client.create(
            call_abi_method=args.method() if args else False,
            transaction_parameters=_as_dict(transaction_parameters) | {"on_complete": _convert_on_complete(on_complete)},
            **_as_dict(args),
        )

    @typing.overload
    def update(
        self,
        *,
        args: typing.Literal[None] = None,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        ...

    @typing.overload
    def update(
        self,
        *,
        args: UpdateAbiArgs,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        ...

    def update(
        self,
        *,
        args: UpdateAbiArgs | None = None,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> (
        algokit_utils.TransactionResponse
        | algokit_utils.ABITransactionResponse[str]
    ):
        return self.app_client.update(
            call_abi_method=args.method() if args else False,
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    @typing.overload
    def delete(
        self,
        *,
        args: typing.Literal[None] = None,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        ...

    @typing.overload
    def delete(
        self,
        *,
        args: DeleteAbiArgs,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[str]:
        ...

    def delete(
        self,
        *,
        args: DeleteAbiArgs | None = None,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> (
        algokit_utils.TransactionResponse
        | algokit_utils.ABITransactionResponse[str]
    ):
        return self.app_client.delete(
            call_abi_method=args.method() if args else False,
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    def opt_in(
        self,
        *,
        args: OptInArgs,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        return self.app_client.opt_in(
            call_abi_method=args.method() if args else False,
            transaction_parameters=_as_dict(transaction_parameters),
            **_as_dict(args),
        )

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        return self.app_client.clear_state(_as_dict(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: DeployCreate_CreateAbiArgs | algokit_utils.DeployCallArgs | None = None,
        update_args: Deploy_UpdateAbiArgs | algokit_utils.DeployCallArgs | None = None,
        delete_args: Deploy_DeleteAbiArgs | algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )
