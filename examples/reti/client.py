# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [4, 56], "bareActions": {"call": [], "create": []}, "methods": [{"actions": {"call": [], "create": ["NoOp"]}, "args": [], "name": "createApplication", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "approvalProgramSize"}], "name": "initStakingContract", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "offset"}, {"type": "byte[]", "name": "data"}], "name": "loadStakingContractData", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "finalizeStakingContract", "returns": {"type": "void"}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "gas", "returns": {"type": "void"}, "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost"}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "getMbrAmounts", "returns": {"type": "(uint64,uint64,uint64,uint64)", "struct": "MbrAmounts"}, "desc": "Returns the MBR amounts needed for various actions:\n[\n addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract\n addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator\n poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself\n addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)\n]", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "getProtocolConstraints", "returns": {"type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", "struct": "Constraints"}, "desc": "Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "getNumValidators", "returns": {"type": "uint64"}, "desc": "Returns the current number of validators", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "validatorId"}], "name": "getValidatorConfig", "returns": {"type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)", "struct": "ValidatorConfig"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "validatorId"}], "name": "getValidatorState", "returns": {"type": "(uint16,uint64,uint64,uint64)", "struct": "ValidatorCurState"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "validatorId"}], "name": "getValidatorOwnerAndManager", "returns": {"type": "(address,address)"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "PoolInfo[] - array of pools\nNot callable from other contracts because 1K return but can be called w/ simulate which bumps log returns", "name": "validatorId"}], "name": "getPools", "returns": {"type": "(uint64,uint16,uint64)[]"}, "desc": "Return list of all pools for this validator.", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "validatorId"}, {"type": "uint64", "name": "poolId"}], "name": "getPoolAppId", "returns": {"type": "uint64"}, "desc": "getPoolAppId is useful for callers to determine app to call for removing stake if they don't have staking or\nwant to get staker list for an account.  The staking pool also uses it to get the app id of staking pool 1\n(which contains reward tokens if being used) so that the amount available can be determined.", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(uint64,uint64,uint64)", "name": "poolKey", "struct": "ValidatorPoolKey"}], "name": "getPoolInfo", "returns": {"type": "(uint64,uint16,uint64)", "struct": "PoolInfo"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The id of the validator.", "name": "validatorId"}], "name": "getCurMaxStakePerPool", "returns": {"type": "uint64"}, "desc": "Calculate the maximum stake per pool for a given validator.\nNormally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so\nas pools are added the max allowed per pool can reduce.", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "name": "staker"}], "name": "doesStakerNeedToPayMBR", "returns": {"type": "bool"}, "desc": "Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "address", "desc": "The account to retrieve staked pools for.\n ValidatorPoolKey[] - The array of staked pools for the account.", "name": "staker"}], "name": "getStakedPoolsForAccount", "returns": {"type": "(uint64,uint64,uint64)[]"}, "desc": "Retrieves the staked pools for an account.", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The id of the validator.\n PoolTokenPayoutRatio - The token payout ratio for the validator.", "name": "validatorId"}], "name": "getTokenPayoutRatio", "returns": {"type": "(uint64[24],uint64)", "struct": "PoolTokenPayoutRatio"}, "desc": "Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token\npayouts across pools can be based on a stable snaphost of stake.", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "validatorId"}], "name": "getNodePoolAssignments", "returns": {"type": "((uint64[3])[8])", "struct": "NodePoolAssignmentConfig"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "getNFDRegistryID", "returns": {"type": "uint64"}, "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "desc": "payment from caller which covers mbr increase of new validator storage", "name": "mbrPayment"}, {"type": "string", "desc": "(Optional) Name of nfd (used as double-check against id specified in config)", "name": "nfdName"}, {"type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)", "desc": "ValidatorConfig struct", "name": "config", "struct": "ValidatorConfig"}], "name": "addValidator", "returns": {"type": "uint64", "desc": "uint64 validator id"}, "desc": "Adds a new validator\nRequires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds.", "events": [{"args": [{"type": "uint64", "name": "id"}, {"type": "address", "name": "owner"}, {"type": "address", "name": "manager"}], "name": "retiOP_addedValidator", "desc": "Logs the addition of a new validator to the system, its initial owner and manager"}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The id of the validator to change the manager for.", "name": "validatorId"}, {"type": "address", "desc": "The new manager address.", "name": "manager"}], "name": "changeValidatorManager", "returns": {"type": "void"}, "desc": "Changes the Validator manager for a specific Validator id.\n[ ONLY OWNER CAN CHANGE ]"}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The id of the validator to update.", "name": "validatorId"}, {"type": "uint64", "desc": "The new sunset timestamp.", "name": "sunsettingOn"}, {"type": "uint64", "desc": "The new sunset to validator id.", "name": "sunsettingTo"}], "name": "changeValidatorSunsetInfo", "returns": {"type": "void"}, "desc": "Updates the sunset information for a given validator.\n[ ONLY OWNER CAN CHANGE ]"}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The id of the validator to update.", "name": "validatorId"}, {"type": "uint64", "desc": "The application id of the NFD to assign to the validator.", "name": "nfdAppID"}, {"type": "string", "desc": "The name of the NFD (which must match)", "name": "nfdName"}], "name": "changeValidatorNFD", "returns": {"type": "void"}, "desc": "Changes the NFD for a validator in the validatorList contract.\n[ ONLY OWNER CAN CHANGE ]"}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "validatorId"}, {"type": "address", "name": "commissionAddress"}], "name": "changeValidatorCommissionAddress", "returns": {"type": "void"}, "desc": "Change the commission address that validator rewards are sent to.\n     [ ONLY OWNER CAN CHANGE ]"}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "validatorId"}, {"type": "uint8", "name": "EntryGatingType"}, {"type": "address", "name": "EntryGatingAddress"}, {"type": "uint64[4]", "name": "EntryGatingAssets"}, {"type": "uint64", "name": "GatingAssetMinBalance"}, {"type": "uint64", "name": "RewardPerPayout"}], "name": "changeValidatorRewardInfo", "returns": {"type": "void"}, "desc": "Allow the additional rewards (gating entry, additional token rewards) information be changed at will.\n[ ONLY OWNER CAN CHANGE ]"}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "desc": "payment from caller which covers mbr increase of adding a new pool", "name": "mbrPayment"}, {"type": "uint64", "desc": "is id of validator to pool to (must be owner or manager)", "name": "validatorId"}, {"type": "uint64", "desc": "is node number to add to", "name": "nodeNum"}], "name": "addPool", "returns": {"type": "(uint64,uint64,uint64)", "desc": "ValidatorPoolKey pool key to created pool", "struct": "ValidatorPoolKey"}, "desc": "Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.\nThe caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.\n\n\n[ ONLY OWNER OR MANAGER CAN call ]", "events": [{"args": [{"type": "uint64", "name": "id"}, {"type": "uint16", "name": "num"}, {"type": "uint64", "name": "poolAppId"}], "name": "retiOP_validatorAddedPool", "desc": "Logs the addition of a new pool to a particular validator ID"}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "desc": "payment coming from staker to place into a pool", "name": "stakedAmountPayment"}, {"type": "uint64", "desc": "The id of the validator.", "name": "validatorId"}, {"type": "uint64", "desc": "only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.\nTxn sender is factored in as well if that is part of gating.\n*", "name": "valueToVerify"}], "name": "addStake", "returns": {"type": "(uint64,uint64,uint64)", "desc": "ValidatorPoolKey - The key of the validator pool.", "struct": "ValidatorPoolKey"}, "desc": "Adds stake to a validator pool.", "events": [{"args": [{"type": "uint64", "name": "id"}, {"type": "uint16", "name": "poolNum"}, {"type": "uint64", "name": "poolAppId"}, {"type": "address", "name": "staker"}, {"type": "uint64", "name": "amountStaked"}], "name": "retiOP_stakeAdded", "desc": "Logs how much stake was added by a staker to a particular staking pool"}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator.", "name": "validatorId"}], "name": "setTokenPayoutRatio", "returns": {"type": "(uint64[24],uint64)", "desc": "PoolTokenPayoutRatio - the finished ratio data", "struct": "PoolTokenPayoutRatio"}, "desc": "setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios\nof stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40\nin pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by\npool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.\nIt would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of\ntheir 'current' stake which changes as part of the payouts themselves (and people could be changing stake\nduring the epoch updates across pools)\n\n\nMultiple pools will call us via pool 1 (pool2-pool1-validator, etc.) so don't assert on pool1 calling multiple\ntimes in same epoch.  Just return."}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(uint64,uint64,uint64)", "desc": "ValidatorPoolKey type", "name": "poolKey", "struct": "ValidatorPoolKey"}, {"type": "uint64", "desc": "amount this validator's total stake increased via rewards", "name": "algoToAdd"}, {"type": "uint64", "desc": "amount this validator's total stake increased via rewards (that should be", "name": "rewardTokenAmountReserved"}, {"type": "uint64", "desc": "the commission amount the validator was paid, if any", "name": "validatorCommission"}, {"type": "uint64", "desc": "if the pool was in saturated state, the amount sent back to the fee sink.\nseen as 'accounted for/pending spent')", "name": "saturatedBurnToFeeSink"}], "name": "stakeUpdatedViaRewards", "returns": {"type": "void"}, "desc": "stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total\nstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.\nThe calling App id is validated against our pool list as well.", "events": [{"args": [{"type": "uint64", "name": "id"}, {"type": "uint16", "name": "poolNum"}, {"type": "uint64", "name": "poolAppId"}, {"type": "uint64", "name": "validatorCommission"}, {"type": "uint64", "name": "saturatedBurnToFeeSink"}, {"type": "uint64", "name": "algoAdded"}, {"type": "uint64", "name": "rewardTokenHeldBack"}], "name": "retiOP_epochRewardUpdate", "desc": "Logs how much algo was detected as being added to a staking pool as part of epoch reward calculations.\nCommission amount to validator, excess burned if pool is saturated, and the amount of tokens held back are logged as well."}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(uint64,uint64,uint64)", "desc": "calling us from which stake was removed", "name": "poolKey", "struct": "ValidatorPoolKey"}, {"type": "address", "name": "staker"}, {"type": "uint64", "desc": "algo amount removed", "name": "amountRemoved"}, {"type": "uint64", "desc": "if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)", "name": "rewardRemoved"}, {"type": "bool", "name": "stakerRemoved"}], "name": "stakeRemoved", "returns": {"type": "void"}, "desc": "stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed\nfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.\nIf any amount of rewardRemoved is specified, then that amount of reward is sent to the use\nThe calling App id is validated against our pool list as well.", "events": [{"args": [{"type": "uint64", "name": "id"}, {"type": "uint16", "name": "poolNum"}, {"type": "uint64", "name": "poolAppId"}, {"type": "address", "name": "staker"}, {"type": "uint64", "name": "amountUnstaked"}, {"type": "uint64", "name": "rewardTokensReceived"}, {"type": "uint64", "name": "rewardTokenAssetId"}], "name": "retiOP_stakeRemoved", "desc": "Logs how much stake was removed by a staker from a particular staking pool"}]}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The id of the validator.", "name": "validatorId"}, {"type": "address", "desc": "The address of the staker.", "name": "staker"}, {"type": "uint64", "desc": "The amount to stake.", "name": "amountToStake"}], "name": "findPoolForStaker", "returns": {"type": "((uint64,uint64,uint64),bool,bool)", "desc": "ValidatorPoolKey, boolean, boolean - The pool for the staker, true/false on whether the staker is 'new'\nto this VALIDATOR, and true/false if staker is new to the protocol."}, "desc": "Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.\nFirst checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds\nto new pool if necessary.", "readonly": true}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The id of the validator.", "name": "validatorId"}, {"type": "uint64", "name": "poolAppId"}, {"type": "uint64", "name": "nodeNum"}], "name": "movePoolToNode", "returns": {"type": "void"}, "desc": "Find the specified pool (in any node number) and move it to the specified node.\nThe pool account is forced offline if moved so prior node will still run for 320 rounds but\nnew key goes online on new node soon after (320 rounds after it goes online)\nNo-op if success, asserts if not found or can't move  (no space in target)\n[ ONLY OWNER OR MANAGER CAN CHANGE ]"}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "desc": "The id of the validator.", "name": "validatorId"}, {"type": "address", "desc": "the account to send the tokens to (must already be opted-in to the reward token)", "name": "receiver"}], "name": "emptyTokenRewards", "returns": {"type": "uint64", "desc": "uint64 the amount of reward token sent"}, "desc": "Sends the reward tokens held in pool 1 to specified receiver.\nThis is intended to be used by the owner when they want to get reward tokens 'back' which they sent to\nthe first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will\nNOT be sent as they must be held back for stakers to later claim.\n[ ONLY OWNER CAN CALL]"}], "name": "ValidatorRegistry", "state": {"keys": {"box": {"staking_pool_approval_program": {"key": "cG9vbFRlbXBsYXRlQXBwcm92YWxCeXRlcw==", "keyType": "AVMBytes", "valueType": "AVMBytes"}}, "global": {"staking_pool_initialized": {"key": "aW5pdA==", "keyType": "AVMBytes", "valueType": "bool"}, "num_validators": {"key": "bnVtVg==", "keyType": "AVMBytes", "valueType": "uint64"}, "num_stakers": {"key": "bnVtU3Rha2Vycw==", "keyType": "AVMBytes", "valueType": "uint64"}, "total_algo_staked": {"key": "c3Rha2Vk", "keyType": "AVMBytes", "valueType": "uint64"}}, "local": {}}, "maps": {"box": {"validator_list": {"keyType": "uint64", "valueType": "ValidatorInfo", "prefix": "dg=="}, "staker_pool_set": {"keyType": "address", "valueType": "(uint64,uint64,uint64)[6]", "prefix": "c3Bz"}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 3}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"ValidatorInfo": [{"name": "config", "type": [{"name": "id", "type": "uint64"}, {"name": "owner", "type": "address"}, {"name": "manager", "type": "address"}, {"name": "nfdForInfo", "type": "uint64"}, {"name": "entryGatingType", "type": "uint8"}, {"name": "entryGatingAddress", "type": "address"}, {"name": "entryGatingAssets", "type": "uint64[4]"}, {"name": "gatingAssetMinBalance", "type": "uint64"}, {"name": "rewardTokenId", "type": "uint64"}, {"name": "rewardPerPayout", "type": "uint64"}, {"name": "epochRoundLength", "type": "uint32"}, {"name": "percentToValidator", "type": "uint32"}, {"name": "validatorCommissionAddress", "type": "address"}, {"name": "minEntryStake", "type": "uint64"}, {"name": "maxAlgoPerPool", "type": "uint64"}, {"name": "poolsPerNode", "type": "uint8"}, {"name": "sunsettingOn", "type": "uint64"}, {"name": "sunsettingTo", "type": "uint64"}]}, {"name": "state", "type": [{"name": "numPools", "type": "uint16"}, {"name": "totalStakers", "type": "uint64"}, {"name": "totalAlgoStaked", "type": "uint64"}, {"name": "rewardTokenHeldBack", "type": "uint64"}]}, {"name": "pools", "type": "(uint64,uint16,uint64)[24]"}, {"name": "tokenPayoutRatio", "type": [{"name": "poolPctOfWhole", "type": "uint64[24]"}, {"name": "updatedForPayout", "type": "uint64"}]}, {"name": "nodePoolAssignments", "type": [{"name": "nodes", "type": "(uint64[3])[8]"}]}], "MbrAmounts": [{"name": "addValidatorMbr", "type": "uint64"}, {"name": "addPoolMbr", "type": "uint64"}, {"name": "poolInitMbr", "type": "uint64"}, {"name": "addStakerMbr", "type": "uint64"}], "Constraints": [{"name": "epochPayoutRoundsMin", "type": "uint64"}, {"name": "epochPayoutRoundsMax", "type": "uint64"}, {"name": "minPctToValidatorWFourDecimals", "type": "uint64"}, {"name": "maxPctToValidatorWFourDecimals", "type": "uint64"}, {"name": "minEntryStake", "type": "uint64"}, {"name": "maxAlgoPerPool", "type": "uint64"}, {"name": "maxAlgoPerValidator", "type": "uint64"}, {"name": "amtConsideredSaturated", "type": "uint64"}, {"name": "maxNodes", "type": "uint64"}, {"name": "maxPoolsPerNode", "type": "uint64"}, {"name": "maxStakersPerPool", "type": "uint64"}], "ValidatorConfig": [{"name": "id", "type": "uint64"}, {"name": "owner", "type": "address"}, {"name": "manager", "type": "address"}, {"name": "nfdForInfo", "type": "uint64"}, {"name": "entryGatingType", "type": "uint8"}, {"name": "entryGatingAddress", "type": "address"}, {"name": "entryGatingAssets", "type": "uint64[4]"}, {"name": "gatingAssetMinBalance", "type": "uint64"}, {"name": "rewardTokenId", "type": "uint64"}, {"name": "rewardPerPayout", "type": "uint64"}, {"name": "epochRoundLength", "type": "uint32"}, {"name": "percentToValidator", "type": "uint32"}, {"name": "validatorCommissionAddress", "type": "address"}, {"name": "minEntryStake", "type": "uint64"}, {"name": "maxAlgoPerPool", "type": "uint64"}, {"name": "poolsPerNode", "type": "uint8"}, {"name": "sunsettingOn", "type": "uint64"}, {"name": "sunsettingTo", "type": "uint64"}], "ValidatorCurState": [{"name": "numPools", "type": "uint16"}, {"name": "totalStakers", "type": "uint64"}, {"name": "totalAlgoStaked", "type": "uint64"}, {"name": "rewardTokenHeldBack", "type": "uint64"}], "PoolInfo": [{"name": "poolAppId", "type": "uint64"}, {"name": "totalStakers", "type": "uint16"}, {"name": "totalAlgoStaked", "type": "uint64"}], "ValidatorPoolKey": [{"name": "id", "type": "uint64"}, {"name": "poolId", "type": "uint64"}, {"name": "poolAppId", "type": "uint64"}], "PoolTokenPayoutRatio": [{"name": "poolPctOfWhole", "type": "uint64[24]"}, {"name": "updatedForPayout", "type": "uint64"}], "NodePoolAssignmentConfig": [{"name": "nodes", "type": "(uint64[3])[8]"}]}, "compilerInfo": {"compiler": "algod", "compilerVersion": {"commitHash": "0d10b244", "major": 3, "minor": 26, "patch": 0}}, "desc": "", "events": [{"args": [{"type": "uint64", "name": "id"}, {"type": "address", "name": "owner"}, {"type": "address", "name": "manager"}], "name": "retiOP_addedValidator", "desc": "Logs the addition of a new validator to the system, its initial owner and manager"}, {"args": [{"type": "uint64", "name": "id"}, {"type": "uint16", "name": "num"}, {"type": "uint64", "name": "poolAppId"}], "name": "retiOP_validatorAddedPool", "desc": "Logs the addition of a new pool to a particular validator ID"}, {"args": [{"type": "uint64", "name": "id"}, {"type": "uint16", "name": "poolNum"}, {"type": "uint64", "name": "poolAppId"}, {"type": "address", "name": "staker"}, {"type": "uint64", "name": "amountStaked"}], "name": "retiOP_stakeAdded", "desc": "Logs how much stake was added by a staker to a particular staking pool"}, {"args": [{"type": "uint64", "name": "id"}, {"type": "uint16", "name": "poolNum"}, {"type": "uint64", "name": "poolAppId"}, {"type": "uint64", "name": "validatorCommission"}, {"type": "uint64", "name": "saturatedBurnToFeeSink"}, {"type": "uint64", "name": "algoAdded"}, {"type": "uint64", "name": "rewardTokenHeldBack"}], "name": "retiOP_epochRewardUpdate", "desc": "Logs how much algo was detected as being added to a staking pool as part of epoch reward calculations.\nCommission amount to validator, excess burned if pool is saturated, and the amount of tokens held back are logged as well."}, {"args": [{"type": "uint64", "name": "id"}, {"type": "uint16", "name": "poolNum"}, {"type": "uint64", "name": "poolAppId"}, {"type": "address", "name": "staker"}, {"type": "uint64", "name": "amountUnstaked"}, {"type": "uint64", "name": "rewardTokensReceived"}, {"type": "uint64", "name": "rewardTokenAssetId"}], "name": "retiOP_stakeRemoved", "desc": "Logs how much stake was removed by a staker from a particular staking pool"}], "scratchVariables": {"nfd_registry_app_id": {"slot": 200, "type": "uint64"}}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx"}, "sourceInfo": {"approval": {"pcOffsetMethod": "cblocks", "sourceInfo": [{"pc": [1, 2], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 15}, {"pc": [3], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 16}, {"pc": [4, 5], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 17}, {"pc": [6], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 18}, {"pc": [7, 8], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 19}, {"pc": [9], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 20}, {"pc": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 21}, {"pc": [36], "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?", "source": "contracts/validatorRegistry.algo.ts:50", "teal": 25}, {"pc": [37, 38, 39], "source": "contracts/validatorRegistry.algo.ts:81", "teal": 30}, {"pc": [40], "source": "contracts/validatorRegistry.algo.ts:81", "teal": 31}, {"pc": [41], "source": "contracts/validatorRegistry.algo.ts:81", "teal": 32}, {"pc": [42, 43, 44], "source": "contracts/validatorRegistry.algo.ts:81", "teal": 36}, {"pc": [45, 46], "source": "contracts/validatorRegistry.algo.ts:82", "teal": 40}, {"pc": [47], "source": "contracts/validatorRegistry.algo.ts:82", "teal": 41}, {"pc": [48, 49], "source": "contracts/validatorRegistry.algo.ts:82", "teal": 42}, {"pc": [50], "source": "contracts/validatorRegistry.algo.ts:82", "teal": 43}, {"pc": [51, 52], "source": "contracts/validatorRegistry.algo.ts:82", "teal": 44}, {"pc": [53], "source": "contracts/validatorRegistry.algo.ts:82", "teal": 45}, {"pc": [54], "source": "contracts/validatorRegistry.algo.ts:82", "teal": 46}, {"pc": [55, 56], "source": "contracts/validatorRegistry.algo.ts:83", "teal": 50}, {"pc": [57], "source": "contracts/validatorRegistry.algo.ts:83", "teal": 51}, {"pc": [58], "source": "contracts/validatorRegistry.algo.ts:83", "teal": 52}, {"pc": [59, 60], "source": "contracts/validatorRegistry.algo.ts:84", "teal": 56}, {"pc": [61], "source": "contracts/validatorRegistry.algo.ts:84", "teal": 57}, {"pc": [62], "source": "contracts/validatorRegistry.algo.ts:84", "teal": 58}, {"pc": [63, 64], "source": "contracts/validatorRegistry.algo.ts:85", "teal": 62}, {"pc": [65], "source": "contracts/validatorRegistry.algo.ts:85", "teal": 63}, {"pc": [66], "source": "contracts/validatorRegistry.algo.ts:85", "teal": 64}, {"pc": [67], "source": "contracts/validatorRegistry.algo.ts:81", "teal": 65}, {"pc": [68, 69, 70], "source": "contracts/validatorRegistry.algo.ts:88", "teal": 70}, {"pc": [71], "source": "contracts/validatorRegistry.algo.ts:88", "teal": 71}, {"pc": [72, 73, 74], "source": "contracts/validatorRegistry.algo.ts:88", "teal": 74}, {"pc": [75], "source": "contracts/validatorRegistry.algo.ts:88", "teal": 75}, {"pc": [76], "source": "contracts/validatorRegistry.algo.ts:88", "teal": 76}, {"pc": [77, 78, 79], "source": "contracts/validatorRegistry.algo.ts:88", "teal": 80}, {"pc": [80, 81], "source": "contracts/validatorRegistry.algo.ts:90", "teal": 84}, {"pc": [82, 83], "source": "contracts/validatorRegistry.algo.ts:90", "teal": 85}, {"pc": [84], "source": "contracts/validatorRegistry.algo.ts:90", "teal": 86}, {"pc": [85], "source": "contracts/validatorRegistry.algo.ts:90", "teal": 87}, {"pc": [86], "source": "contracts/validatorRegistry.algo.ts:88", "teal": 88}, {"pc": [87, 88, 89], "source": "contracts/validatorRegistry.algo.ts:93", "teal": 93}, {"pc": [90, 91, 92], "source": "contracts/validatorRegistry.algo.ts:93", "teal": 94}, {"pc": [93, 94, 95], "source": "contracts/validatorRegistry.algo.ts:93", "teal": 97}, {"pc": [96], "source": "contracts/validatorRegistry.algo.ts:93", "teal": 98}, {"pc": [97, 98, 99], "source": "contracts/validatorRegistry.algo.ts:93", "teal": 101}, {"pc": [100], "source": "contracts/validatorRegistry.algo.ts:93", "teal": 102}, {"pc": [101], "source": "contracts/validatorRegistry.algo.ts:93", "teal": 103}, {"pc": [102, 103, 104], "source": "contracts/validatorRegistry.algo.ts:93", "teal": 107}, {"pc": [105, 106], "source": "contracts/validatorRegistry.algo.ts:94", "teal": 111}, {"pc": [107], "source": "contracts/validatorRegistry.algo.ts:94", "teal": 112}, {"pc": [108], "source": "contracts/validatorRegistry.algo.ts:94", "teal": 113}, {"pc": [109], "source": "contracts/validatorRegistry.algo.ts:94", "teal": 114}, {"pc": [110], "source": "contracts/validatorRegistry.algo.ts:94", "teal": 115}, {"pc": [111], "source": "contracts/validatorRegistry.algo.ts:94", "teal": 116}, {"pc": [112, 113], "source": "contracts/validatorRegistry.algo.ts:95", "teal": 120}, {"pc": [114, 115], "source": "contracts/validatorRegistry.algo.ts:95", "teal": 121}, {"pc": [116, 117], "source": "contracts/validatorRegistry.algo.ts:95", "teal": 122}, {"pc": [118], "source": "contracts/validatorRegistry.algo.ts:95", "teal": 123}, {"pc": [119], "source": "contracts/validatorRegistry.algo.ts:93", "teal": 124}, {"pc": [120, 121, 122], "source": "contracts/validatorRegistry.algo.ts:98", "teal": 129}, {"pc": [123], "source": "contracts/validatorRegistry.algo.ts:98", "teal": 130}, {"pc": [124], "source": "contracts/validatorRegistry.algo.ts:98", "teal": 131}, {"pc": [125, 126, 127], "source": "contracts/validatorRegistry.algo.ts:98", "teal": 135}, {"pc": [128, 129], "source": "contracts/validatorRegistry.algo.ts:99", "teal": 139}, {"pc": [130], "source": "contracts/validatorRegistry.algo.ts:99", "teal": 140}, {"pc": [131, 132], "source": "contracts/validatorRegistry.algo.ts:99", "teal": 141}, {"pc": [133], "source": "contracts/validatorRegistry.algo.ts:99", "teal": 142}, {"pc": [134, 135], "source": "contracts/validatorRegistry.algo.ts:99", "teal": 143}, {"pc": [136], "source": "contracts/validatorRegistry.algo.ts:99", "teal": 144}, {"pc": [137], "source": "contracts/validatorRegistry.algo.ts:99", "teal": 145}, {"pc": [138], "source": "contracts/validatorRegistry.algo.ts:98", "teal": 146}, {"pc": [139, 140, 141], "source": "contracts/validatorRegistry.algo.ts:105", "teal": 151}, {"pc": [142], "source": "contracts/validatorRegistry.algo.ts:105", "teal": 152}, {"pc": [143], "source": "contracts/validatorRegistry.algo.ts:105", "teal": 153}, {"pc": [144, 145, 146], "source": "contracts/validatorRegistry.algo.ts:105", "teal": 159}, {"pc": [147], "source": "contracts/validatorRegistry.algo.ts:105", "teal": 160}, {"pc": [148], "source": "contracts/validatorRegistry.algo.ts:116", "teal": 165}, {"pc": [149, 150, 151], "source": "contracts/validatorRegistry.algo.ts:116", "teal": 168}, {"pc": [152], "source": "contracts/validatorRegistry.algo.ts:116", "teal": 169}, {"pc": [153], "source": "contracts/validatorRegistry.algo.ts:116", "teal": 170}, {"pc": [154], "source": "contracts/validatorRegistry.algo.ts:116", "teal": 171}, {"pc": [155], "source": "contracts/validatorRegistry.algo.ts:116", "teal": 172}, {"pc": [156, 157, 158], "source": "contracts/validatorRegistry.algo.ts:116", "teal": 184}, {"pc": [159, 160, 161], "source": "contracts/validatorRegistry.algo.ts:121", "teal": 209}, {"pc": [162, 163, 164], "source": "contracts/validatorRegistry.algo.ts:121", "teal": 210}, {"pc": [165], "source": "contracts/validatorRegistry.algo.ts:121", "teal": 211}, {"pc": [166, 167], "source": "contracts/validatorRegistry.algo.ts:131", "teal": 212}, {"pc": [168, 169], "source": "contracts/validatorRegistry.algo.ts:130", "teal": 213}, {"pc": [170], "source": "contracts/validatorRegistry.algo.ts:129", "teal": 214}, {"pc": [171, 172], "source": "contracts/validatorRegistry.algo.ts:129", "teal": 215}, {"pc": [173, 174], "source": "contracts/validatorRegistry.algo.ts:126", "teal": 216}, {"pc": [175], "source": "contracts/validatorRegistry.algo.ts:123", "teal": 217}, {"pc": [176, 177, 178], "source": "contracts/validatorRegistry.algo.ts:122", "teal": 218}, {"pc": [179], "source": "contracts/validatorRegistry.algo.ts:122", "teal": 219}, {"pc": [180], "source": "contracts/validatorRegistry.algo.ts:122", "teal": 220}, {"pc": [181, 182], "source": "contracts/validatorRegistry.algo.ts:134", "teal": 221}, {"pc": [183, 184, 185], "source": "contracts/validatorRegistry.algo.ts:135", "teal": 222}, {"pc": [186, 187, 188], "source": "contracts/validatorRegistry.algo.ts:135", "teal": 223}, {"pc": [189], "source": "contracts/validatorRegistry.algo.ts:134", "teal": 224}, {"pc": [190], "source": "contracts/validatorRegistry.algo.ts:134", "teal": 225}, {"pc": [191], "source": "contracts/validatorRegistry.algo.ts:134", "teal": 226}, {"pc": [192, 193, 194], "source": "contracts/validatorRegistry.algo.ts:139", "teal": 227}, {"pc": [195, 196, 197], "source": "contracts/validatorRegistry.algo.ts:138", "teal": 228}, {"pc": [198], "source": "contracts/validatorRegistry.algo.ts:138", "teal": 229}, {"pc": [199], "source": "contracts/validatorRegistry.algo.ts:138", "teal": 230}, {"pc": [200], "source": "contracts/validatorRegistry.algo.ts:116", "teal": 231}, {"pc": [201], "source": "contracts/validatorRegistry.algo.ts:147", "teal": 236}, {"pc": [202, 203, 204], "source": "contracts/validatorRegistry.algo.ts:147", "teal": 239}, {"pc": [205], "source": "contracts/validatorRegistry.algo.ts:147", "teal": 240}, {"pc": [206], "source": "contracts/validatorRegistry.algo.ts:147", "teal": 241}, {"pc": [207], "source": "contracts/validatorRegistry.algo.ts:147", "teal": 242}, {"pc": [208], "source": "contracts/validatorRegistry.algo.ts:147", "teal": 243}, {"pc": [209, 210, 211], "source": "contracts/validatorRegistry.algo.ts:147", "teal": 249}, {"pc": [212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253], "source": "contracts/validatorRegistry.algo.ts:154", "teal": 265}, {"pc": [254, 255, 256], "source": "contracts/validatorRegistry.algo.ts:155", "teal": 266}, {"pc": [257], "source": "contracts/validatorRegistry.algo.ts:155", "teal": 267}, {"pc": [258], "source": "contracts/validatorRegistry.algo.ts:155", "teal": 268}, {"pc": [259, 260, 261], "source": "contracts/validatorRegistry.algo.ts:156", "teal": 269}, {"pc": [262], "source": "contracts/validatorRegistry.algo.ts:156", "teal": 270}, {"pc": [263], "source": "contracts/validatorRegistry.algo.ts:156", "teal": 271}, {"pc": [264, 265, 266], "source": "contracts/validatorRegistry.algo.ts:157", "teal": 272}, {"pc": [267], "source": "contracts/validatorRegistry.algo.ts:157", "teal": 273}, {"pc": [268], "source": "contracts/validatorRegistry.algo.ts:157", "teal": 274}, {"pc": [269, 270, 271, 272, 273, 274, 275, 276, 277, 278], "source": "contracts/validatorRegistry.algo.ts:158", "teal": 275}, {"pc": [279], "source": "contracts/validatorRegistry.algo.ts:158", "teal": 276}, {"pc": [280, 281, 282, 283, 284, 285, 286, 287, 288, 289], "source": "contracts/validatorRegistry.algo.ts:159", "teal": 277}, {"pc": [290], "source": "contracts/validatorRegistry.algo.ts:159", "teal": 278}, {"pc": [291, 292, 293, 294, 295, 296, 297, 298, 299, 300], "source": "contracts/validatorRegistry.algo.ts:160", "teal": 279}, {"pc": [301], "source": "contracts/validatorRegistry.algo.ts:160", "teal": 280}, {"pc": [302], "source": "contracts/validatorRegistry.algo.ts:147", "teal": 281}, {"pc": [303], "source": "contracts/validatorRegistry.algo.ts:167", "teal": 286}, {"pc": [304, 305, 306], "source": "contracts/validatorRegistry.algo.ts:167", "teal": 289}, {"pc": [307], "source": "contracts/validatorRegistry.algo.ts:167", "teal": 290}, {"pc": [308], "source": "contracts/validatorRegistry.algo.ts:167", "teal": 291}, {"pc": [309], "source": "contracts/validatorRegistry.algo.ts:167", "teal": 292}, {"pc": [310], "source": "contracts/validatorRegistry.algo.ts:167", "teal": 293}, {"pc": [311], "source": "contracts/validatorRegistry.algo.ts:167", "teal": 294}, {"pc": [312, 313, 314], "source": "contracts/validatorRegistry.algo.ts:167", "teal": 300}, {"pc": [315, 316], "source": "contracts/validatorRegistry.algo.ts:169", "teal": 304}, {"pc": [317], "source": "contracts/validatorRegistry.algo.ts:169", "teal": 305}, {"pc": [318], "source": "contracts/validatorRegistry.algo.ts:167", "teal": 306}, {"pc": [319], "source": "contracts/validatorRegistry.algo.ts:172", "teal": 311}, {"pc": [320, 321, 322], "source": "contracts/validatorRegistry.algo.ts:173", "teal": 314}, {"pc": [323], "source": "contracts/validatorRegistry.algo.ts:173", "teal": 315}, {"pc": [324, 325, 326], "source": "contracts/validatorRegistry.algo.ts:172", "teal": 318}, {"pc": [327], "source": "contracts/validatorRegistry.algo.ts:172", "teal": 319}, {"pc": [328], "source": "contracts/validatorRegistry.algo.ts:172", "teal": 320}, {"pc": [329], "source": "contracts/validatorRegistry.algo.ts:172", "teal": 321}, {"pc": [330], "source": "contracts/validatorRegistry.algo.ts:172", "teal": 322}, {"pc": [331, 332, 333], "source": "contracts/validatorRegistry.algo.ts:172", "teal": 326}, {"pc": [334], "source": "contracts/validatorRegistry.algo.ts:174", "teal": 330}, {"pc": [335, 336], "source": "contracts/validatorRegistry.algo.ts:174", "teal": 331}, {"pc": [337], "source": "contracts/validatorRegistry.algo.ts:174", "teal": 332}, {"pc": [338, 339], "source": "contracts/validatorRegistry.algo.ts:174", "teal": 333}, {"pc": [340], "source": "contracts/validatorRegistry.algo.ts:174", "teal": 334}, {"pc": [341], "source": "contracts/validatorRegistry.algo.ts:174", "teal": 335}, {"pc": [342, 343], "source": "contracts/validatorRegistry.algo.ts:174", "teal": 336}, {"pc": [344], "source": "contracts/validatorRegistry.algo.ts:174", "teal": 337}, {"pc": [345], "source": "contracts/validatorRegistry.algo.ts:172", "teal": 338}, {"pc": [346], "source": "contracts/validatorRegistry.algo.ts:177", "teal": 343}, {"pc": [347, 348, 349], "source": "contracts/validatorRegistry.algo.ts:178", "teal": 346}, {"pc": [350], "source": "contracts/validatorRegistry.algo.ts:178", "teal": 347}, {"pc": [351, 352, 353], "source": "contracts/validatorRegistry.algo.ts:177", "teal": 350}, {"pc": [354], "source": "contracts/validatorRegistry.algo.ts:177", "teal": 351}, {"pc": [355], "source": "contracts/validatorRegistry.algo.ts:177", "teal": 352}, {"pc": [356], "source": "contracts/validatorRegistry.algo.ts:177", "teal": 353}, {"pc": [357], "source": "contracts/validatorRegistry.algo.ts:177", "teal": 354}, {"pc": [358, 359, 360], "source": "contracts/validatorRegistry.algo.ts:177", "teal": 358}, {"pc": [361, 362], "source": "contracts/validatorRegistry.algo.ts:179", "teal": 362}, {"pc": [363, 364], "source": "contracts/validatorRegistry.algo.ts:179", "teal": 363}, {"pc": [365], "source": "contracts/validatorRegistry.algo.ts:179", "teal": 364}, {"pc": [366, 367], "source": "contracts/validatorRegistry.algo.ts:179", "teal": 365}, {"pc": [368], "source": "contracts/validatorRegistry.algo.ts:179", "teal": 366}, {"pc": [369], "source": "contracts/validatorRegistry.algo.ts:179", "teal": 367}, {"pc": [370, 371], "source": "contracts/validatorRegistry.algo.ts:179", "teal": 368}, {"pc": [372], "source": "contracts/validatorRegistry.algo.ts:179", "teal": 369}, {"pc": [373], "source": "contracts/validatorRegistry.algo.ts:177", "teal": 370}, {"pc": [374], "source": "contracts/validatorRegistry.algo.ts:182", "teal": 375}, {"pc": [375, 376, 377], "source": "contracts/validatorRegistry.algo.ts:183", "teal": 378}, {"pc": [378], "source": "contracts/validatorRegistry.algo.ts:183", "teal": 379}, {"pc": [379, 380, 381], "source": "contracts/validatorRegistry.algo.ts:182", "teal": 382}, {"pc": [382], "source": "contracts/validatorRegistry.algo.ts:182", "teal": 383}, {"pc": [383], "source": "contracts/validatorRegistry.algo.ts:182", "teal": 384}, {"pc": [384], "source": "contracts/validatorRegistry.algo.ts:182", "teal": 385}, {"pc": [385], "source": "contracts/validatorRegistry.algo.ts:182", "teal": 386}, {"pc": [386, 387, 388], "source": "contracts/validatorRegistry.algo.ts:182", "teal": 390}, {"pc": [389], "source": "contracts/validatorRegistry.algo.ts:185", "teal": 397}, {"pc": [390, 391], "source": "contracts/validatorRegistry.algo.ts:185", "teal": 398}, {"pc": [392], "source": "contracts/validatorRegistry.algo.ts:185", "teal": 399}, {"pc": [393, 394], "source": "contracts/validatorRegistry.algo.ts:185", "teal": 400}, {"pc": [395], "source": "contracts/validatorRegistry.algo.ts:185", "teal": 401}, {"pc": [396], "source": "contracts/validatorRegistry.algo.ts:185", "teal": 402}, {"pc": [397, 398], "source": "contracts/validatorRegistry.algo.ts:185", "teal": 403}, {"pc": [399], "source": "contracts/validatorRegistry.algo.ts:185", "teal": 404}, {"pc": [400, 401], "source": "contracts/validatorRegistry.algo.ts:186", "teal": 405}, {"pc": [402, 403], "source": "contracts/validatorRegistry.algo.ts:186", "teal": 406}, {"pc": [404], "source": "contracts/validatorRegistry.algo.ts:186", "teal": 407}, {"pc": [405, 406], "source": "contracts/validatorRegistry.algo.ts:186", "teal": 408}, {"pc": [407], "source": "contracts/validatorRegistry.algo.ts:186", "teal": 409}, {"pc": [408], "source": "contracts/validatorRegistry.algo.ts:186", "teal": 410}, {"pc": [409, 410], "source": "contracts/validatorRegistry.algo.ts:186", "teal": 411}, {"pc": [411], "source": "contracts/validatorRegistry.algo.ts:186", "teal": 412}, {"pc": [412], "source": "contracts/validatorRegistry.algo.ts:186", "teal": 413}, {"pc": [413], "source": "contracts/validatorRegistry.algo.ts:182", "teal": 414}, {"pc": [414], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 419}, {"pc": [415, 416, 417], "source": "contracts/validatorRegistry.algo.ts:197", "teal": 422}, {"pc": [418], "source": "contracts/validatorRegistry.algo.ts:197", "teal": 423}, {"pc": [419, 420, 421], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 426}, {"pc": [422], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 427}, {"pc": [423], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 428}, {"pc": [424, 425], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 429}, {"pc": [426], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 430}, {"pc": [427], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 431}, {"pc": [428, 429, 430], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 432}, {"pc": [431], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 433}, {"pc": [432], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 434}, {"pc": [433], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 435}, {"pc": [434], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 436}, {"pc": [435], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 437}, {"pc": [436], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 438}, {"pc": [437, 438, 439], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 447}, {"pc": [440], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 450}, {"pc": [441, 442], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 451}, {"pc": [443], "source": "contracts/validatorRegistry.algo.ts:198", "teal": 455}, {"pc": [444, 445], "source": "contracts/validatorRegistry.algo.ts:198", "teal": 456}, {"pc": [446, 447], "source": "contracts/validatorRegistry.algo.ts:199", "teal": 460}, {"pc": [448, 449], "source": "contracts/validatorRegistry.algo.ts:199", "teal": 461}, {"pc": [450], "source": "contracts/validatorRegistry.algo.ts:199", "teal": 462}, {"pc": [451, 452], "source": "contracts/validatorRegistry.algo.ts:199", "teal": 463}, {"pc": [453], "source": "contracts/validatorRegistry.algo.ts:199", "teal": 464}, {"pc": [454], "source": "contracts/validatorRegistry.algo.ts:199", "teal": 465}, {"pc": [455, 456], "source": "contracts/validatorRegistry.algo.ts:199", "teal": 466}, {"pc": [457], "source": "contracts/validatorRegistry.algo.ts:199", "teal": 467}, {"pc": [458, 459], "source": "contracts/validatorRegistry.algo.ts:199", "teal": 468}, {"pc": [460], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 472}, {"pc": [461, 462], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 473}, {"pc": [463, 464], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 478}, {"pc": [465], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 479}, {"pc": [466], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 480}, {"pc": [467, 468, 469], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 481}, {"pc": [470, 471], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 486}, {"pc": [472, 473], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 487}, {"pc": [474, 475], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 488}, {"pc": [476], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 489}, {"pc": [477], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 490}, {"pc": [478], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 491}, {"pc": [479], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 492}, {"pc": [480], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 493}, {"pc": [481], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 494}, {"pc": [482], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 495}, {"pc": [483], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 496}, {"pc": [484, 485, 486], "source": "contracts/validatorRegistry.algo.ts:201", "teal": 497}, {"pc": [487, 488, 489], "source": "contracts/validatorRegistry.algo.ts:203", "teal": 500}, {"pc": [490, 491], "source": "contracts/validatorRegistry.algo.ts:205", "teal": 505}, {"pc": [492, 493], "source": "contracts/validatorRegistry.algo.ts:205", "teal": 506}, {"pc": [494, 495], "source": "contracts/validatorRegistry.algo.ts:205", "teal": 507}, {"pc": [496, 497], "source": "contracts/validatorRegistry.algo.ts:205", "teal": 508}, {"pc": [498], "source": "contracts/validatorRegistry.algo.ts:205", "teal": 509}, {"pc": [499, 500], "source": "contracts/validatorRegistry.algo.ts:205", "teal": 510}, {"pc": [501], "source": "contracts/validatorRegistry.algo.ts:205", "teal": 511}, {"pc": [502], "source": "contracts/validatorRegistry.algo.ts:205", "teal": 512}, {"pc": [503, 504], "source": "contracts/validatorRegistry.algo.ts:205", "teal": 513}, {"pc": [505, 506], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 518}, {"pc": [507], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 519}, {"pc": [508], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 520}, {"pc": [509, 510], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 521}, {"pc": [511, 512, 513], "source": "contracts/validatorRegistry.algo.ts:200", "teal": 522}, {"pc": [514, 515], "source": "contracts/validatorRegistry.algo.ts:207", "teal": 527}, {"pc": [516, 517], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 530}, {"pc": [518, 519], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 533}, {"pc": [520], "source": "contracts/validatorRegistry.algo.ts:196", "teal": 534}, {"pc": [521], "source": "contracts/validatorRegistry.algo.ts:215", "teal": 539}, {"pc": [522, 523, 524], "source": "contracts/validatorRegistry.algo.ts:216", "teal": 542}, {"pc": [525], "source": "contracts/validatorRegistry.algo.ts:216", "teal": 543}, {"pc": [526, 527, 528], "source": "contracts/validatorRegistry.algo.ts:216", "teal": 546}, {"pc": [529], "source": "contracts/validatorRegistry.algo.ts:216", "teal": 547}, {"pc": [530, 531, 532], "source": "contracts/validatorRegistry.algo.ts:215", "teal": 550}, {"pc": [533], "source": "contracts/validatorRegistry.algo.ts:215", "teal": 551}, {"pc": [534], "source": "contracts/validatorRegistry.algo.ts:215", "teal": 552}, {"pc": [535], "source": "contracts/validatorRegistry.algo.ts:215", "teal": 553}, {"pc": [536], "source": "contracts/validatorRegistry.algo.ts:215", "teal": 554}, {"pc": [537], "source": "contracts/validatorRegistry.algo.ts:215", "teal": 555}, {"pc": [538, 539, 540], "source": "contracts/validatorRegistry.algo.ts:215", "teal": 563}, {"pc": [541, 542], "source": "contracts/validatorRegistry.algo.ts:218", "teal": 570}, {"pc": [543], "source": "contracts/validatorRegistry.algo.ts:218", "teal": 571}, {"pc": [544], "source": "contracts/validatorRegistry.algo.ts:218", "teal": 572}, {"pc": [545], "source": "contracts/validatorRegistry.algo.ts:218", "teal": 573}, {"pc": [546, 547, 548], "source": "contracts/validatorRegistry.algo.ts:218", "teal": 574}, {"pc": [549, 550], "source": "contracts/validatorRegistry.algo.ts:218", "teal": 575}, {"pc": [551], "source": "contracts/validatorRegistry.algo.ts:218", "teal": 576}, {"pc": [552], "source": "contracts/validatorRegistry.algo.ts:218", "teal": 577}, {"pc": [553], "source": "contracts/validatorRegistry.algo.ts:218", "teal": 578}, {"pc": [554], "errorMessage": "pool id must be between 1 and number of pools for this validator", "source": "contracts/validatorRegistry.algo.ts:217", "teal": 582}, {"pc": [555, 556], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 586}, {"pc": [557, 558], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 587}, {"pc": [559], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 588}, {"pc": [560], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 589}, {"pc": [561, 562], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 590}, {"pc": [563], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 591}, {"pc": [564], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 592}, {"pc": [565], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 593}, {"pc": [566], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 594}, {"pc": [567], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 595}, {"pc": [568], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 596}, {"pc": [569, 570], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 597}, {"pc": [571], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 598}, {"pc": [572], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 599}, {"pc": [573, 574], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 600}, {"pc": [575], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 601}, {"pc": [576], "source": "contracts/validatorRegistry.algo.ts:221", "teal": 602}, {"pc": [577], "source": "contracts/validatorRegistry.algo.ts:215", "teal": 603}, {"pc": [578], "source": "contracts/validatorRegistry.algo.ts:224", "teal": 608}, {"pc": [579, 580, 581], "source": "contracts/validatorRegistry.algo.ts:225", "teal": 611}, {"pc": [582], "source": "contracts/validatorRegistry.algo.ts:225", "teal": 612}, {"pc": [583], "source": "contracts/validatorRegistry.algo.ts:225", "teal": 613}, {"pc": [584], "source": "contracts/validatorRegistry.algo.ts:225", "teal": 614}, {"pc": [585], "source": "contracts/validatorRegistry.algo.ts:225", "teal": 615}, {"pc": [586], "errorMessage": "argument 0 (poolKey) for getPoolInfo must be a (uint64,uint64,uint64)", "source": "contracts/validatorRegistry.algo.ts:225", "teal": 618}, {"pc": [587, 588, 589], "source": "contracts/validatorRegistry.algo.ts:224", "teal": 621}, {"pc": [590], "source": "contracts/validatorRegistry.algo.ts:224", "teal": 622}, {"pc": [591], "source": "contracts/validatorRegistry.algo.ts:224", "teal": 623}, {"pc": [592], "source": "contracts/validatorRegistry.algo.ts:224", "teal": 624}, {"pc": [593], "source": "contracts/validatorRegistry.algo.ts:224", "teal": 625}, {"pc": [594, 595, 596], "source": "contracts/validatorRegistry.algo.ts:224", "teal": 629}, {"pc": [597, 598], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 633}, {"pc": [599, 600], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 634}, {"pc": [601, 602, 603], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 635}, {"pc": [604], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 636}, {"pc": [605], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 637}, {"pc": [606], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 638}, {"pc": [607, 608], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 639}, {"pc": [609], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 640}, {"pc": [610], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 641}, {"pc": [611, 612], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 642}, {"pc": [613], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 643}, {"pc": [614, 615], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 644}, {"pc": [616, 617, 618], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 645}, {"pc": [619], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 646}, {"pc": [620], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 647}, {"pc": [621], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 648}, {"pc": [622, 623], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 649}, {"pc": [624], "source": "contracts/validatorRegistry.algo.ts:226", "teal": 650}, {"pc": [625], "source": "contracts/validatorRegistry.algo.ts:224", "teal": 651}, {"pc": [626], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 656}, {"pc": [627, 628, 629], "source": "contracts/validatorRegistry.algo.ts:237", "teal": 659}, {"pc": [630], "source": "contracts/validatorRegistry.algo.ts:237", "teal": 660}, {"pc": [631, 632, 633], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 663}, {"pc": [634], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 664}, {"pc": [635], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 665}, {"pc": [636], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 666}, {"pc": [637], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 667}, {"pc": [638], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 668}, {"pc": [639, 640, 641], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 678}, {"pc": [642], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 681}, {"pc": [643, 644], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 682}, {"pc": [645, 646], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 686}, {"pc": [647, 648], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 687}, {"pc": [649], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 688}, {"pc": [650, 651], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 689}, {"pc": [652], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 690}, {"pc": [653], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 691}, {"pc": [654, 655], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 692}, {"pc": [656], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 693}, {"pc": [657], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 694}, {"pc": [658, 659], "source": "contracts/validatorRegistry.algo.ts:238", "teal": 695}, {"pc": [660, 661, 662], "source": "contracts/validatorRegistry.algo.ts:239", "teal": 699}, {"pc": [663, 664], "source": "contracts/validatorRegistry.algo.ts:239", "teal": 700}, {"pc": [665], "source": "contracts/validatorRegistry.algo.ts:239", "teal": 701}, {"pc": [666, 667], "source": "contracts/validatorRegistry.algo.ts:239", "teal": 702}, {"pc": [668, 669, 670], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 706}, {"pc": [671], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 707}, {"pc": [672], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 708}, {"pc": [673, 674], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 709}, {"pc": [675], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 710}, {"pc": [676], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 711}, {"pc": [677, 678], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 712}, {"pc": [679], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 713}, {"pc": [680], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 714}, {"pc": [681, 682], "source": "contracts/validatorRegistry.algo.ts:240", "teal": 715}, {"pc": [683, 684], "source": "contracts/validatorRegistry.algo.ts:241", "teal": 720}, {"pc": [685], "source": "contracts/validatorRegistry.algo.ts:241", "teal": 721}, {"pc": [686], "source": "contracts/validatorRegistry.algo.ts:241", "teal": 722}, {"pc": [687, 688, 689], "source": "contracts/validatorRegistry.algo.ts:241", "teal": 723}, {"pc": [690, 691, 692], "source": "contracts/validatorRegistry.algo.ts:242", "teal": 728}, {"pc": [693, 694], "source": "contracts/validatorRegistry.algo.ts:242", "teal": 729}, {"pc": [695, 696], "source": "contracts/validatorRegistry.algo.ts:244", "teal": 735}, {"pc": [697, 698], "source": "contracts/validatorRegistry.algo.ts:244", "teal": 736}, {"pc": [699], "source": "contracts/validatorRegistry.algo.ts:244", "teal": 737}, {"pc": [700, 701, 702], "source": "contracts/validatorRegistry.algo.ts:244", "teal": 738}, {"pc": [703, 704], "source": "contracts/validatorRegistry.algo.ts:245", "teal": 743}, {"pc": [705, 706], "source": "contracts/validatorRegistry.algo.ts:245", "teal": 744}, {"pc": [707, 708], "source": "contracts/validatorRegistry.algo.ts:247", "teal": 749}, {"pc": [709, 710], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 752}, {"pc": [711, 712], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 755}, {"pc": [713], "source": "contracts/validatorRegistry.algo.ts:236", "teal": 756}, {"pc": [714], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 761}, {"pc": [715, 716, 717], "source": "contracts/validatorRegistry.algo.ts:255", "teal": 764}, {"pc": [718], "source": "contracts/validatorRegistry.algo.ts:255", "teal": 765}, {"pc": [719], "source": "contracts/validatorRegistry.algo.ts:255", "teal": 766}, {"pc": [720, 721], "source": "contracts/validatorRegistry.algo.ts:255", "teal": 767}, {"pc": [722], "source": "contracts/validatorRegistry.algo.ts:255", "teal": 768}, {"pc": [723], "errorMessage": "argument 0 (staker) for doesStakerNeedToPayMBR must be a address", "source": "contracts/validatorRegistry.algo.ts:255", "teal": 771}, {"pc": [724, 725, 726], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 774}, {"pc": [727, 728], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 775}, {"pc": [729], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 776}, {"pc": [730, 731], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 777}, {"pc": [732], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 778}, {"pc": [733], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 779}, {"pc": [734], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 780}, {"pc": [735], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 781}, {"pc": [736], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 782}, {"pc": [737, 738, 739], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 789}, {"pc": [740], "source": "contracts/validatorRegistry.algo.ts:256", "teal": 793}, {"pc": [741, 742], "source": "contracts/validatorRegistry.algo.ts:256", "teal": 794}, {"pc": [743], "source": "contracts/validatorRegistry.algo.ts:256", "teal": 795}, {"pc": [744], "source": "contracts/validatorRegistry.algo.ts:256", "teal": 796}, {"pc": [745], "source": "contracts/validatorRegistry.algo.ts:256", "teal": 797}, {"pc": [746], "source": "contracts/validatorRegistry.algo.ts:256", "teal": 798}, {"pc": [747], "source": "contracts/validatorRegistry.algo.ts:256", "teal": 799}, {"pc": [748], "source": "contracts/validatorRegistry.algo.ts:254", "teal": 800}, {"pc": [749], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 805}, {"pc": [750, 751, 752], "source": "contracts/validatorRegistry.algo.ts:266", "teal": 808}, {"pc": [753], "source": "contracts/validatorRegistry.algo.ts:266", "teal": 809}, {"pc": [754], "source": "contracts/validatorRegistry.algo.ts:266", "teal": 810}, {"pc": [755, 756], "source": "contracts/validatorRegistry.algo.ts:266", "teal": 811}, {"pc": [757], "source": "contracts/validatorRegistry.algo.ts:266", "teal": 812}, {"pc": [758], "errorMessage": "argument 0 (staker) for getStakedPoolsForAccount must be a address", "source": "contracts/validatorRegistry.algo.ts:266", "teal": 815}, {"pc": [759, 760, 761], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 818}, {"pc": [762], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 819}, {"pc": [763], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 820}, {"pc": [764], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 821}, {"pc": [765], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 822}, {"pc": [766], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 823}, {"pc": [767, 768, 769], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 824}, {"pc": [770], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 825}, {"pc": [771], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 826}, {"pc": [772], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 827}, {"pc": [773], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 828}, {"pc": [774], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 829}, {"pc": [775], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 830}, {"pc": [776, 777, 778], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 839}, {"pc": [779], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 842}, {"pc": [780, 781], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 843}, {"pc": [782], "source": "contracts/validatorRegistry.algo.ts:267", "teal": 848}, {"pc": [783, 784], "source": "contracts/validatorRegistry.algo.ts:267", "teal": 849}, {"pc": [785], "source": "contracts/validatorRegistry.algo.ts:267", "teal": 850}, {"pc": [786], "source": "contracts/validatorRegistry.algo.ts:267", "teal": 851}, {"pc": [787], "source": "contracts/validatorRegistry.algo.ts:267", "teal": 852}, {"pc": [788], "source": "contracts/validatorRegistry.algo.ts:267", "teal": 853}, {"pc": [789], "source": "contracts/validatorRegistry.algo.ts:267", "teal": 854}, {"pc": [790, 791, 792], "source": "contracts/validatorRegistry.algo.ts:267", "teal": 855}, {"pc": [793], "source": "contracts/validatorRegistry.algo.ts:268", "teal": 860}, {"pc": [794, 795, 796], "source": "contracts/validatorRegistry.algo.ts:268", "teal": 861}, {"pc": [797], "source": "contracts/validatorRegistry.algo.ts:270", "teal": 866}, {"pc": [798, 799], "source": "contracts/validatorRegistry.algo.ts:270", "teal": 867}, {"pc": [800], "source": "contracts/validatorRegistry.algo.ts:271", "teal": 871}, {"pc": [801, 802], "source": "contracts/validatorRegistry.algo.ts:271", "teal": 872}, {"pc": [803], "source": "contracts/validatorRegistry.algo.ts:271", "teal": 873}, {"pc": [804], "source": "contracts/validatorRegistry.algo.ts:271", "teal": 874}, {"pc": [805], "errorMessage": "box value does not exist: this.stakerPoolSet(staker).value", "source": "contracts/validatorRegistry.algo.ts:271", "teal": 877}, {"pc": [806, 807], "source": "contracts/validatorRegistry.algo.ts:271", "teal": 878}, {"pc": [808], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 882}, {"pc": [809, 810], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 883}, {"pc": [811, 812], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 888}, {"pc": [813, 814], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 889}, {"pc": [815], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 890}, {"pc": [816, 817, 818], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 891}, {"pc": [819, 820], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 896}, {"pc": [821, 822], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 897}, {"pc": [823], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 898}, {"pc": [824], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 899}, {"pc": [825], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 900}, {"pc": [826], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 901}, {"pc": [827], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 902}, {"pc": [828], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 903}, {"pc": [829], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 904}, {"pc": [830], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 905}, {"pc": [831], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 906}, {"pc": [832, 833, 834], "source": "contracts/validatorRegistry.algo.ts:273", "teal": 907}, {"pc": [835, 836], "source": "contracts/validatorRegistry.algo.ts:274", "teal": 912}, {"pc": [837, 838], "source": "contracts/validatorRegistry.algo.ts:274", "teal": 913}, {"pc": [839, 840], "source": "contracts/validatorRegistry.algo.ts:274", "teal": 914}, {"pc": [841], "source": "contracts/validatorRegistry.algo.ts:274", "teal": 915}, {"pc": [842], "source": "contracts/validatorRegistry.algo.ts:274", "teal": 916}, {"pc": [843], "source": "contracts/validatorRegistry.algo.ts:274", "teal": 917}, {"pc": [844], "source": "contracts/validatorRegistry.algo.ts:274", "teal": 918}, {"pc": [845], "source": "contracts/validatorRegistry.algo.ts:274", "teal": 919}, {"pc": [846, 847], "source": "contracts/validatorRegistry.algo.ts:274", "teal": 920}, {"pc": [848, 849], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 927}, {"pc": [850], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 928}, {"pc": [851], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 929}, {"pc": [852, 853], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 930}, {"pc": [854, 855, 856], "source": "contracts/validatorRegistry.algo.ts:272", "teal": 931}, {"pc": [857, 858], "source": "contracts/validatorRegistry.algo.ts:277", "teal": 936}, {"pc": [859, 860], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 940}, {"pc": [861, 862], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 943}, {"pc": [863], "source": "contracts/validatorRegistry.algo.ts:265", "teal": 944}, {"pc": [864], "source": "contracts/validatorRegistry.algo.ts:287", "teal": 949}, {"pc": [865, 866, 867], "source": "contracts/validatorRegistry.algo.ts:288", "teal": 952}, {"pc": [868], "source": "contracts/validatorRegistry.algo.ts:288", "teal": 953}, {"pc": [869, 870, 871], "source": "contracts/validatorRegistry.algo.ts:287", "teal": 956}, {"pc": [872], "source": "contracts/validatorRegistry.algo.ts:287", "teal": 957}, {"pc": [873], "source": "contracts/validatorRegistry.algo.ts:287", "teal": 958}, {"pc": [874], "source": "contracts/validatorRegistry.algo.ts:287", "teal": 959}, {"pc": [875], "source": "contracts/validatorRegistry.algo.ts:287", "teal": 960}, {"pc": [876, 877, 878], "source": "contracts/validatorRegistry.algo.ts:287", "teal": 970}, {"pc": [879, 880], "source": "contracts/validatorRegistry.algo.ts:289", "teal": 974}, {"pc": [881, 882], "source": "contracts/validatorRegistry.algo.ts:289", "teal": 975}, {"pc": [883], "source": "contracts/validatorRegistry.algo.ts:289", "teal": 976}, {"pc": [884, 885], "source": "contracts/validatorRegistry.algo.ts:289", "teal": 977}, {"pc": [886], "source": "contracts/validatorRegistry.algo.ts:289", "teal": 978}, {"pc": [887], "source": "contracts/validatorRegistry.algo.ts:289", "teal": 979}, {"pc": [888, 889], "source": "contracts/validatorRegistry.algo.ts:289", "teal": 980}, {"pc": [890], "source": "contracts/validatorRegistry.algo.ts:289", "teal": 981}, {"pc": [891], "source": "contracts/validatorRegistry.algo.ts:287", "teal": 982}, {"pc": [892], "source": "contracts/validatorRegistry.algo.ts:292", "teal": 987}, {"pc": [893, 894, 895], "source": "contracts/validatorRegistry.algo.ts:293", "teal": 990}, {"pc": [896], "source": "contracts/validatorRegistry.algo.ts:293", "teal": 991}, {"pc": [897, 898, 899], "source": "contracts/validatorRegistry.algo.ts:292", "teal": 994}, {"pc": [900], "source": "contracts/validatorRegistry.algo.ts:292", "teal": 995}, {"pc": [901], "source": "contracts/validatorRegistry.algo.ts:292", "teal": 996}, {"pc": [902], "source": "contracts/validatorRegistry.algo.ts:292", "teal": 997}, {"pc": [903], "source": "contracts/validatorRegistry.algo.ts:292", "teal": 998}, {"pc": [904, 905, 906], "source": "contracts/validatorRegistry.algo.ts:292", "teal": 1002}, {"pc": [907], "source": "contracts/validatorRegistry.algo.ts:294", "teal": 1006}, {"pc": [908, 909], "source": "contracts/validatorRegistry.algo.ts:294", "teal": 1007}, {"pc": [910], "source": "contracts/validatorRegistry.algo.ts:294", "teal": 1008}, {"pc": [911], "source": "contracts/validatorRegistry.algo.ts:294", "teal": 1009}, {"pc": [912], "source": "contracts/validatorRegistry.algo.ts:294", "teal": 1010}, {"pc": [913], "source": "contracts/validatorRegistry.algo.ts:294", "teal": 1011}, {"pc": [914], "source": "contracts/validatorRegistry.algo.ts:294", "teal": 1012}, {"pc": [915], "errorMessage": "the specified validator id doesn't exist", "source": "contracts/validatorRegistry.algo.ts:294", "teal": 1015}, {"pc": [916, 917], "source": "contracts/validatorRegistry.algo.ts:296", "teal": 1019}, {"pc": [918, 919], "source": "contracts/validatorRegistry.algo.ts:296", "teal": 1020}, {"pc": [920], "source": "contracts/validatorRegistry.algo.ts:296", "teal": 1021}, {"pc": [921, 922], "source": "contracts/validatorRegistry.algo.ts:296", "teal": 1022}, {"pc": [923], "source": "contracts/validatorRegistry.algo.ts:296", "teal": 1023}, {"pc": [924], "source": "contracts/validatorRegistry.algo.ts:296", "teal": 1024}, {"pc": [925, 926], "source": "contracts/validatorRegistry.algo.ts:296", "teal": 1025}, {"pc": [927], "source": "contracts/validatorRegistry.algo.ts:296", "teal": 1026}, {"pc": [928], "source": "contracts/validatorRegistry.algo.ts:292", "teal": 1027}, {"pc": [929], "source": "contracts/validatorRegistry.algo.ts:299", "teal": 1032}, {"pc": [930, 931, 932], "source": "contracts/validatorRegistry.algo.ts:299", "teal": 1035}, {"pc": [933], "source": "contracts/validatorRegistry.algo.ts:299", "teal": 1036}, {"pc": [934], "source": "contracts/validatorRegistry.algo.ts:299", "teal": 1037}, {"pc": [935], "source": "contracts/validatorRegistry.algo.ts:299", "teal": 1038}, {"pc": [936], "source": "contracts/validatorRegistry.algo.ts:299", "teal": 1039}, {"pc": [937], "source": "contracts/validatorRegistry.algo.ts:299", "teal": 1040}, {"pc": [938, 939, 940], "source": "contracts/validatorRegistry.algo.ts:299", "teal": 1044}, {"pc": [941, 942], "source": "contracts/validatorRegistry.algo.ts:301", "teal": 1048}, {"pc": [943], "source": "contracts/validatorRegistry.algo.ts:299", "teal": 1049}, {"pc": [944], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1054}, {"pc": [945, 946, 947], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1057}, {"pc": [948], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1058}, {"pc": [949], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1059}, {"pc": [950, 951], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1060}, {"pc": [952], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1061}, {"pc": [953], "errorMessage": "argument 0 (config) for addValidator must be a (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)", "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1064}, {"pc": [954, 955, 956], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1067}, {"pc": [957, 958, 959], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1068}, {"pc": [960, 961], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1071}, {"pc": [962], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1072}, {"pc": [963], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1073}, {"pc": [964], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1074}, {"pc": [965, 966], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1075}, {"pc": [967], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1076}, {"pc": [968], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1077}, {"pc": [969], "errorMessage": "argument 2 (mbrPayment) for addValidator must be a pay transaction", "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1080}, {"pc": [970, 971, 972], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1083}, {"pc": [973], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1084}, {"pc": [974], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1085}, {"pc": [975], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1086}, {"pc": [976], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1087}, {"pc": [977], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1088}, {"pc": [978, 979, 980], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1100}, {"pc": [981], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1103}, {"pc": [982, 983], "source": "contracts/validatorRegistry.algo.ts:313", "teal": 1107}, {"pc": [984, 985, 986], "source": "contracts/validatorRegistry.algo.ts:313", "teal": 1108}, {"pc": [987, 988], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1113}, {"pc": [989, 990], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1114}, {"pc": [991, 992], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1115}, {"pc": [993], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1116}, {"pc": [994], "errorMessage": "transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}", "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1119}, {"pc": [995, 996], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1122}, {"pc": [997, 998], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1123}, {"pc": [999, 1000, 1001], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1124}, {"pc": [1002, 1003, 1004], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1125}, {"pc": [1005], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1126}, {"pc": [1006], "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1127}, {"pc": [1007], "errorMessage": "transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"amount\",\"expected\":\"this.getMbrAmounts().addValidatorMbr\"}", "source": "contracts/validatorRegistry.algo.ts:315", "teal": 1130}, {"pc": [1008, 1009], "source": "contracts/validatorRegistry.algo.ts:317", "teal": 1134}, {"pc": [1010, 1011], "source": "contracts/validatorRegistry.algo.ts:317", "teal": 1135}, {"pc": [1012, 1013, 1014, 1015, 1016], "source": "contracts/validatorRegistry.algo.ts:317", "teal": 1136}, {"pc": [1017], "source": "contracts/validatorRegistry.algo.ts:317", "teal": 1137}, {"pc": [1018], "errorMessage": "fee must be 10 ALGO or more to prevent spamming of validators", "source": "contracts/validatorRegistry.algo.ts:317", "teal": 1140}, {"pc": [1019, 1020], "source": "contracts/validatorRegistry.algo.ts:320", "teal": 1144}, {"pc": [1021], "source": "contracts/validatorRegistry.algo.ts:320", "teal": 1145}, {"pc": [1022], "source": "contracts/validatorRegistry.algo.ts:320", "teal": 1146}, {"pc": [1023], "source": "contracts/validatorRegistry.algo.ts:320", "teal": 1147}, {"pc": [1024, 1025], "source": "contracts/validatorRegistry.algo.ts:320", "teal": 1148}, {"pc": [1026, 1027], "source": "contracts/validatorRegistry.algo.ts:321", "teal": 1152}, {"pc": [1028, 1029], "source": "contracts/validatorRegistry.algo.ts:321", "teal": 1153}, {"pc": [1030], "source": "contracts/validatorRegistry.algo.ts:321", "teal": 1154}, {"pc": [1031], "source": "contracts/validatorRegistry.algo.ts:323", "teal": 1158}, {"pc": [1032, 1033], "source": "contracts/validatorRegistry.algo.ts:323", "teal": 1159}, {"pc": [1034], "source": "contracts/validatorRegistry.algo.ts:323", "teal": 1160}, {"pc": [1035], "source": "contracts/validatorRegistry.algo.ts:323", "teal": 1161}, {"pc": [1036, 1037, 1038], "source": "contracts/validatorRegistry.algo.ts:323", "teal": 1162}, {"pc": [1039], "source": "contracts/validatorRegistry.algo.ts:323", "teal": 1163}, {"pc": [1040], "source": "contracts/validatorRegistry.algo.ts:323", "teal": 1164}, {"pc": [1041], "source": "contracts/validatorRegistry.algo.ts:324", "teal": 1168}, {"pc": [1042, 1043], "source": "contracts/validatorRegistry.algo.ts:324", "teal": 1169}, {"pc": [1044], "source": "contracts/validatorRegistry.algo.ts:324", "teal": 1170}, {"pc": [1045, 1046], "source": "contracts/validatorRegistry.algo.ts:324", "teal": 1171}, {"pc": [1047], "source": "contracts/validatorRegistry.algo.ts:324", "teal": 1172}, {"pc": [1048], "source": "contracts/validatorRegistry.algo.ts:324", "teal": 1173}, {"pc": [1049, 1050], "source": "contracts/validatorRegistry.algo.ts:324", "teal": 1174}, {"pc": [1051], "source": "contracts/validatorRegistry.algo.ts:324", "teal": 1175}, {"pc": [1052], "source": "contracts/validatorRegistry.algo.ts:325", "teal": 1179}, {"pc": [1053, 1054], "source": "contracts/validatorRegistry.algo.ts:325", "teal": 1180}, {"pc": [1055], "source": "contracts/validatorRegistry.algo.ts:325", "teal": 1181}, {"pc": [1056], "source": "contracts/validatorRegistry.algo.ts:325", "teal": 1182}, {"pc": [1057, 1058], "source": "contracts/validatorRegistry.algo.ts:325", "teal": 1183}, {"pc": [1059], "source": "contracts/validatorRegistry.algo.ts:325", "teal": 1184}, {"pc": [1060], "source": "contracts/validatorRegistry.algo.ts:325", "teal": 1185}, {"pc": [1061, 1062], "source": "contracts/validatorRegistry.algo.ts:325", "teal": 1186}, {"pc": [1063], "source": "contracts/validatorRegistry.algo.ts:325", "teal": 1187}, {"pc": [1064, 1065], "source": "contracts/validatorRegistry.algo.ts:328", "teal": 1192}, {"pc": [1066, 1067, 1068], "source": "contracts/validatorRegistry.algo.ts:328", "teal": 1193}, {"pc": [1069], "source": "contracts/validatorRegistry.algo.ts:328", "teal": 1194}, {"pc": [1070], "source": "contracts/validatorRegistry.algo.ts:328", "teal": 1195}, {"pc": [1071], "source": "contracts/validatorRegistry.algo.ts:328", "teal": 1196}, {"pc": [1072, 1073, 1074], "source": "contracts/validatorRegistry.algo.ts:328", "teal": 1197}, {"pc": [1075, 1076], "source": "contracts/validatorRegistry.algo.ts:330", "teal": 1202}, {"pc": [1077, 1078, 1079], "source": "contracts/validatorRegistry.algo.ts:330", "teal": 1203}, {"pc": [1080], "source": "contracts/validatorRegistry.algo.ts:330", "teal": 1204}, {"pc": [1081, 1082, 1083], "source": "contracts/validatorRegistry.algo.ts:330", "teal": 1205}, {"pc": [1084], "errorMessage": "provided NFD must be valid", "source": "contracts/validatorRegistry.algo.ts:330", "teal": 1208}, {"pc": [1085, 1086], "source": "contracts/validatorRegistry.algo.ts:333", "teal": 1215}, {"pc": [1087, 1088], "source": "contracts/validatorRegistry.algo.ts:333", "teal": 1216}, {"pc": [1089, 1090, 1091], "source": "contracts/validatorRegistry.algo.ts:333", "teal": 1217}, {"pc": [1092], "source": "contracts/validatorRegistry.algo.ts:333", "teal": 1218}, {"pc": [1093, 1094], "source": "contracts/validatorRegistry.algo.ts:333", "teal": 1219}, {"pc": [1095], "source": "contracts/validatorRegistry.algo.ts:333", "teal": 1220}, {"pc": [1096], "errorMessage": "global state value does not exist: AppID.fromUint64(config.nfdForInfo).globalState('i.owner.a')", "source": "contracts/validatorRegistry.algo.ts:333", "teal": 1223}, {"pc": [1097], "source": "contracts/validatorRegistry.algo.ts:333", "teal": 1224}, {"pc": [1098], "errorMessage": "If specifying NFD, account adding validator must be owner", "source": "contracts/validatorRegistry.algo.ts:332", "teal": 1227}, {"pc": [1099, 1100], "source": "contracts/validatorRegistry.algo.ts:338", "teal": 1234}, {"pc": [1101, 1102, 1103], "source": "contracts/validatorRegistry.algo.ts:338", "teal": 1235}, {"pc": [1104], "source": "contracts/validatorRegistry.algo.ts:338", "teal": 1236}, {"pc": [1105, 1106], "source": "contracts/validatorRegistry.algo.ts:338", "teal": 1237}, {"pc": [1107], "source": "contracts/validatorRegistry.algo.ts:338", "teal": 1238}, {"pc": [1108], "source": "contracts/validatorRegistry.algo.ts:338", "teal": 1239}, {"pc": [1109, 1110, 1111], "source": "contracts/validatorRegistry.algo.ts:338", "teal": 1240}, {"pc": [1112, 1113], "source": "contracts/validatorRegistry.algo.ts:339", "teal": 1241}, {"pc": [1114, 1115, 1116], "source": "contracts/validatorRegistry.algo.ts:339", "teal": 1242}, {"pc": [1117], "source": "contracts/validatorRegistry.algo.ts:339", "teal": 1243}, {"pc": [1118, 1119], "source": "contracts/validatorRegistry.algo.ts:339", "teal": 1244}, {"pc": [1120], "source": "contracts/validatorRegistry.algo.ts:339", "teal": 1245}, {"pc": [1121], "source": "contracts/validatorRegistry.algo.ts:338", "teal": 1246}, {"pc": [1122, 1123, 1124], "source": "contracts/validatorRegistry.algo.ts:337", "teal": 1249}, {"pc": [1125, 1126], "source": "contracts/validatorRegistry.algo.ts:343", "teal": 1257}, {"pc": [1127, 1128, 1129], "source": "contracts/validatorRegistry.algo.ts:343", "teal": 1258}, {"pc": [1130], "source": "contracts/validatorRegistry.algo.ts:343", "teal": 1259}, {"pc": [1131, 1132, 1133], "source": "contracts/validatorRegistry.algo.ts:343", "teal": 1260}, {"pc": [1134], "errorMessage": "provided NFD App id for gating must be valid NFD", "source": "contracts/validatorRegistry.algo.ts:342", "teal": 1263}, {"pc": [1135, 1136, 1137, 1138, 1139, 1140], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1268}, {"pc": [1141, 1142], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1269}, {"pc": [1143], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1270}, {"pc": [1144, 1145], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1271}, {"pc": [1146, 1147, 1148], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1272}, {"pc": [1149], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1273}, {"pc": [1150, 1151], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1274}, {"pc": [1152, 1153, 1154], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1275}, {"pc": [1155], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1276}, {"pc": [1156], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1277}, {"pc": [1157], "source": "contracts/validatorRegistry.algo.ts:347", "teal": 1278}, {"pc": [1158, 1159], "source": "contracts/validatorRegistry.algo.ts:348", "teal": 1282}, {"pc": [1160, 1161], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1285}, {"pc": [1162], "source": "contracts/validatorRegistry.algo.ts:312", "teal": 1286}, {"pc": [1163, 1164, 1165], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1291}, {"pc": [1166], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1292}, {"pc": [1167], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1293}, {"pc": [1168, 1169], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1294}, {"pc": [1170], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1295}, {"pc": [1171], "errorMessage": "argument 0 (manager) for changeValidatorManager must be a address", "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1298}, {"pc": [1172, 1173, 1174], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1301}, {"pc": [1175], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1302}, {"pc": [1176, 1177, 1178], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1305}, {"pc": [1179], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1306}, {"pc": [1180], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1307}, {"pc": [1181, 1182, 1183], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1317}, {"pc": [1184, 1185], "source": "contracts/validatorRegistry.algo.ts:359", "teal": 1321}, {"pc": [1186, 1187, 1188], "source": "contracts/validatorRegistry.algo.ts:359", "teal": 1322}, {"pc": [1189, 1190], "source": "contracts/validatorRegistry.algo.ts:360", "teal": 1326}, {"pc": [1191, 1192], "source": "contracts/validatorRegistry.algo.ts:360", "teal": 1327}, {"pc": [1193], "source": "contracts/validatorRegistry.algo.ts:360", "teal": 1328}, {"pc": [1194], "errorMessage": "needs to at least be valid address", "source": "contracts/validatorRegistry.algo.ts:360", "teal": 1331}, {"pc": [1195, 1196], "source": "contracts/validatorRegistry.algo.ts:361", "teal": 1335}, {"pc": [1197, 1198], "source": "contracts/validatorRegistry.algo.ts:361", "teal": 1336}, {"pc": [1199], "source": "contracts/validatorRegistry.algo.ts:361", "teal": 1337}, {"pc": [1200, 1201], "source": "contracts/validatorRegistry.algo.ts:361", "teal": 1338}, {"pc": [1202], "source": "contracts/validatorRegistry.algo.ts:361", "teal": 1339}, {"pc": [1203], "source": "contracts/validatorRegistry.algo.ts:361", "teal": 1340}, {"pc": [1204, 1205], "source": "contracts/validatorRegistry.algo.ts:361", "teal": 1341}, {"pc": [1206], "source": "contracts/validatorRegistry.algo.ts:361", "teal": 1342}, {"pc": [1207], "source": "contracts/validatorRegistry.algo.ts:358", "teal": 1343}, {"pc": [1208, 1209, 1210], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1348}, {"pc": [1211], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1349}, {"pc": [1212, 1213, 1214], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1352}, {"pc": [1215], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1353}, {"pc": [1216, 1217, 1218], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1356}, {"pc": [1219], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1357}, {"pc": [1220, 1221, 1222], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1360}, {"pc": [1223], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1361}, {"pc": [1224], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1362}, {"pc": [1225, 1226, 1227], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1373}, {"pc": [1228, 1229], "source": "contracts/validatorRegistry.algo.ts:373", "teal": 1377}, {"pc": [1230, 1231, 1232], "source": "contracts/validatorRegistry.algo.ts:373", "teal": 1378}, {"pc": [1233, 1234], "source": "contracts/validatorRegistry.algo.ts:374", "teal": 1382}, {"pc": [1235, 1236], "source": "contracts/validatorRegistry.algo.ts:374", "teal": 1383}, {"pc": [1237], "source": "contracts/validatorRegistry.algo.ts:374", "teal": 1384}, {"pc": [1238], "source": "contracts/validatorRegistry.algo.ts:374", "teal": 1385}, {"pc": [1239, 1240], "source": "contracts/validatorRegistry.algo.ts:374", "teal": 1386}, {"pc": [1241], "source": "contracts/validatorRegistry.algo.ts:374", "teal": 1387}, {"pc": [1242], "source": "contracts/validatorRegistry.algo.ts:374", "teal": 1388}, {"pc": [1243, 1244], "source": "contracts/validatorRegistry.algo.ts:374", "teal": 1389}, {"pc": [1245], "source": "contracts/validatorRegistry.algo.ts:374", "teal": 1390}, {"pc": [1246, 1247, 1248], "source": "contracts/validatorRegistry.algo.ts:375", "teal": 1394}, {"pc": [1249, 1250], "source": "contracts/validatorRegistry.algo.ts:375", "teal": 1395}, {"pc": [1251], "source": "contracts/validatorRegistry.algo.ts:375", "teal": 1396}, {"pc": [1252], "source": "contracts/validatorRegistry.algo.ts:375", "teal": 1397}, {"pc": [1253, 1254], "source": "contracts/validatorRegistry.algo.ts:375", "teal": 1398}, {"pc": [1255], "source": "contracts/validatorRegistry.algo.ts:375", "teal": 1399}, {"pc": [1256], "source": "contracts/validatorRegistry.algo.ts:375", "teal": 1400}, {"pc": [1257, 1258], "source": "contracts/validatorRegistry.algo.ts:375", "teal": 1401}, {"pc": [1259], "source": "contracts/validatorRegistry.algo.ts:375", "teal": 1402}, {"pc": [1260], "source": "contracts/validatorRegistry.algo.ts:372", "teal": 1403}, {"pc": [1261, 1262, 1263], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1408}, {"pc": [1264, 1265, 1266], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1409}, {"pc": [1267, 1268, 1269], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1412}, {"pc": [1270], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1413}, {"pc": [1271, 1272, 1273], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1416}, {"pc": [1274], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1417}, {"pc": [1275, 1276, 1277], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1420}, {"pc": [1278], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1421}, {"pc": [1279], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1422}, {"pc": [1280, 1281, 1282], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1433}, {"pc": [1283, 1284], "source": "contracts/validatorRegistry.algo.ts:387", "teal": 1437}, {"pc": [1285, 1286, 1287], "source": "contracts/validatorRegistry.algo.ts:387", "teal": 1438}, {"pc": [1288, 1289], "source": "contracts/validatorRegistry.algo.ts:389", "teal": 1442}, {"pc": [1290, 1291, 1292], "source": "contracts/validatorRegistry.algo.ts:389", "teal": 1443}, {"pc": [1293], "errorMessage": "provided NFD must be valid", "source": "contracts/validatorRegistry.algo.ts:389", "teal": 1446}, {"pc": [1294, 1295], "source": "contracts/validatorRegistry.algo.ts:392", "teal": 1453}, {"pc": [1296, 1297], "source": "contracts/validatorRegistry.algo.ts:392", "teal": 1454}, {"pc": [1298, 1299], "source": "contracts/validatorRegistry.algo.ts:392", "teal": 1455}, {"pc": [1300], "source": "contracts/validatorRegistry.algo.ts:392", "teal": 1456}, {"pc": [1301], "errorMessage": "global state value does not exist: AppID.fromUint64(nfdAppID).globalState('i.owner.a')", "source": "contracts/validatorRegistry.algo.ts:392", "teal": 1459}, {"pc": [1302], "source": "contracts/validatorRegistry.algo.ts:392", "teal": 1460}, {"pc": [1303], "errorMessage": "If specifying NFD, account adding validator must be owner", "source": "contracts/validatorRegistry.algo.ts:391", "teal": 1463}, {"pc": [1304, 1305], "source": "contracts/validatorRegistry.algo.ts:395", "teal": 1467}, {"pc": [1306, 1307], "source": "contracts/validatorRegistry.algo.ts:395", "teal": 1468}, {"pc": [1308], "source": "contracts/validatorRegistry.algo.ts:395", "teal": 1469}, {"pc": [1309], "source": "contracts/validatorRegistry.algo.ts:395", "teal": 1470}, {"pc": [1310, 1311], "source": "contracts/validatorRegistry.algo.ts:395", "teal": 1471}, {"pc": [1312], "source": "contracts/validatorRegistry.algo.ts:395", "teal": 1472}, {"pc": [1313], "source": "contracts/validatorRegistry.algo.ts:395", "teal": 1473}, {"pc": [1314, 1315], "source": "contracts/validatorRegistry.algo.ts:395", "teal": 1474}, {"pc": [1316], "source": "contracts/validatorRegistry.algo.ts:395", "teal": 1475}, {"pc": [1317], "source": "contracts/validatorRegistry.algo.ts:386", "teal": 1476}, {"pc": [1318, 1319, 1320], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1481}, {"pc": [1321], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1482}, {"pc": [1322], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1483}, {"pc": [1323, 1324], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1484}, {"pc": [1325], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1485}, {"pc": [1326], "errorMessage": "argument 0 (commissionAddress) for changeValidatorCommissionAddress must be a address", "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1488}, {"pc": [1327, 1328, 1329], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1491}, {"pc": [1330], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1492}, {"pc": [1331, 1332, 1333], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1495}, {"pc": [1334], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1496}, {"pc": [1335], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1497}, {"pc": [1336, 1337, 1338], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1504}, {"pc": [1339, 1340], "source": "contracts/validatorRegistry.algo.ts:403", "teal": 1508}, {"pc": [1341, 1342, 1343], "source": "contracts/validatorRegistry.algo.ts:403", "teal": 1509}, {"pc": [1344, 1345], "source": "contracts/validatorRegistry.algo.ts:404", "teal": 1513}, {"pc": [1346, 1347], "source": "contracts/validatorRegistry.algo.ts:404", "teal": 1514}, {"pc": [1348], "source": "contracts/validatorRegistry.algo.ts:404", "teal": 1515}, {"pc": [1349], "source": "contracts/validatorRegistry.algo.ts:404", "teal": 1516}, {"pc": [1350, 1351, 1352], "source": "contracts/validatorRegistry.algo.ts:405", "teal": 1520}, {"pc": [1353, 1354], "source": "contracts/validatorRegistry.algo.ts:405", "teal": 1521}, {"pc": [1355], "source": "contracts/validatorRegistry.algo.ts:405", "teal": 1522}, {"pc": [1356, 1357], "source": "contracts/validatorRegistry.algo.ts:405", "teal": 1523}, {"pc": [1358], "source": "contracts/validatorRegistry.algo.ts:405", "teal": 1524}, {"pc": [1359], "source": "contracts/validatorRegistry.algo.ts:405", "teal": 1525}, {"pc": [1360, 1361], "source": "contracts/validatorRegistry.algo.ts:405", "teal": 1526}, {"pc": [1362], "source": "contracts/validatorRegistry.algo.ts:405", "teal": 1527}, {"pc": [1363], "source": "contracts/validatorRegistry.algo.ts:402", "teal": 1528}, {"pc": [1364, 1365, 1366], "source": "contracts/validatorRegistry.algo.ts:418", "teal": 1533}, {"pc": [1367], "source": "contracts/validatorRegistry.algo.ts:418", "teal": 1534}, {"pc": [1368, 1369, 1370], "source": "contracts/validatorRegistry.algo.ts:417", "teal": 1537}, {"pc": [1371], "source": "contracts/validatorRegistry.algo.ts:417", "teal": 1538}, {"pc": [1372, 1373, 1374], "source": "contracts/validatorRegistry.algo.ts:416", "teal": 1541}, {"pc": [1375], "source": "contracts/validatorRegistry.algo.ts:416", "teal": 1542}, {"pc": [1376], "source": "contracts/validatorRegistry.algo.ts:416", "teal": 1543}, {"pc": [1377, 1378], "source": "contracts/validatorRegistry.algo.ts:416", "teal": 1544}, {"pc": [1379], "source": "contracts/validatorRegistry.algo.ts:416", "teal": 1545}, {"pc": [1380], "errorMessage": "argument 2 (EntryGatingAssets) for changeValidatorRewardInfo must be a uint64[4]", "source": "contracts/validatorRegistry.algo.ts:416", "teal": 1548}, {"pc": [1381, 1382, 1383], "source": "contracts/validatorRegistry.algo.ts:415", "teal": 1551}, {"pc": [1384], "source": "contracts/validatorRegistry.algo.ts:415", "teal": 1552}, {"pc": [1385], "source": "contracts/validatorRegistry.algo.ts:415", "teal": 1553}, {"pc": [1386, 1387], "source": "contracts/validatorRegistry.algo.ts:415", "teal": 1554}, {"pc": [1388], "source": "contracts/validatorRegistry.algo.ts:415", "teal": 1555}, {"pc": [1389], "errorMessage": "argument 3 (EntryGatingAddress) for changeValidatorRewardInfo must be a address", "source": "contracts/validatorRegistry.algo.ts:415", "teal": 1558}, {"pc": [1390, 1391, 1392], "source": "contracts/validatorRegistry.algo.ts:414", "teal": 1561}, {"pc": [1393], "source": "contracts/validatorRegistry.algo.ts:414", "teal": 1562}, {"pc": [1394], "source": "contracts/validatorRegistry.algo.ts:414", "teal": 1563}, {"pc": [1395], "source": "contracts/validatorRegistry.algo.ts:414", "teal": 1564}, {"pc": [1396], "source": "contracts/validatorRegistry.algo.ts:414", "teal": 1565}, {"pc": [1397], "errorMessage": "argument 4 (EntryGatingType) for changeValidatorRewardInfo must be a uint8", "source": "contracts/validatorRegistry.algo.ts:414", "teal": 1568}, {"pc": [1398], "source": "contracts/validatorRegistry.algo.ts:414", "teal": 1569}, {"pc": [1399, 1400, 1401], "source": "contracts/validatorRegistry.algo.ts:413", "teal": 1572}, {"pc": [1402], "source": "contracts/validatorRegistry.algo.ts:413", "teal": 1573}, {"pc": [1403, 1404, 1405], "source": "contracts/validatorRegistry.algo.ts:412", "teal": 1576}, {"pc": [1406], "source": "contracts/validatorRegistry.algo.ts:412", "teal": 1577}, {"pc": [1407], "source": "contracts/validatorRegistry.algo.ts:412", "teal": 1578}, {"pc": [1408, 1409, 1410], "source": "contracts/validatorRegistry.algo.ts:412", "teal": 1585}, {"pc": [1411, 1412], "source": "contracts/validatorRegistry.algo.ts:420", "teal": 1589}, {"pc": [1413, 1414, 1415], "source": "contracts/validatorRegistry.algo.ts:420", "teal": 1590}, {"pc": [1416, 1417], "source": "contracts/validatorRegistry.algo.ts:423", "teal": 1597}, {"pc": [1418], "source": "contracts/validatorRegistry.algo.ts:423", "teal": 1598}, {"pc": [1419], "source": "contracts/validatorRegistry.algo.ts:423", "teal": 1599}, {"pc": [1420], "source": "contracts/validatorRegistry.algo.ts:423", "teal": 1600}, {"pc": [1421, 1422, 1423], "source": "contracts/validatorRegistry.algo.ts:423", "teal": 1601}, {"pc": [1424, 1425], "source": "contracts/validatorRegistry.algo.ts:423", "teal": 1602}, {"pc": [1426, 1427], "source": "contracts/validatorRegistry.algo.ts:423", "teal": 1603}, {"pc": [1428], "source": "contracts/validatorRegistry.algo.ts:423", "teal": 1604}, {"pc": [1429], "source": "contracts/validatorRegistry.algo.ts:423", "teal": 1605}, {"pc": [1430], "errorMessage": "invalid Entry gating type", "source": "contracts/validatorRegistry.algo.ts:422", "teal": 1609}, {"pc": [1431, 1432], "source": "contracts/validatorRegistry.algo.ts:426", "teal": 1614}, {"pc": [1433], "source": "contracts/validatorRegistry.algo.ts:426", "teal": 1615}, {"pc": [1434], "source": "contracts/validatorRegistry.algo.ts:426", "teal": 1616}, {"pc": [1435, 1436, 1437], "source": "contracts/validatorRegistry.algo.ts:426", "teal": 1617}, {"pc": [1438, 1439], "source": "contracts/validatorRegistry.algo.ts:427", "teal": 1622}, {"pc": [1440, 1441], "source": "contracts/validatorRegistry.algo.ts:427", "teal": 1623}, {"pc": [1442], "source": "contracts/validatorRegistry.algo.ts:427", "teal": 1624}, {"pc": [1443], "source": "contracts/validatorRegistry.algo.ts:427", "teal": 1625}, {"pc": [1444, 1445], "source": "contracts/validatorRegistry.algo.ts:430", "teal": 1632}, {"pc": [1446, 1447], "source": "contracts/validatorRegistry.algo.ts:430", "teal": 1633}, {"pc": [1448], "source": "contracts/validatorRegistry.algo.ts:430", "teal": 1634}, {"pc": [1449], "source": "contracts/validatorRegistry.algo.ts:430", "teal": 1635}, {"pc": [1450, 1451, 1452], "source": "contracts/validatorRegistry.algo.ts:430", "teal": 1636}, {"pc": [1453, 1454], "source": "contracts/validatorRegistry.algo.ts:431", "teal": 1637}, {"pc": [1455, 1456], "source": "contracts/validatorRegistry.algo.ts:431", "teal": 1638}, {"pc": [1457], "source": "contracts/validatorRegistry.algo.ts:431", "teal": 1639}, {"pc": [1458], "source": "contracts/validatorRegistry.algo.ts:430", "teal": 1640}, {"pc": [1459, 1460, 1461], "source": "contracts/validatorRegistry.algo.ts:429", "teal": 1643}, {"pc": [1462, 1463], "source": "contracts/validatorRegistry.algo.ts:433", "teal": 1648}, {"pc": [1464, 1465, 1466], "source": "contracts/validatorRegistry.algo.ts:433", "teal": 1649}, {"pc": [1467], "source": "contracts/validatorRegistry.algo.ts:433", "teal": 1650}, {"pc": [1468, 1469, 1470], "source": "contracts/validatorRegistry.algo.ts:433", "teal": 1651}, {"pc": [1471], "errorMessage": "provided NFD App id for gating must be valid NFD", "source": "contracts/validatorRegistry.algo.ts:433", "teal": 1654}, {"pc": [1472, 1473], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1659}, {"pc": [1474, 1475], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1660}, {"pc": [1476], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1661}, {"pc": [1477, 1478, 1479], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1662}, {"pc": [1480], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1663}, {"pc": [1481, 1482], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1664}, {"pc": [1483], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1665}, {"pc": [1484], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1666}, {"pc": [1485, 1486], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1667}, {"pc": [1487], "source": "contracts/validatorRegistry.algo.ts:435", "teal": 1668}, {"pc": [1488, 1489], "source": "contracts/validatorRegistry.algo.ts:436", "teal": 1672}, {"pc": [1490, 1491], "source": "contracts/validatorRegistry.algo.ts:436", "teal": 1673}, {"pc": [1492], "source": "contracts/validatorRegistry.algo.ts:436", "teal": 1674}, {"pc": [1493, 1494], "source": "contracts/validatorRegistry.algo.ts:436", "teal": 1675}, {"pc": [1495], "source": "contracts/validatorRegistry.algo.ts:436", "teal": 1676}, {"pc": [1496], "source": "contracts/validatorRegistry.algo.ts:436", "teal": 1677}, {"pc": [1497, 1498], "source": "contracts/validatorRegistry.algo.ts:436", "teal": 1678}, {"pc": [1499], "source": "contracts/validatorRegistry.algo.ts:436", "teal": 1679}, {"pc": [1500, 1501], "source": "contracts/validatorRegistry.algo.ts:437", "teal": 1683}, {"pc": [1502, 1503], "source": "contracts/validatorRegistry.algo.ts:437", "teal": 1684}, {"pc": [1504], "source": "contracts/validatorRegistry.algo.ts:437", "teal": 1685}, {"pc": [1505, 1506], "source": "contracts/validatorRegistry.algo.ts:437", "teal": 1686}, {"pc": [1507], "source": "contracts/validatorRegistry.algo.ts:437", "teal": 1687}, {"pc": [1508], "source": "contracts/validatorRegistry.algo.ts:437", "teal": 1688}, {"pc": [1509, 1510], "source": "contracts/validatorRegistry.algo.ts:437", "teal": 1689}, {"pc": [1511], "source": "contracts/validatorRegistry.algo.ts:437", "teal": 1690}, {"pc": [1512, 1513], "source": "contracts/validatorRegistry.algo.ts:438", "teal": 1694}, {"pc": [1514, 1515], "source": "contracts/validatorRegistry.algo.ts:438", "teal": 1695}, {"pc": [1516], "source": "contracts/validatorRegistry.algo.ts:438", "teal": 1696}, {"pc": [1517], "source": "contracts/validatorRegistry.algo.ts:438", "teal": 1697}, {"pc": [1518, 1519], "source": "contracts/validatorRegistry.algo.ts:438", "teal": 1698}, {"pc": [1520], "source": "contracts/validatorRegistry.algo.ts:438", "teal": 1699}, {"pc": [1521], "source": "contracts/validatorRegistry.algo.ts:438", "teal": 1700}, {"pc": [1522, 1523], "source": "contracts/validatorRegistry.algo.ts:438", "teal": 1701}, {"pc": [1524], "source": "contracts/validatorRegistry.algo.ts:438", "teal": 1702}, {"pc": [1525, 1526, 1527], "source": "contracts/validatorRegistry.algo.ts:439", "teal": 1706}, {"pc": [1528, 1529], "source": "contracts/validatorRegistry.algo.ts:439", "teal": 1707}, {"pc": [1530], "source": "contracts/validatorRegistry.algo.ts:439", "teal": 1708}, {"pc": [1531], "source": "contracts/validatorRegistry.algo.ts:439", "teal": 1709}, {"pc": [1532, 1533], "source": "contracts/validatorRegistry.algo.ts:439", "teal": 1710}, {"pc": [1534], "source": "contracts/validatorRegistry.algo.ts:439", "teal": 1711}, {"pc": [1535], "source": "contracts/validatorRegistry.algo.ts:439", "teal": 1712}, {"pc": [1536, 1537], "source": "contracts/validatorRegistry.algo.ts:439", "teal": 1713}, {"pc": [1538], "source": "contracts/validatorRegistry.algo.ts:439", "teal": 1714}, {"pc": [1539], "source": "contracts/validatorRegistry.algo.ts:412", "teal": 1715}, {"pc": [1540], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1720}, {"pc": [1541, 1542, 1543], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1723}, {"pc": [1544], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1724}, {"pc": [1545, 1546, 1547], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1727}, {"pc": [1548], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1728}, {"pc": [1549, 1550], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1731}, {"pc": [1551], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1732}, {"pc": [1552], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1733}, {"pc": [1553], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1734}, {"pc": [1554, 1555], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1735}, {"pc": [1556], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1736}, {"pc": [1557], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1737}, {"pc": [1558], "errorMessage": "argument 2 (mbrPayment) for addPool must be a pay transaction", "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1740}, {"pc": [1559, 1560, 1561], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1743}, {"pc": [1562], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1744}, {"pc": [1563], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1745}, {"pc": [1564], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1746}, {"pc": [1565], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1747}, {"pc": [1566, 1567, 1568], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1760}, {"pc": [1569], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1763}, {"pc": [1570], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 1764}, {"pc": [1571, 1572], "source": "contracts/validatorRegistry.algo.ts:454", "teal": 1768}, {"pc": [1573, 1574, 1575], "source": "contracts/validatorRegistry.algo.ts:454", "teal": 1769}, {"pc": [1576, 1577], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1774}, {"pc": [1578, 1579], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1775}, {"pc": [1580, 1581], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1776}, {"pc": [1582], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1777}, {"pc": [1583], "errorMessage": "transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}", "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1780}, {"pc": [1584, 1585], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1783}, {"pc": [1586, 1587], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1784}, {"pc": [1588, 1589, 1590], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1785}, {"pc": [1591, 1592, 1593], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1786}, {"pc": [1594], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1787}, {"pc": [1595], "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1788}, {"pc": [1596], "errorMessage": "transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"amount\",\"expected\":\"this.getMbrAmounts().addPoolMbr\"}", "source": "contracts/validatorRegistry.algo.ts:457", "teal": 1791}, {"pc": [1597], "source": "contracts/validatorRegistry.algo.ts:459", "teal": 1795}, {"pc": [1598, 1599], "source": "contracts/validatorRegistry.algo.ts:459", "teal": 1796}, {"pc": [1600], "source": "contracts/validatorRegistry.algo.ts:459", "teal": 1797}, {"pc": [1601], "source": "contracts/validatorRegistry.algo.ts:459", "teal": 1798}, {"pc": [1602], "source": "contracts/validatorRegistry.algo.ts:459", "teal": 1799}, {"pc": [1603], "source": "contracts/validatorRegistry.algo.ts:459", "teal": 1800}, {"pc": [1604], "source": "contracts/validatorRegistry.algo.ts:459", "teal": 1801}, {"pc": [1605], "errorMessage": "specified validator id isn't valid", "source": "contracts/validatorRegistry.algo.ts:459", "teal": 1804}, {"pc": [1606, 1607], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1808}, {"pc": [1608, 1609], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1809}, {"pc": [1610], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1810}, {"pc": [1611, 1612], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1811}, {"pc": [1613], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1812}, {"pc": [1614], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1813}, {"pc": [1615, 1616], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1814}, {"pc": [1617], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1815}, {"pc": [1618], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1816}, {"pc": [1619, 1620], "source": "contracts/validatorRegistry.algo.ts:461", "teal": 1817}, {"pc": [1621, 1622], "source": "contracts/validatorRegistry.algo.ts:462", "teal": 1822}, {"pc": [1623], "source": "contracts/constants.algo.ts:30", "teal": 1823}, {"pc": [1624], "source": "contracts/validatorRegistry.algo.ts:462", "teal": 1824}, {"pc": [1625, 1626, 1627], "source": "contracts/validatorRegistry.algo.ts:462", "teal": 1825}, {"pc": [1628], "errorMessage": "already at max pool size", "source": "contracts/validatorRegistry.algo.ts:463", "teal": 1829}, {"pc": [1629, 1630], "source": "contracts/validatorRegistry.algo.ts:465", "teal": 1834}, {"pc": [1631], "source": "contracts/validatorRegistry.algo.ts:465", "teal": 1835}, {"pc": [1632], "source": "contracts/validatorRegistry.algo.ts:465", "teal": 1836}, {"pc": [1633, 1634], "source": "contracts/validatorRegistry.algo.ts:465", "teal": 1837}, {"pc": [1635], "source": "contracts/validatorRegistry.algo.ts:468", "teal": 1859}, {"pc": [1636, 1637], "source": "contracts/validatorRegistry.algo.ts:468", "teal": 1860}, {"pc": [1638, 1639], "source": "contracts/validatorRegistry.algo.ts:468", "teal": 1861}, {"pc": [1640], "source": "contracts/validatorRegistry.algo.ts:469", "teal": 1865}, {"pc": [1641, 1642], "source": "contracts/validatorRegistry.algo.ts:469", "teal": 1866}, {"pc": [1643, 1644], "source": "contracts/validatorRegistry.algo.ts:471", "teal": 1873}, {"pc": [1645], "source": "contracts/validatorRegistry.algo.ts:471", "teal": 1874}, {"pc": [1646, 1647], "source": "contracts/validatorRegistry.algo.ts:471", "teal": 1875}, {"pc": [1648], "source": "contracts/validatorRegistry.algo.ts:471", "teal": 1876}, {"pc": [1649, 1650], "source": "contracts/validatorRegistry.algo.ts:471", "teal": 1877}, {"pc": [1651, 1652], "source": "contracts/validatorRegistry.algo.ts:472", "teal": 1878}, {"pc": [1653, 1654], "source": "contracts/validatorRegistry.algo.ts:472", "teal": 1879}, {"pc": [1655, 1656], "source": "contracts/validatorRegistry.algo.ts:472", "teal": 1880}, {"pc": [1657], "source": "contracts/validatorRegistry.algo.ts:472", "teal": 1881}, {"pc": [1658], "errorMessage": "box value does not exist: this.stakingPoolApprovalProgram.size", "source": "contracts/validatorRegistry.algo.ts:472", "teal": 1884}, {"pc": [1659, 1660], "source": "contracts/validatorRegistry.algo.ts:472", "teal": 1885}, {"pc": [1661], "source": "contracts/validatorRegistry.algo.ts:472", "teal": 1886}, {"pc": [1662], "source": "contracts/validatorRegistry.algo.ts:472", "teal": 1887}, {"pc": [1663, 1664], "source": "contracts/validatorRegistry.algo.ts:472", "teal": 1888}, {"pc": [1665, 1666, 1667], "source": "contracts/validatorRegistry.algo.ts:474", "teal": 1892}, {"pc": [1668, 1669], "source": "contracts/validatorRegistry.algo.ts:474", "teal": 1893}, {"pc": [1670, 1671], "source": "contracts/validatorRegistry.algo.ts:475", "teal": 1897}, {"pc": [1672, 1673], "source": "contracts/validatorRegistry.algo.ts:475", "teal": 1898}, {"pc": [1674, 1675], "source": "contracts/validatorRegistry.algo.ts:476", "teal": 1902}, {"pc": [1676, 1677], "source": "contracts/validatorRegistry.algo.ts:476", "teal": 1903}, {"pc": [1678, 1679], "source": "contracts/validatorRegistry.algo.ts:477", "teal": 1907}, {"pc": [1680, 1681], "source": "contracts/validatorRegistry.algo.ts:477", "teal": 1908}, {"pc": [1682, 1683, 1684, 1685, 1686, 1687], "source": "contracts/validatorRegistry.algo.ts:480", "teal": 1919}, {"pc": [1688, 1689], "source": "contracts/validatorRegistry.algo.ts:480", "teal": 1920}, {"pc": [1690, 1691, 1692], "source": "contracts/validatorRegistry.algo.ts:481", "teal": 1921}, {"pc": [1693], "source": "contracts/validatorRegistry.algo.ts:481", "teal": 1922}, {"pc": [1694, 1695], "source": "contracts/validatorRegistry.algo.ts:481", "teal": 1923}, {"pc": [1696, 1697], "source": "contracts/validatorRegistry.algo.ts:482", "teal": 1924}, {"pc": [1698], "source": "contracts/validatorRegistry.algo.ts:482", "teal": 1925}, {"pc": [1699, 1700], "source": "contracts/validatorRegistry.algo.ts:482", "teal": 1926}, {"pc": [1701, 1702], "source": "contracts/validatorRegistry.algo.ts:483", "teal": 1927}, {"pc": [1703], "source": "contracts/validatorRegistry.algo.ts:483", "teal": 1928}, {"pc": [1704, 1705], "source": "contracts/validatorRegistry.algo.ts:483", "teal": 1929}, {"pc": [1706, 1707], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1930}, {"pc": [1708], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1931}, {"pc": [1709], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1932}, {"pc": [1710, 1711], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1933}, {"pc": [1712], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1934}, {"pc": [1713], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1935}, {"pc": [1714, 1715], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1936}, {"pc": [1716], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1937}, {"pc": [1717], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1938}, {"pc": [1718], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1939}, {"pc": [1719, 1720], "source": "contracts/validatorRegistry.algo.ts:484", "teal": 1940}, {"pc": [1721], "source": "contracts/validatorRegistry.algo.ts:468", "teal": 1943}, {"pc": [1722, 1723], "source": "contracts/validatorRegistry.algo.ts:468", "teal": 1944}, {"pc": [1724], "source": "contracts/validatorRegistry.algo.ts:468", "teal": 1947}, {"pc": [1725, 1726], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1951}, {"pc": [1727, 1728], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1952}, {"pc": [1729], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1953}, {"pc": [1730, 1731, 1732], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1954}, {"pc": [1733], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1955}, {"pc": [1734, 1735], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1956}, {"pc": [1736], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1957}, {"pc": [1737], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1958}, {"pc": [1738, 1739], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1959}, {"pc": [1740], "source": "contracts/validatorRegistry.algo.ts:488", "teal": 1960}, {"pc": [1741, 1742], "source": "contracts/validatorRegistry.algo.ts:491", "teal": 1964}, {"pc": [1743, 1744], "source": "contracts/validatorRegistry.algo.ts:491", "teal": 1965}, {"pc": [1745, 1746], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1969}, {"pc": [1747, 1748], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1970}, {"pc": [1749], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1971}, {"pc": [1750], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1972}, {"pc": [1751, 1752], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1973}, {"pc": [1753], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1974}, {"pc": [1754], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1975}, {"pc": [1755], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1976}, {"pc": [1756], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1977}, {"pc": [1757, 1758], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1978}, {"pc": [1759], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1979}, {"pc": [1760], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1980}, {"pc": [1761, 1762], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1981}, {"pc": [1763], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1982}, {"pc": [1764], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1983}, {"pc": [1765, 1766], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1984}, {"pc": [1767], "source": "contracts/validatorRegistry.algo.ts:492", "teal": 1985}, {"pc": [1768, 1769], "source": "contracts/validatorRegistry.algo.ts:493", "teal": 1989}, {"pc": [1770, 1771], "source": "contracts/validatorRegistry.algo.ts:493", "teal": 1990}, {"pc": [1772, 1773], "source": "contracts/validatorRegistry.algo.ts:493", "teal": 1991}, {"pc": [1774, 1775, 1776], "source": "contracts/validatorRegistry.algo.ts:493", "teal": 1992}, {"pc": [1777, 1778, 1779, 1780, 1781, 1782], "source": "contracts/validatorRegistry.algo.ts:495", "teal": 2000}, {"pc": [1783, 1784], "source": "contracts/validatorRegistry.algo.ts:496", "teal": 2001}, {"pc": [1785], "source": "contracts/validatorRegistry.algo.ts:496", "teal": 2002}, {"pc": [1786, 1787], "source": "contracts/validatorRegistry.algo.ts:497", "teal": 2003}, {"pc": [1788], "source": "contracts/validatorRegistry.algo.ts:497", "teal": 2004}, {"pc": [1789], "source": "contracts/validatorRegistry.algo.ts:497", "teal": 2005}, {"pc": [1790], "source": "contracts/validatorRegistry.algo.ts:497", "teal": 2006}, {"pc": [1791, 1792], "source": "contracts/validatorRegistry.algo.ts:497", "teal": 2007}, {"pc": [1793], "source": "contracts/validatorRegistry.algo.ts:497", "teal": 2008}, {"pc": [1794], "errorMessage": "numPools as uint16 overflowed 16 bits", "source": "contracts/validatorRegistry.algo.ts:497", "teal": 2011}, {"pc": [1795, 1796, 1797], "source": "contracts/validatorRegistry.algo.ts:497", "teal": 2012}, {"pc": [1798], "source": "contracts/validatorRegistry.algo.ts:497", "teal": 2013}, {"pc": [1799, 1800], "source": "contracts/validatorRegistry.algo.ts:498", "teal": 2014}, {"pc": [1801], "source": "contracts/validatorRegistry.algo.ts:498", "teal": 2015}, {"pc": [1802], "source": "contracts/validatorRegistry.algo.ts:498", "teal": 2016}, {"pc": [1803], "source": "contracts/validatorRegistry.algo.ts:495", "teal": 2017}, {"pc": [1804], "source": "contracts/validatorRegistry.algo.ts:495", "teal": 2018}, {"pc": [1805, 1806], "source": "contracts/validatorRegistry.algo.ts:501", "teal": 2022}, {"pc": [1807], "source": "contracts/validatorRegistry.algo.ts:501", "teal": 2023}, {"pc": [1808, 1809], "source": "contracts/validatorRegistry.algo.ts:501", "teal": 2024}, {"pc": [1810], "source": "contracts/validatorRegistry.algo.ts:501", "teal": 2025}, {"pc": [1811], "source": "contracts/validatorRegistry.algo.ts:501", "teal": 2026}, {"pc": [1812, 1813], "source": "contracts/validatorRegistry.algo.ts:501", "teal": 2027}, {"pc": [1814], "source": "contracts/validatorRegistry.algo.ts:501", "teal": 2028}, {"pc": [1815], "source": "contracts/validatorRegistry.algo.ts:501", "teal": 2029}, {"pc": [1816, 1817], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 2032}, {"pc": [1818, 1819], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 2035}, {"pc": [1820], "source": "contracts/validatorRegistry.algo.ts:453", "teal": 2036}, {"pc": [1821], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2041}, {"pc": [1822, 1823, 1824], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2044}, {"pc": [1825], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2045}, {"pc": [1826, 1827, 1828], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2048}, {"pc": [1829], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2049}, {"pc": [1830, 1831], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2052}, {"pc": [1832], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2053}, {"pc": [1833], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2054}, {"pc": [1834], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2055}, {"pc": [1835, 1836], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2056}, {"pc": [1837], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2057}, {"pc": [1838], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2058}, {"pc": [1839], "errorMessage": "argument 2 (stakedAmountPayment) for addStake must be a pay transaction", "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2061}, {"pc": [1840, 1841, 1842], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2064}, {"pc": [1843], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2065}, {"pc": [1844], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2066}, {"pc": [1845], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2067}, {"pc": [1846], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2068}, {"pc": [1847, 1848, 1849], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2080}, {"pc": [1850], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2083}, {"pc": [1851, 1852], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2084}, {"pc": [1853], "source": "contracts/validatorRegistry.algo.ts:514", "teal": 2088}, {"pc": [1854, 1855], "source": "contracts/validatorRegistry.algo.ts:514", "teal": 2089}, {"pc": [1856], "source": "contracts/validatorRegistry.algo.ts:514", "teal": 2090}, {"pc": [1857], "source": "contracts/validatorRegistry.algo.ts:514", "teal": 2091}, {"pc": [1858], "source": "contracts/validatorRegistry.algo.ts:514", "teal": 2092}, {"pc": [1859], "source": "contracts/validatorRegistry.algo.ts:514", "teal": 2093}, {"pc": [1860], "source": "contracts/validatorRegistry.algo.ts:514", "teal": 2094}, {"pc": [1861], "errorMessage": "specified validator id isn't valid", "source": "contracts/validatorRegistry.algo.ts:514", "teal": 2097}, {"pc": [1862, 1863], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2102}, {"pc": [1864], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2103}, {"pc": [1865], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2104}, {"pc": [1866, 1867], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2105}, {"pc": [1868], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2106}, {"pc": [1869], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2107}, {"pc": [1870, 1871], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2108}, {"pc": [1872], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2109}, {"pc": [1873], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2110}, {"pc": [1874], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2111}, {"pc": [1875], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2112}, {"pc": [1876, 1877, 1878], "source": "contracts/validatorRegistry.algo.ts:517", "teal": 2113}, {"pc": [1879, 1880], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2121}, {"pc": [1881], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2122}, {"pc": [1882], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2123}, {"pc": [1883, 1884], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2124}, {"pc": [1885], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2125}, {"pc": [1886], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2126}, {"pc": [1887, 1888], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2127}, {"pc": [1889], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2128}, {"pc": [1890], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2129}, {"pc": [1891, 1892], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2130}, {"pc": [1893], "source": "contracts/validatorRegistry.algo.ts:520", "teal": 2131}, {"pc": [1894], "errorMessage": "can't stake with a validator that is past its sunsetting time", "source": "contracts/validatorRegistry.algo.ts:519", "teal": 2134}, {"pc": [1895, 1896], "source": "contracts/validatorRegistry.algo.ts:525", "teal": 2139}, {"pc": [1897, 1898], "source": "contracts/validatorRegistry.algo.ts:525", "teal": 2140}, {"pc": [1899, 1900], "source": "contracts/validatorRegistry.algo.ts:529", "teal": 2148}, {"pc": [1901, 1902], "source": "contracts/validatorRegistry.algo.ts:530", "teal": 2149}, {"pc": [1903, 1904], "source": "contracts/validatorRegistry.algo.ts:530", "teal": 2150}, {"pc": [1905], "source": "contracts/validatorRegistry.algo.ts:530", "teal": 2151}, {"pc": [1906], "errorMessage": "transaction verification failed: {\"txn\":\"stakedAmountPayment\",\"field\":\"sender\",\"expected\":\"staker\"}", "source": "contracts/validatorRegistry.algo.ts:530", "teal": 2154}, {"pc": [1907, 1908], "source": "contracts/validatorRegistry.algo.ts:529", "teal": 2157}, {"pc": [1909, 1910], "source": "contracts/validatorRegistry.algo.ts:531", "teal": 2158}, {"pc": [1911, 1912], "source": "contracts/validatorRegistry.algo.ts:531", "teal": 2159}, {"pc": [1913], "source": "contracts/validatorRegistry.algo.ts:531", "teal": 2160}, {"pc": [1914], "errorMessage": "transaction verification failed: {\"txn\":\"stakedAmountPayment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}", "source": "contracts/validatorRegistry.algo.ts:531", "teal": 2163}, {"pc": [1915, 1916], "source": "contracts/validatorRegistry.algo.ts:537", "teal": 2167}, {"pc": [1917, 1918], "source": "contracts/validatorRegistry.algo.ts:537", "teal": 2168}, {"pc": [1919, 1920, 1921], "source": "contracts/validatorRegistry.algo.ts:537", "teal": 2169}, {"pc": [1922, 1923], "source": "contracts/validatorRegistry.algo.ts:539", "teal": 2173}, {"pc": [1924, 1925], "source": "contracts/validatorRegistry.algo.ts:539", "teal": 2174}, {"pc": [1926, 1927], "source": "contracts/validatorRegistry.algo.ts:539", "teal": 2175}, {"pc": [1928], "source": "contracts/validatorRegistry.algo.ts:540", "teal": 2179}, {"pc": [1929, 1930], "source": "contracts/validatorRegistry.algo.ts:540", "teal": 2180}, {"pc": [1931, 1932], "source": "contracts/validatorRegistry.algo.ts:542", "teal": 2185}, {"pc": [1933, 1934, 1935], "source": "contracts/validatorRegistry.algo.ts:542", "teal": 2186}, {"pc": [1936, 1937, 1938], "source": "contracts/validatorRegistry.algo.ts:542", "teal": 2187}, {"pc": [1939, 1940, 1941], "source": "contracts/validatorRegistry.algo.ts:545", "teal": 2192}, {"pc": [1942, 1943, 1944], "source": "contracts/validatorRegistry.algo.ts:545", "teal": 2193}, {"pc": [1945], "source": "contracts/validatorRegistry.algo.ts:545", "teal": 2194}, {"pc": [1946, 1947], "source": "contracts/validatorRegistry.algo.ts:545", "teal": 2195}, {"pc": [1948, 1949], "source": "contracts/validatorRegistry.algo.ts:546", "teal": 2199}, {"pc": [1950, 1951], "source": "contracts/validatorRegistry.algo.ts:546", "teal": 2200}, {"pc": [1952], "source": "contracts/validatorRegistry.algo.ts:546", "teal": 2201}, {"pc": [1953, 1954], "source": "contracts/validatorRegistry.algo.ts:546", "teal": 2202}, {"pc": [1955], "source": "contracts/validatorRegistry.algo.ts:547", "teal": 2206}, {"pc": [1956, 1957], "source": "contracts/validatorRegistry.algo.ts:547", "teal": 2207}, {"pc": [1958], "source": "contracts/validatorRegistry.algo.ts:547", "teal": 2208}, {"pc": [1959, 1960, 1961], "source": "contracts/validatorRegistry.algo.ts:547", "teal": 2209}, {"pc": [1962], "source": "contracts/validatorRegistry.algo.ts:547", "teal": 2210}, {"pc": [1963], "source": "contracts/validatorRegistry.algo.ts:547", "teal": 2211}, {"pc": [1964, 1965], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2219}, {"pc": [1966], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2220}, {"pc": [1967], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2221}, {"pc": [1968, 1969], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2222}, {"pc": [1970], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2223}, {"pc": [1971], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2224}, {"pc": [1972, 1973], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2225}, {"pc": [1974], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2226}, {"pc": [1975], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2227}, {"pc": [1976, 1977], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2228}, {"pc": [1978], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2229}, {"pc": [1979, 1980, 1981], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2230}, {"pc": [1982], "source": "contracts/validatorRegistry.algo.ts:552", "teal": 2231}, {"pc": [1983], "errorMessage": "total staked for all of a validators pools may not exceed hard cap", "source": "contracts/validatorRegistry.algo.ts:551", "teal": 2234}, {"pc": [1984, 1985], "source": "contracts/validatorRegistry.algo.ts:558", "teal": 2238}, {"pc": [1986, 1987], "source": "contracts/validatorRegistry.algo.ts:558", "teal": 2239}, {"pc": [1988, 1989], "source": "contracts/validatorRegistry.algo.ts:558", "teal": 2240}, {"pc": [1990, 1991, 1992], "source": "contracts/validatorRegistry.algo.ts:558", "teal": 2241}, {"pc": [1993, 1994], "source": "contracts/validatorRegistry.algo.ts:558", "teal": 2242}, {"pc": [1995, 1996], "source": "contracts/validatorRegistry.algo.ts:560", "teal": 2248}, {"pc": [1997, 1998], "source": "contracts/validatorRegistry.algo.ts:560", "teal": 2249}, {"pc": [1999, 2000], "source": "contracts/validatorRegistry.algo.ts:560", "teal": 2250}, {"pc": [2001, 2002], "source": "contracts/validatorRegistry.algo.ts:560", "teal": 2251}, {"pc": [2003], "source": "contracts/validatorRegistry.algo.ts:560", "teal": 2252}, {"pc": [2004, 2005], "source": "contracts/validatorRegistry.algo.ts:560", "teal": 2253}, {"pc": [2006, 2007], "source": "contracts/validatorRegistry.algo.ts:561", "teal": 2257}, {"pc": [2008, 2009], "source": "contracts/validatorRegistry.algo.ts:561", "teal": 2258}, {"pc": [2010, 2011], "source": "contracts/validatorRegistry.algo.ts:561", "teal": 2259}, {"pc": [2012, 2013, 2014], "source": "contracts/validatorRegistry.algo.ts:561", "teal": 2260}, {"pc": [2015], "source": "contracts/validatorRegistry.algo.ts:561", "teal": 2261}, {"pc": [2016, 2017], "source": "contracts/validatorRegistry.algo.ts:561", "teal": 2262}, {"pc": [2018, 2019], "source": "contracts/validatorRegistry.algo.ts:562", "teal": 2267}, {"pc": [2020, 2021], "source": "contracts/validatorRegistry.algo.ts:562", "teal": 2268}, {"pc": [2022, 2023], "source": "contracts/validatorRegistry.algo.ts:562", "teal": 2269}, {"pc": [2024, 2025, 2026], "source": "contracts/validatorRegistry.algo.ts:562", "teal": 2270}, {"pc": [2027], "source": "contracts/validatorRegistry.algo.ts:562", "teal": 2271}, {"pc": [2028], "source": "contracts/validatorRegistry.algo.ts:562", "teal": 2272}, {"pc": [2029], "source": "contracts/validatorRegistry.algo.ts:562", "teal": 2273}, {"pc": [2030, 2031, 2032], "source": "contracts/validatorRegistry.algo.ts:562", "teal": 2274}, {"pc": [2033], "errorMessage": "No pool available with free stake.  Validator needs to add another pool", "source": "contracts/validatorRegistry.algo.ts:563", "teal": 2278}, {"pc": [2034, 2035], "source": "contracts/validatorRegistry.algo.ts:567", "teal": 2283}, {"pc": [2036, 2037], "source": "contracts/validatorRegistry.algo.ts:567", "teal": 2284}, {"pc": [2038, 2039], "source": "contracts/validatorRegistry.algo.ts:567", "teal": 2285}, {"pc": [2040, 2041, 2042], "source": "contracts/validatorRegistry.algo.ts:567", "teal": 2286}, {"pc": [2043, 2044], "source": "contracts/validatorRegistry.algo.ts:567", "teal": 2287}, {"pc": [2045, 2046, 2047], "source": "contracts/validatorRegistry.algo.ts:567", "teal": 2288}, {"pc": [2048, 2049], "source": "contracts/validatorRegistry.algo.ts:575", "teal": 2298}, {"pc": [2050, 2051], "source": "contracts/validatorRegistry.algo.ts:574", "teal": 2299}, {"pc": [2052, 2053], "source": "contracts/validatorRegistry.algo.ts:573", "teal": 2300}, {"pc": [2054, 2055], "source": "contracts/validatorRegistry.algo.ts:572", "teal": 2301}, {"pc": [2056, 2057], "source": "contracts/validatorRegistry.algo.ts:572", "teal": 2302}, {"pc": [2058, 2059], "source": "contracts/validatorRegistry.algo.ts:572", "teal": 2303}, {"pc": [2060, 2061, 2062], "source": "contracts/validatorRegistry.algo.ts:572", "teal": 2304}, {"pc": [2063, 2064], "source": "contracts/validatorRegistry.algo.ts:571", "teal": 2305}, {"pc": [2065, 2066, 2067], "source": "contracts/validatorRegistry.algo.ts:570", "teal": 2306}, {"pc": [2068, 2069, 2070, 2071, 2072, 2073], "source": "contracts/validatorRegistry.algo.ts:577", "teal": 2316}, {"pc": [2074, 2075], "source": "contracts/validatorRegistry.algo.ts:578", "teal": 2317}, {"pc": [2076], "source": "contracts/validatorRegistry.algo.ts:578", "teal": 2318}, {"pc": [2077, 2078], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2319}, {"pc": [2079, 2080], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2320}, {"pc": [2081, 2082], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2321}, {"pc": [2083, 2084, 2085], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2322}, {"pc": [2086], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2323}, {"pc": [2087], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2324}, {"pc": [2088], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2325}, {"pc": [2089], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2326}, {"pc": [2090, 2091], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2327}, {"pc": [2092], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2328}, {"pc": [2093], "errorMessage": "poolKey.poolId as uint16 overflowed 16 bits", "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2331}, {"pc": [2094, 2095, 2096], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2332}, {"pc": [2097], "source": "contracts/validatorRegistry.algo.ts:579", "teal": 2333}, {"pc": [2098, 2099], "source": "contracts/validatorRegistry.algo.ts:580", "teal": 2334}, {"pc": [2100, 2101], "source": "contracts/validatorRegistry.algo.ts:580", "teal": 2335}, {"pc": [2102, 2103], "source": "contracts/validatorRegistry.algo.ts:580", "teal": 2336}, {"pc": [2104, 2105, 2106], "source": "contracts/validatorRegistry.algo.ts:580", "teal": 2337}, {"pc": [2107], "source": "contracts/validatorRegistry.algo.ts:580", "teal": 2338}, {"pc": [2108], "source": "contracts/validatorRegistry.algo.ts:580", "teal": 2339}, {"pc": [2109], "source": "contracts/validatorRegistry.algo.ts:580", "teal": 2340}, {"pc": [2110, 2111], "source": "contracts/validatorRegistry.algo.ts:582", "teal": 2341}, {"pc": [2112], "source": "contracts/validatorRegistry.algo.ts:582", "teal": 2342}, {"pc": [2113, 2114], "source": "contracts/validatorRegistry.algo.ts:581", "teal": 2343}, {"pc": [2115], "source": "contracts/validatorRegistry.algo.ts:581", "teal": 2344}, {"pc": [2116], "source": "contracts/validatorRegistry.algo.ts:581", "teal": 2345}, {"pc": [2117], "source": "contracts/validatorRegistry.algo.ts:577", "teal": 2346}, {"pc": [2118], "source": "contracts/validatorRegistry.algo.ts:577", "teal": 2347}, {"pc": [2119, 2120], "source": "contracts/validatorRegistry.algo.ts:585", "teal": 2351}, {"pc": [2121, 2122], "source": "contracts/validatorRegistry.algo.ts:585", "teal": 2352}, {"pc": [2123, 2124], "source": "contracts/validatorRegistry.algo.ts:585", "teal": 2353}, {"pc": [2125, 2126, 2127], "source": "contracts/validatorRegistry.algo.ts:585", "teal": 2354}, {"pc": [2128, 2129], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2357}, {"pc": [2130, 2131], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2360}, {"pc": [2132], "source": "contracts/validatorRegistry.algo.ts:513", "teal": 2361}, {"pc": [2133], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2366}, {"pc": [2134, 2135, 2136], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2369}, {"pc": [2137], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2370}, {"pc": [2138, 2139, 2140], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2373}, {"pc": [2141], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2374}, {"pc": [2142], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2375}, {"pc": [2143], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2376}, {"pc": [2144], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2377}, {"pc": [2145, 2146, 2147], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2395}, {"pc": [2148], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2398}, {"pc": [2149, 2150], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2399}, {"pc": [2151, 2152], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2403}, {"pc": [2153], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2404}, {"pc": [2154], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2405}, {"pc": [2155, 2156], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2406}, {"pc": [2157], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2407}, {"pc": [2158], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2408}, {"pc": [2159, 2160], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2409}, {"pc": [2161], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2410}, {"pc": [2162], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2411}, {"pc": [2163, 2164], "source": "contracts/validatorRegistry.algo.ts:605", "teal": 2412}, {"pc": [2165, 2166], "source": "contracts/validatorRegistry.algo.ts:606", "teal": 2416}, {"pc": [2167], "source": "contracts/validatorRegistry.algo.ts:606", "teal": 2417}, {"pc": [2168], "source": "contracts/validatorRegistry.algo.ts:606", "teal": 2418}, {"pc": [2169], "source": "contracts/validatorRegistry.algo.ts:606", "teal": 2419}, {"pc": [2170, 2171], "source": "contracts/validatorRegistry.algo.ts:608", "teal": 2424}, {"pc": [2172, 2173], "source": "contracts/validatorRegistry.algo.ts:608", "teal": 2425}, {"pc": [2174, 2175], "source": "contracts/validatorRegistry.algo.ts:608", "teal": 2426}, {"pc": [2176], "source": "contracts/validatorRegistry.algo.ts:608", "teal": 2427}, {"pc": [2177], "source": "contracts/validatorRegistry.algo.ts:608", "teal": 2428}, {"pc": [2178, 2179, 2180], "source": "contracts/validatorRegistry.algo.ts:608", "teal": 2429}, {"pc": [2181, 2182], "source": "contracts/validatorRegistry.algo.ts:609", "teal": 2434}, {"pc": [2183, 2184], "source": "contracts/validatorRegistry.algo.ts:609", "teal": 2435}, {"pc": [2185], "source": "contracts/validatorRegistry.algo.ts:609", "teal": 2436}, {"pc": [2186, 2187], "source": "contracts/validatorRegistry.algo.ts:609", "teal": 2437}, {"pc": [2188], "source": "contracts/validatorRegistry.algo.ts:609", "teal": 2438}, {"pc": [2189], "source": "contracts/validatorRegistry.algo.ts:609", "teal": 2439}, {"pc": [2190, 2191], "source": "contracts/validatorRegistry.algo.ts:609", "teal": 2440}, {"pc": [2192], "source": "contracts/validatorRegistry.algo.ts:609", "teal": 2441}, {"pc": [2193, 2194, 2195], "source": "contracts/validatorRegistry.algo.ts:609", "teal": 2442}, {"pc": [2196, 2197], "source": "contracts/validatorRegistry.algo.ts:615", "teal": 2447}, {"pc": [2198, 2199], "source": "contracts/validatorRegistry.algo.ts:615", "teal": 2448}, {"pc": [2200, 2201], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2452}, {"pc": [2202], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2453}, {"pc": [2203], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2454}, {"pc": [2204, 2205], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2455}, {"pc": [2206], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2456}, {"pc": [2207], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2457}, {"pc": [2208, 2209], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2458}, {"pc": [2210], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2459}, {"pc": [2211], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2460}, {"pc": [2212, 2213], "source": "contracts/validatorRegistry.algo.ts:616", "teal": 2461}, {"pc": [2214, 2215], "source": "contracts/validatorRegistry.algo.ts:617", "teal": 2466}, {"pc": [2216], "source": "contracts/validatorRegistry.algo.ts:617", "teal": 2467}, {"pc": [2217], "source": "contracts/validatorRegistry.algo.ts:617", "teal": 2468}, {"pc": [2218, 2219, 2220], "source": "contracts/validatorRegistry.algo.ts:617", "teal": 2469}, {"pc": [2221, 2222], "source": "contracts/validatorRegistry.algo.ts:619", "teal": 2475}, {"pc": [2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234], "source": "contracts/validatorRegistry.algo.ts:619", "teal": 2476}, {"pc": [2235], "source": "contracts/validatorRegistry.algo.ts:619", "teal": 2477}, {"pc": [2236], "errorMessage": "global state value does not exist: AppID.fromUint64(pool1AppID).globalState('lastPayout')", "source": "contracts/validatorRegistry.algo.ts:619", "teal": 2480}, {"pc": [2237, 2238], "source": "contracts/validatorRegistry.algo.ts:619", "teal": 2481}, {"pc": [2239], "source": "contracts/validatorRegistry.algo.ts:619", "teal": 2482}, {"pc": [2240, 2241, 2242], "source": "contracts/validatorRegistry.algo.ts:619", "teal": 2483}, {"pc": [2243, 2244], "source": "contracts/validatorRegistry.algo.ts:620", "teal": 2488}, {"pc": [2245, 2246], "source": "contracts/validatorRegistry.algo.ts:620", "teal": 2489}, {"pc": [2247], "source": "contracts/validatorRegistry.algo.ts:620", "teal": 2490}, {"pc": [2248, 2249], "source": "contracts/validatorRegistry.algo.ts:620", "teal": 2491}, {"pc": [2250], "source": "contracts/validatorRegistry.algo.ts:620", "teal": 2492}, {"pc": [2251], "source": "contracts/validatorRegistry.algo.ts:620", "teal": 2493}, {"pc": [2252, 2253], "source": "contracts/validatorRegistry.algo.ts:620", "teal": 2494}, {"pc": [2254], "source": "contracts/validatorRegistry.algo.ts:620", "teal": 2495}, {"pc": [2255, 2256, 2257], "source": "contracts/validatorRegistry.algo.ts:620", "teal": 2496}, {"pc": [2258, 2259, 2260], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2501}, {"pc": [2261, 2262], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2502}, {"pc": [2263], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2503}, {"pc": [2264, 2265], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2504}, {"pc": [2266], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2505}, {"pc": [2267], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2506}, {"pc": [2268, 2269], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2507}, {"pc": [2270], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2508}, {"pc": [2271], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2509}, {"pc": [2272, 2273], "source": "contracts/validatorRegistry.algo.ts:622", "teal": 2510}, {"pc": [2274, 2275], "source": "contracts/validatorRegistry.algo.ts:623", "teal": 2514}, {"pc": [2276, 2277], "source": "contracts/validatorRegistry.algo.ts:623", "teal": 2515}, {"pc": [2278, 2279], "source": "contracts/validatorRegistry.algo.ts:623", "teal": 2516}, {"pc": [2280], "source": "contracts/validatorRegistry.algo.ts:623", "teal": 2517}, {"pc": [2281], "source": "contracts/validatorRegistry.algo.ts:623", "teal": 2518}, {"pc": [2282, 2283], "source": "contracts/validatorRegistry.algo.ts:623", "teal": 2519}, {"pc": [2284, 2285], "source": "contracts/validatorRegistry.algo.ts:625", "teal": 2524}, {"pc": [2286, 2287], "source": "contracts/validatorRegistry.algo.ts:625", "teal": 2525}, {"pc": [2288, 2289], "source": "contracts/validatorRegistry.algo.ts:625", "teal": 2526}, {"pc": [2290], "source": "contracts/validatorRegistry.algo.ts:625", "teal": 2527}, {"pc": [2291], "source": "contracts/validatorRegistry.algo.ts:625", "teal": 2528}, {"pc": [2292, 2293], "source": "contracts/validatorRegistry.algo.ts:625", "teal": 2529}, {"pc": [2294], "source": "contracts/validatorRegistry.algo.ts:625", "teal": 2530}, {"pc": [2295, 2296, 2297], "source": "contracts/validatorRegistry.algo.ts:625", "teal": 2531}, {"pc": [2298, 2299], "source": "contracts/validatorRegistry.algo.ts:626", "teal": 2536}, {"pc": [2300, 2301], "source": "contracts/validatorRegistry.algo.ts:626", "teal": 2537}, {"pc": [2302], "source": "contracts/validatorRegistry.algo.ts:626", "teal": 2538}, {"pc": [2303, 2304], "source": "contracts/validatorRegistry.algo.ts:626", "teal": 2539}, {"pc": [2305], "source": "contracts/validatorRegistry.algo.ts:626", "teal": 2540}, {"pc": [2306], "source": "contracts/validatorRegistry.algo.ts:626", "teal": 2541}, {"pc": [2307, 2308], "source": "contracts/validatorRegistry.algo.ts:626", "teal": 2542}, {"pc": [2309], "source": "contracts/validatorRegistry.algo.ts:626", "teal": 2543}, {"pc": [2310, 2311, 2312], "source": "contracts/validatorRegistry.algo.ts:626", "teal": 2544}, {"pc": [2313, 2314], "source": "contracts/validatorRegistry.algo.ts:629", "teal": 2551}, {"pc": [2315, 2316], "source": "contracts/validatorRegistry.algo.ts:629", "teal": 2552}, {"pc": [2317], "source": "contracts/validatorRegistry.algo.ts:629", "teal": 2553}, {"pc": [2318], "source": "contracts/validatorRegistry.algo.ts:629", "teal": 2554}, {"pc": [2319, 2320], "source": "contracts/validatorRegistry.algo.ts:629", "teal": 2555}, {"pc": [2321], "source": "contracts/validatorRegistry.algo.ts:629", "teal": 2556}, {"pc": [2322], "source": "contracts/validatorRegistry.algo.ts:629", "teal": 2557}, {"pc": [2323, 2324], "source": "contracts/validatorRegistry.algo.ts:629", "teal": 2558}, {"pc": [2325], "source": "contracts/validatorRegistry.algo.ts:629", "teal": 2559}, {"pc": [2326, 2327], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2563}, {"pc": [2328, 2329], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2564}, {"pc": [2330], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2565}, {"pc": [2331, 2332], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2566}, {"pc": [2333], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2567}, {"pc": [2334], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2568}, {"pc": [2335, 2336], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2569}, {"pc": [2337], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2570}, {"pc": [2338], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2571}, {"pc": [2339, 2340], "source": "contracts/validatorRegistry.algo.ts:631", "teal": 2572}, {"pc": [2341, 2342], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2576}, {"pc": [2343], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2577}, {"pc": [2344], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2578}, {"pc": [2345, 2346], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2579}, {"pc": [2347], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2580}, {"pc": [2348], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2581}, {"pc": [2349, 2350], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2582}, {"pc": [2351], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2583}, {"pc": [2352], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2584}, {"pc": [2353, 2354], "source": "contracts/validatorRegistry.algo.ts:632", "teal": 2585}, {"pc": [2355], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2589}, {"pc": [2356, 2357], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2590}, {"pc": [2358, 2359], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2595}, {"pc": [2360, 2361], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2596}, {"pc": [2362], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2597}, {"pc": [2363, 2364, 2365], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2598}, {"pc": [2366, 2367], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2605}, {"pc": [2368, 2369], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2606}, {"pc": [2370, 2371], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2607}, {"pc": [2372], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2608}, {"pc": [2373], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2609}, {"pc": [2374, 2375], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2610}, {"pc": [2376], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2611}, {"pc": [2377], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2612}, {"pc": [2378], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2613}, {"pc": [2379, 2380], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2614}, {"pc": [2381], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2615}, {"pc": [2382], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2616}, {"pc": [2383, 2384], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2617}, {"pc": [2385], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2618}, {"pc": [2386], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2619}, {"pc": [2387, 2388, 2389, 2390], "source": "contracts/validatorRegistry.algo.ts:639", "teal": 2620}, {"pc": [2391], "source": "contracts/validatorRegistry.algo.ts:638", "teal": 2621}, {"pc": [2392], "source": "contracts/validatorRegistry.algo.ts:638", "teal": 2622}, {"pc": [2393, 2394], "source": "contracts/validatorRegistry.algo.ts:640", "teal": 2623}, {"pc": [2395], "source": "contracts/validatorRegistry.algo.ts:638", "teal": 2624}, {"pc": [2396], "source": "contracts/validatorRegistry.algo.ts:638", "teal": 2625}, {"pc": [2397], "source": "contracts/validatorRegistry.algo.ts:638", "teal": 2626}, {"pc": [2398], "source": "contracts/validatorRegistry.algo.ts:638", "teal": 2627}, {"pc": [2399], "source": "contracts/validatorRegistry.algo.ts:638", "teal": 2628}, {"pc": [2400], "errorMessage": "wideRatio failed", "source": "contracts/validatorRegistry.algo.ts:638", "teal": 2631}, {"pc": [2401, 2402], "source": "contracts/validatorRegistry.algo.ts:638", "teal": 2632}, {"pc": [2403, 2404], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2636}, {"pc": [2405, 2406], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2637}, {"pc": [2407], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2638}, {"pc": [2408], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2639}, {"pc": [2409], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2640}, {"pc": [2410, 2411], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2641}, {"pc": [2412], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2642}, {"pc": [2413], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2643}, {"pc": [2414, 2415], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2644}, {"pc": [2416], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2645}, {"pc": [2417], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2646}, {"pc": [2418, 2419], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2647}, {"pc": [2420], "source": "contracts/validatorRegistry.algo.ts:642", "teal": 2648}, {"pc": [2421, 2422], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2653}, {"pc": [2423], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2654}, {"pc": [2424], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2655}, {"pc": [2425, 2426], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2656}, {"pc": [2427, 2428, 2429], "source": "contracts/validatorRegistry.algo.ts:633", "teal": 2657}, {"pc": [2430, 2431], "source": "contracts/validatorRegistry.algo.ts:644", "teal": 2662}, {"pc": [2432, 2433], "source": "contracts/validatorRegistry.algo.ts:644", "teal": 2663}, {"pc": [2434], "source": "contracts/validatorRegistry.algo.ts:644", "teal": 2664}, {"pc": [2435, 2436], "source": "contracts/validatorRegistry.algo.ts:644", "teal": 2665}, {"pc": [2437], "source": "contracts/validatorRegistry.algo.ts:644", "teal": 2666}, {"pc": [2438], "source": "contracts/validatorRegistry.algo.ts:644", "teal": 2667}, {"pc": [2439, 2440], "source": "contracts/validatorRegistry.algo.ts:644", "teal": 2668}, {"pc": [2441], "source": "contracts/validatorRegistry.algo.ts:644", "teal": 2669}, {"pc": [2442, 2443], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2673}, {"pc": [2444, 2445], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2676}, {"pc": [2446], "source": "contracts/validatorRegistry.algo.ts:603", "teal": 2677}, {"pc": [2447, 2448, 2449], "source": "contracts/validatorRegistry.algo.ts:663", "teal": 2682}, {"pc": [2450], "source": "contracts/validatorRegistry.algo.ts:663", "teal": 2683}, {"pc": [2451, 2452, 2453], "source": "contracts/validatorRegistry.algo.ts:662", "teal": 2686}, {"pc": [2454], "source": "contracts/validatorRegistry.algo.ts:662", "teal": 2687}, {"pc": [2455, 2456, 2457], "source": "contracts/validatorRegistry.algo.ts:661", "teal": 2690}, {"pc": [2458], "source": "contracts/validatorRegistry.algo.ts:661", "teal": 2691}, {"pc": [2459, 2460, 2461], "source": "contracts/validatorRegistry.algo.ts:660", "teal": 2694}, {"pc": [2462], "source": "contracts/validatorRegistry.algo.ts:660", "teal": 2695}, {"pc": [2463, 2464, 2465], "source": "contracts/validatorRegistry.algo.ts:659", "teal": 2698}, {"pc": [2466], "source": "contracts/validatorRegistry.algo.ts:659", "teal": 2699}, {"pc": [2467], "source": "contracts/validatorRegistry.algo.ts:659", "teal": 2700}, {"pc": [2468], "source": "contracts/validatorRegistry.algo.ts:659", "teal": 2701}, {"pc": [2469], "source": "contracts/validatorRegistry.algo.ts:659", "teal": 2702}, {"pc": [2470], "errorMessage": "argument 4 (poolKey) for stakeUpdatedViaRewards must be a (uint64,uint64,uint64)", "source": "contracts/validatorRegistry.algo.ts:659", "teal": 2705}, {"pc": [2471, 2472, 2473], "source": "contracts/validatorRegistry.algo.ts:658", "teal": 2708}, {"pc": [2474], "source": "contracts/validatorRegistry.algo.ts:658", "teal": 2709}, {"pc": [2475], "source": "contracts/validatorRegistry.algo.ts:658", "teal": 2710}, {"pc": [2476, 2477, 2478], "source": "contracts/validatorRegistry.algo.ts:658", "teal": 2724}, {"pc": [2479, 2480], "source": "contracts/validatorRegistry.algo.ts:665", "teal": 2728}, {"pc": [2481, 2482, 2483], "source": "contracts/validatorRegistry.algo.ts:665", "teal": 2729}, {"pc": [2484, 2485], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2733}, {"pc": [2486, 2487], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2734}, {"pc": [2488, 2489, 2490], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2735}, {"pc": [2491], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2736}, {"pc": [2492], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2737}, {"pc": [2493], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2738}, {"pc": [2494, 2495], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2739}, {"pc": [2496], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2740}, {"pc": [2497], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2741}, {"pc": [2498, 2499], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2742}, {"pc": [2500], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2743}, {"pc": [2501, 2502], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2744}, {"pc": [2503, 2504], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2745}, {"pc": [2505, 2506, 2507], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2746}, {"pc": [2508], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2747}, {"pc": [2509], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2748}, {"pc": [2510], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2749}, {"pc": [2511, 2512], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2750}, {"pc": [2513], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2751}, {"pc": [2514], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2752}, {"pc": [2515, 2516], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2753}, {"pc": [2517], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2754}, {"pc": [2518], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2755}, {"pc": [2519], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2756}, {"pc": [2520, 2521], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2757}, {"pc": [2522, 2523, 2524], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2758}, {"pc": [2525], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2759}, {"pc": [2526], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2760}, {"pc": [2527], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2761}, {"pc": [2528, 2529], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2762}, {"pc": [2530], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2763}, {"pc": [2531], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2764}, {"pc": [2532, 2533], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2765}, {"pc": [2534], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2766}, {"pc": [2535], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2767}, {"pc": [2536], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2768}, {"pc": [2537, 2538], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2769}, {"pc": [2539, 2540, 2541], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2770}, {"pc": [2542], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2771}, {"pc": [2543], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2772}, {"pc": [2544], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2773}, {"pc": [2545, 2546], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2774}, {"pc": [2547], "source": "contracts/validatorRegistry.algo.ts:668", "teal": 2775}, {"pc": [2548, 2549], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2779}, {"pc": [2550], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2780}, {"pc": [2551], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2781}, {"pc": [2552], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2782}, {"pc": [2553, 2554], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2783}, {"pc": [2555, 2556, 2557], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2784}, {"pc": [2558], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2785}, {"pc": [2559], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2786}, {"pc": [2560], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2787}, {"pc": [2561, 2562], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2788}, {"pc": [2563], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2789}, {"pc": [2564], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2790}, {"pc": [2565, 2566], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2791}, {"pc": [2567], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2792}, {"pc": [2568], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2793}, {"pc": [2569], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2794}, {"pc": [2570, 2571], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2795}, {"pc": [2572, 2573, 2574], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2796}, {"pc": [2575], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2797}, {"pc": [2576], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2798}, {"pc": [2577], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2799}, {"pc": [2578, 2579], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2800}, {"pc": [2580], "source": "contracts/validatorRegistry.algo.ts:669", "teal": 2801}, {"pc": [2581, 2582], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2805}, {"pc": [2583], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2806}, {"pc": [2584], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2807}, {"pc": [2585], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2808}, {"pc": [2586, 2587], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2809}, {"pc": [2588, 2589, 2590], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2810}, {"pc": [2591], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2811}, {"pc": [2592], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2812}, {"pc": [2593], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2813}, {"pc": [2594, 2595], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2814}, {"pc": [2596], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2815}, {"pc": [2597], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2816}, {"pc": [2598, 2599], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2817}, {"pc": [2600], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2818}, {"pc": [2601], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2819}, {"pc": [2602], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2820}, {"pc": [2603, 2604], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2821}, {"pc": [2605, 2606, 2607], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2822}, {"pc": [2608], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2823}, {"pc": [2609], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2824}, {"pc": [2610], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2825}, {"pc": [2611, 2612], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2826}, {"pc": [2613], "source": "contracts/validatorRegistry.algo.ts:670", "teal": 2827}, {"pc": [2614, 2615], "source": "contracts/validatorRegistry.algo.ts:672", "teal": 2831}, {"pc": [2616], "source": "contracts/validatorRegistry.algo.ts:672", "teal": 2832}, {"pc": [2617, 2618], "source": "contracts/validatorRegistry.algo.ts:672", "teal": 2833}, {"pc": [2619], "source": "contracts/validatorRegistry.algo.ts:672", "teal": 2834}, {"pc": [2620, 2621], "source": "contracts/validatorRegistry.algo.ts:672", "teal": 2835}, {"pc": [2622], "source": "contracts/validatorRegistry.algo.ts:672", "teal": 2836}, {"pc": [2623], "source": "contracts/validatorRegistry.algo.ts:672", "teal": 2837}, {"pc": [2624, 2625], "source": "contracts/validatorRegistry.algo.ts:675", "teal": 2841}, {"pc": [2626, 2627, 2628], "source": "contracts/validatorRegistry.algo.ts:675", "teal": 2842}, {"pc": [2629], "source": "contracts/validatorRegistry.algo.ts:675", "teal": 2843}, {"pc": [2630, 2631, 2632], "source": "contracts/validatorRegistry.algo.ts:675", "teal": 2844}, {"pc": [2633, 2634, 2635, 2636, 2637, 2638], "source": "contracts/validatorRegistry.algo.ts:677", "teal": 2856}, {"pc": [2639, 2640], "source": "contracts/validatorRegistry.algo.ts:678", "teal": 2857}, {"pc": [2641, 2642, 2643], "source": "contracts/validatorRegistry.algo.ts:678", "teal": 2858}, {"pc": [2644], "source": "contracts/validatorRegistry.algo.ts:678", "teal": 2859}, {"pc": [2645], "source": "contracts/validatorRegistry.algo.ts:678", "teal": 2860}, {"pc": [2646, 2647], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2861}, {"pc": [2648, 2649, 2650], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2862}, {"pc": [2651], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2863}, {"pc": [2652], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2864}, {"pc": [2653], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2865}, {"pc": [2654], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2866}, {"pc": [2655, 2656], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2867}, {"pc": [2657], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2868}, {"pc": [2658], "errorMessage": "poolKey.poolId as uint16 overflowed 16 bits", "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2871}, {"pc": [2659, 2660, 2661], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2872}, {"pc": [2662], "source": "contracts/validatorRegistry.algo.ts:679", "teal": 2873}, {"pc": [2663, 2664], "source": "contracts/validatorRegistry.algo.ts:680", "teal": 2874}, {"pc": [2665, 2666, 2667], "source": "contracts/validatorRegistry.algo.ts:680", "teal": 2875}, {"pc": [2668], "source": "contracts/validatorRegistry.algo.ts:680", "teal": 2876}, {"pc": [2669], "source": "contracts/validatorRegistry.algo.ts:680", "teal": 2877}, {"pc": [2670], "source": "contracts/validatorRegistry.algo.ts:680", "teal": 2878}, {"pc": [2671, 2672], "source": "contracts/validatorRegistry.algo.ts:684", "teal": 2879}, {"pc": [2673], "source": "contracts/validatorRegistry.algo.ts:684", "teal": 2880}, {"pc": [2674], "source": "contracts/validatorRegistry.algo.ts:684", "teal": 2881}, {"pc": [2675, 2676], "source": "contracts/validatorRegistry.algo.ts:683", "teal": 2882}, {"pc": [2677], "source": "contracts/validatorRegistry.algo.ts:683", "teal": 2883}, {"pc": [2678], "source": "contracts/validatorRegistry.algo.ts:683", "teal": 2884}, {"pc": [2679, 2680], "source": "contracts/validatorRegistry.algo.ts:681", "teal": 2885}, {"pc": [2681], "source": "contracts/validatorRegistry.algo.ts:681", "teal": 2886}, {"pc": [2682], "source": "contracts/validatorRegistry.algo.ts:681", "teal": 2887}, {"pc": [2683, 2684], "source": "contracts/validatorRegistry.algo.ts:682", "teal": 2888}, {"pc": [2685], "source": "contracts/validatorRegistry.algo.ts:682", "teal": 2889}, {"pc": [2686], "source": "contracts/validatorRegistry.algo.ts:682", "teal": 2890}, {"pc": [2687], "source": "contracts/validatorRegistry.algo.ts:677", "teal": 2891}, {"pc": [2688], "source": "contracts/validatorRegistry.algo.ts:677", "teal": 2892}, {"pc": [2689], "source": "contracts/validatorRegistry.algo.ts:658", "teal": 2893}, {"pc": [2690, 2691, 2692], "source": "contracts/validatorRegistry.algo.ts:705", "teal": 2898}, {"pc": [2693], "source": "contracts/validatorRegistry.algo.ts:705", "teal": 2899}, {"pc": [2694], "source": "contracts/validatorRegistry.algo.ts:705", "teal": 2900}, {"pc": [2695], "source": "contracts/validatorRegistry.algo.ts:705", "teal": 2901}, {"pc": [2696], "source": "contracts/validatorRegistry.algo.ts:705", "teal": 2902}, {"pc": [2697], "errorMessage": "argument 0 (stakerRemoved) for stakeRemoved must be a bool", "source": "contracts/validatorRegistry.algo.ts:705", "teal": 2905}, {"pc": [2698], "source": "contracts/validatorRegistry.algo.ts:705", "teal": 2906}, {"pc": [2699], "source": "contracts/validatorRegistry.algo.ts:705", "teal": 2907}, {"pc": [2700, 2701, 2702], "source": "contracts/validatorRegistry.algo.ts:704", "teal": 2910}, {"pc": [2703], "source": "contracts/validatorRegistry.algo.ts:704", "teal": 2911}, {"pc": [2704, 2705, 2706], "source": "contracts/validatorRegistry.algo.ts:703", "teal": 2914}, {"pc": [2707], "source": "contracts/validatorRegistry.algo.ts:703", "teal": 2915}, {"pc": [2708, 2709, 2710], "source": "contracts/validatorRegistry.algo.ts:702", "teal": 2918}, {"pc": [2711], "source": "contracts/validatorRegistry.algo.ts:702", "teal": 2919}, {"pc": [2712], "source": "contracts/validatorRegistry.algo.ts:702", "teal": 2920}, {"pc": [2713, 2714], "source": "contracts/validatorRegistry.algo.ts:702", "teal": 2921}, {"pc": [2715], "source": "contracts/validatorRegistry.algo.ts:702", "teal": 2922}, {"pc": [2716], "errorMessage": "argument 3 (staker) for stakeRemoved must be a address", "source": "contracts/validatorRegistry.algo.ts:702", "teal": 2925}, {"pc": [2717, 2718, 2719], "source": "contracts/validatorRegistry.algo.ts:701", "teal": 2928}, {"pc": [2720], "source": "contracts/validatorRegistry.algo.ts:701", "teal": 2929}, {"pc": [2721], "source": "contracts/validatorRegistry.algo.ts:701", "teal": 2930}, {"pc": [2722], "source": "contracts/validatorRegistry.algo.ts:701", "teal": 2931}, {"pc": [2723], "source": "contracts/validatorRegistry.algo.ts:701", "teal": 2932}, {"pc": [2724], "errorMessage": "argument 4 (poolKey) for stakeRemoved must be a (uint64,uint64,uint64)", "source": "contracts/validatorRegistry.algo.ts:701", "teal": 2935}, {"pc": [2725, 2726, 2727], "source": "contracts/validatorRegistry.algo.ts:700", "teal": 2938}, {"pc": [2728], "source": "contracts/validatorRegistry.algo.ts:700", "teal": 2939}, {"pc": [2729], "source": "contracts/validatorRegistry.algo.ts:700", "teal": 2940}, {"pc": [2730, 2731, 2732], "source": "contracts/validatorRegistry.algo.ts:700", "teal": 2955}, {"pc": [2733], "source": "contracts/validatorRegistry.algo.ts:700", "teal": 2958}, {"pc": [2734, 2735], "source": "contracts/validatorRegistry.algo.ts:700", "teal": 2959}, {"pc": [2736, 2737], "source": "contracts/validatorRegistry.algo.ts:707", "teal": 2964}, {"pc": [2738, 2739], "source": "contracts/validatorRegistry.algo.ts:707", "teal": 2965}, {"pc": [2740], "source": "contracts/validatorRegistry.algo.ts:707", "teal": 2966}, {"pc": [2741, 2742, 2743], "source": "contracts/validatorRegistry.algo.ts:707", "teal": 2967}, {"pc": [2744], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2972}, {"pc": [2745, 2746], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2973}, {"pc": [2747, 2748], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2974}, {"pc": [2749], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2975}, {"pc": [2750, 2751], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2976}, {"pc": [2752, 2753], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2977}, {"pc": [2754], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2978}, {"pc": [2755, 2756], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2979}, {"pc": [2757, 2758], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2980}, {"pc": [2759, 2760], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2981}, {"pc": [2761, 2762], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2982}, {"pc": [2763], "source": "contracts/validatorRegistry.algo.ts:708", "teal": 2983}, {"pc": [2764, 2765], "source": "contracts/validatorRegistry.algo.ts:710", "teal": 2988}, {"pc": [2766, 2767, 2768], "source": "contracts/validatorRegistry.algo.ts:710", "teal": 2989}, {"pc": [2769, 2770], "source": "contracts/validatorRegistry.algo.ts:714", "teal": 2993}, {"pc": [2771], "source": "contracts/validatorRegistry.algo.ts:714", "teal": 2994}, {"pc": [2772], "source": "contracts/validatorRegistry.algo.ts:714", "teal": 2995}, {"pc": [2773], "source": "contracts/validatorRegistry.algo.ts:714", "teal": 2996}, {"pc": [2774, 2775, 2776], "source": "contracts/validatorRegistry.algo.ts:714", "teal": 2997}, {"pc": [2777, 2778], "source": "contracts/validatorRegistry.algo.ts:714", "teal": 2998}, {"pc": [2779], "source": "contracts/validatorRegistry.algo.ts:714", "teal": 2999}, {"pc": [2780], "source": "contracts/validatorRegistry.algo.ts:714", "teal": 3000}, {"pc": [2781], "source": "contracts/validatorRegistry.algo.ts:714", "teal": 3001}, {"pc": [2782], "errorMessage": "should only be called if algo or reward was removed", "source": "contracts/validatorRegistry.algo.ts:714", "teal": 3005}, {"pc": [2783, 2784], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3009}, {"pc": [2785, 2786], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3010}, {"pc": [2787, 2788, 2789], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3011}, {"pc": [2790], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3012}, {"pc": [2791], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3013}, {"pc": [2792], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3014}, {"pc": [2793, 2794], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3015}, {"pc": [2795], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3016}, {"pc": [2796], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3017}, {"pc": [2797, 2798], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3018}, {"pc": [2799], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3019}, {"pc": [2800, 2801], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3020}, {"pc": [2802, 2803], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3021}, {"pc": [2804, 2805, 2806], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3022}, {"pc": [2807], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3023}, {"pc": [2808], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3024}, {"pc": [2809], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3025}, {"pc": [2810, 2811], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3026}, {"pc": [2812], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3027}, {"pc": [2813], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3028}, {"pc": [2814, 2815], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3029}, {"pc": [2816], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3030}, {"pc": [2817], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3031}, {"pc": [2818], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3032}, {"pc": [2819, 2820], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3033}, {"pc": [2821, 2822, 2823], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3034}, {"pc": [2824], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3035}, {"pc": [2825], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3036}, {"pc": [2826], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3037}, {"pc": [2827, 2828], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3038}, {"pc": [2829], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3039}, {"pc": [2830], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3040}, {"pc": [2831, 2832], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3041}, {"pc": [2833], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3042}, {"pc": [2834], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3043}, {"pc": [2835], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3044}, {"pc": [2836, 2837], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3045}, {"pc": [2838, 2839, 2840], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3046}, {"pc": [2841], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3047}, {"pc": [2842], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3048}, {"pc": [2843], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3049}, {"pc": [2844, 2845], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3050}, {"pc": [2846], "source": "contracts/validatorRegistry.algo.ts:717", "teal": 3051}, {"pc": [2847, 2848], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3055}, {"pc": [2849], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3056}, {"pc": [2850], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3057}, {"pc": [2851], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3058}, {"pc": [2852, 2853], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3059}, {"pc": [2854, 2855, 2856], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3060}, {"pc": [2857], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3061}, {"pc": [2858], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3062}, {"pc": [2859], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3063}, {"pc": [2860, 2861], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3064}, {"pc": [2862], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3065}, {"pc": [2863], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3066}, {"pc": [2864, 2865], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3067}, {"pc": [2866], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3068}, {"pc": [2867], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3069}, {"pc": [2868], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3070}, {"pc": [2869, 2870], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3071}, {"pc": [2871, 2872, 2873], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3072}, {"pc": [2874], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3073}, {"pc": [2875], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3074}, {"pc": [2876], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3075}, {"pc": [2877, 2878], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3076}, {"pc": [2879], "source": "contracts/validatorRegistry.algo.ts:718", "teal": 3077}, {"pc": [2880, 2881], "source": "contracts/validatorRegistry.algo.ts:719", "teal": 3081}, {"pc": [2882], "source": "contracts/validatorRegistry.algo.ts:719", "teal": 3082}, {"pc": [2883, 2884], "source": "contracts/validatorRegistry.algo.ts:719", "teal": 3083}, {"pc": [2885], "source": "contracts/validatorRegistry.algo.ts:719", "teal": 3084}, {"pc": [2886, 2887], "source": "contracts/validatorRegistry.algo.ts:719", "teal": 3085}, {"pc": [2888], "source": "contracts/validatorRegistry.algo.ts:719", "teal": 3086}, {"pc": [2889], "source": "contracts/validatorRegistry.algo.ts:719", "teal": 3087}, {"pc": [2890, 2891], "source": "contracts/validatorRegistry.algo.ts:721", "teal": 3092}, {"pc": [2892], "source": "contracts/validatorRegistry.algo.ts:721", "teal": 3093}, {"pc": [2893], "source": "contracts/validatorRegistry.algo.ts:721", "teal": 3094}, {"pc": [2894, 2895, 2896], "source": "contracts/validatorRegistry.algo.ts:721", "teal": 3095}, {"pc": [2897, 2898], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3100}, {"pc": [2899], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3101}, {"pc": [2900], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3102}, {"pc": [2901, 2902], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3103}, {"pc": [2903, 2904, 2905], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3104}, {"pc": [2906], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3105}, {"pc": [2907], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3106}, {"pc": [2908], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3107}, {"pc": [2909, 2910], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3108}, {"pc": [2911], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3109}, {"pc": [2912], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3110}, {"pc": [2913, 2914], "source": "contracts/validatorRegistry.algo.ts:722", "teal": 3111}, {"pc": [2915, 2916], "source": "contracts/validatorRegistry.algo.ts:723", "teal": 3115}, {"pc": [2917], "source": "contracts/validatorRegistry.algo.ts:723", "teal": 3116}, {"pc": [2918], "source": "contracts/validatorRegistry.algo.ts:723", "teal": 3117}, {"pc": [2919], "errorMessage": "rewardRemoved can't be set if validator doesn't have reward token!", "source": "contracts/validatorRegistry.algo.ts:723", "teal": 3120}, {"pc": [2920, 2921], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3127}, {"pc": [2922], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3128}, {"pc": [2923], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3129}, {"pc": [2924, 2925], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3130}, {"pc": [2926, 2927, 2928], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3131}, {"pc": [2929], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3132}, {"pc": [2930], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3133}, {"pc": [2931], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3134}, {"pc": [2932, 2933], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3135}, {"pc": [2934], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3136}, {"pc": [2935], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3137}, {"pc": [2936, 2937], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3138}, {"pc": [2938], "source": "contracts/validatorRegistry.algo.ts:725", "teal": 3139}, {"pc": [2939], "errorMessage": "reward being removed must be covered by hold back amount", "source": "contracts/validatorRegistry.algo.ts:724", "teal": 3142}, {"pc": [2940, 2941], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3146}, {"pc": [2942], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3147}, {"pc": [2943], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3148}, {"pc": [2944], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3149}, {"pc": [2945, 2946], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3150}, {"pc": [2947, 2948, 2949], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3151}, {"pc": [2950], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3152}, {"pc": [2951], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3153}, {"pc": [2952], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3154}, {"pc": [2953, 2954], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3155}, {"pc": [2955], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3156}, {"pc": [2956], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3157}, {"pc": [2957, 2958], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3158}, {"pc": [2959], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3159}, {"pc": [2960], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3160}, {"pc": [2961], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3161}, {"pc": [2962, 2963], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3162}, {"pc": [2964, 2965, 2966], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3163}, {"pc": [2967], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3164}, {"pc": [2968], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3165}, {"pc": [2969], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3166}, {"pc": [2970, 2971], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3167}, {"pc": [2972], "source": "contracts/validatorRegistry.algo.ts:730", "teal": 3168}, {"pc": [2973, 2974], "source": "contracts/validatorRegistry.algo.ts:735", "teal": 3173}, {"pc": [2975, 2976, 2977], "source": "contracts/validatorRegistry.algo.ts:735", "teal": 3174}, {"pc": [2978], "source": "contracts/validatorRegistry.algo.ts:735", "teal": 3175}, {"pc": [2979], "source": "contracts/validatorRegistry.algo.ts:735", "teal": 3176}, {"pc": [2980], "source": "contracts/validatorRegistry.algo.ts:735", "teal": 3177}, {"pc": [2981, 2982, 2983], "source": "contracts/validatorRegistry.algo.ts:735", "teal": 3178}, {"pc": [2984], "source": "contracts/validatorRegistry.algo.ts:736", "teal": 3186}, {"pc": [2985, 2986], "source": "contracts/validatorRegistry.algo.ts:736", "teal": 3187}, {"pc": [2987, 2988], "source": "contracts/validatorRegistry.algo.ts:736", "teal": 3188}, {"pc": [2989, 2990], "source": "contracts/validatorRegistry.algo.ts:736", "teal": 3189}, {"pc": [2991, 2992], "source": "contracts/validatorRegistry.algo.ts:736", "teal": 3190}, {"pc": [2993, 2994], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3194}, {"pc": [2995], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3195}, {"pc": [2996], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3196}, {"pc": [2997, 2998], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3197}, {"pc": [2999, 3000, 3001], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3198}, {"pc": [3002], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3199}, {"pc": [3003], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3200}, {"pc": [3004], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3201}, {"pc": [3005, 3006], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3202}, {"pc": [3007], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3203}, {"pc": [3008], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3204}, {"pc": [3009, 3010], "source": "contracts/validatorRegistry.algo.ts:737", "teal": 3205}, {"pc": [3011, 3012], "source": "contracts/validatorRegistry.algo.ts:738", "teal": 3209}, {"pc": [3013, 3014], "source": "contracts/validatorRegistry.algo.ts:738", "teal": 3210}, {"pc": [3015, 3016], "source": "contracts/validatorRegistry.algo.ts:738", "teal": 3211}, {"pc": [3017], "source": "contracts/validatorRegistry.algo.ts:738", "teal": 3212}, {"pc": [3018, 3019], "source": "contracts/validatorRegistry.algo.ts:738", "teal": 3213}, {"pc": [3020, 3021], "source": "contracts/validatorRegistry.algo.ts:738", "teal": 3214}, {"pc": [3022], "source": "contracts/validatorRegistry.algo.ts:738", "teal": 3215}, {"pc": [3023, 3024], "source": "contracts/validatorRegistry.algo.ts:738", "teal": 3216}, {"pc": [3025], "source": "contracts/validatorRegistry.algo.ts:736", "teal": 3219}, {"pc": [3026, 3027], "source": "contracts/validatorRegistry.algo.ts:736", "teal": 3220}, {"pc": [3028], "source": "contracts/validatorRegistry.algo.ts:736", "teal": 3223}, {"pc": [3029, 3030], "source": "contracts/validatorRegistry.algo.ts:741", "teal": 3236}, {"pc": [3031, 3032], "source": "contracts/validatorRegistry.algo.ts:742", "teal": 3237}, {"pc": [3033, 3034, 3035], "source": "contracts/validatorRegistry.algo.ts:742", "teal": 3238}, {"pc": [3036], "source": "contracts/validatorRegistry.algo.ts:742", "teal": 3239}, {"pc": [3037], "source": "contracts/validatorRegistry.algo.ts:742", "teal": 3240}, {"pc": [3038, 3039], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3241}, {"pc": [3040, 3041, 3042], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3242}, {"pc": [3043], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3243}, {"pc": [3044], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3244}, {"pc": [3045], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3245}, {"pc": [3046], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3246}, {"pc": [3047, 3048], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3247}, {"pc": [3049], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3248}, {"pc": [3050], "errorMessage": "poolKey.poolId as uint16 overflowed 16 bits", "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3251}, {"pc": [3051, 3052, 3053], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3252}, {"pc": [3054], "source": "contracts/validatorRegistry.algo.ts:743", "teal": 3253}, {"pc": [3055, 3056], "source": "contracts/validatorRegistry.algo.ts:744", "teal": 3254}, {"pc": [3057, 3058, 3059], "source": "contracts/validatorRegistry.algo.ts:744", "teal": 3255}, {"pc": [3060], "source": "contracts/validatorRegistry.algo.ts:744", "teal": 3256}, {"pc": [3061], "source": "contracts/validatorRegistry.algo.ts:744", "teal": 3257}, {"pc": [3062], "source": "contracts/validatorRegistry.algo.ts:744", "teal": 3258}, {"pc": [3063, 3064], "source": "contracts/validatorRegistry.algo.ts:745", "teal": 3259}, {"pc": [3065], "source": "contracts/validatorRegistry.algo.ts:745", "teal": 3260}, {"pc": [3066, 3067], "source": "contracts/validatorRegistry.algo.ts:746", "teal": 3261}, {"pc": [3068], "source": "contracts/validatorRegistry.algo.ts:746", "teal": 3262}, {"pc": [3069], "source": "contracts/validatorRegistry.algo.ts:746", "teal": 3263}, {"pc": [3070, 3071], "source": "contracts/validatorRegistry.algo.ts:748", "teal": 3264}, {"pc": [3072], "source": "contracts/validatorRegistry.algo.ts:748", "teal": 3265}, {"pc": [3073], "source": "contracts/validatorRegistry.algo.ts:748", "teal": 3266}, {"pc": [3074, 3075], "source": "contracts/validatorRegistry.algo.ts:747", "teal": 3267}, {"pc": [3076], "source": "contracts/validatorRegistry.algo.ts:747", "teal": 3268}, {"pc": [3077], "source": "contracts/validatorRegistry.algo.ts:747", "teal": 3269}, {"pc": [3078], "source": "contracts/validatorRegistry.algo.ts:741", "teal": 3270}, {"pc": [3079], "source": "contracts/validatorRegistry.algo.ts:741", "teal": 3271}, {"pc": [3080, 3081, 3082], "source": "contracts/validatorRegistry.algo.ts:721", "teal": 3272}, {"pc": [3083, 3084], "source": "contracts/validatorRegistry.algo.ts:751", "teal": 3286}, {"pc": [3085, 3086], "source": "contracts/validatorRegistry.algo.ts:752", "teal": 3287}, {"pc": [3087, 3088, 3089], "source": "contracts/validatorRegistry.algo.ts:752", "teal": 3288}, {"pc": [3090], "source": "contracts/validatorRegistry.algo.ts:752", "teal": 3289}, {"pc": [3091], "source": "contracts/validatorRegistry.algo.ts:752", "teal": 3290}, {"pc": [3092, 3093], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3291}, {"pc": [3094, 3095, 3096], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3292}, {"pc": [3097], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3293}, {"pc": [3098], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3294}, {"pc": [3099], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3295}, {"pc": [3100], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3296}, {"pc": [3101, 3102], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3297}, {"pc": [3103], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3298}, {"pc": [3104], "errorMessage": "poolKey.poolId as uint16 overflowed 16 bits", "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3301}, {"pc": [3105, 3106, 3107], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3302}, {"pc": [3108], "source": "contracts/validatorRegistry.algo.ts:753", "teal": 3303}, {"pc": [3109, 3110], "source": "contracts/validatorRegistry.algo.ts:754", "teal": 3304}, {"pc": [3111, 3112, 3113], "source": "contracts/validatorRegistry.algo.ts:754", "teal": 3305}, {"pc": [3114], "source": "contracts/validatorRegistry.algo.ts:754", "teal": 3306}, {"pc": [3115], "source": "contracts/validatorRegistry.algo.ts:754", "teal": 3307}, {"pc": [3116], "source": "contracts/validatorRegistry.algo.ts:754", "teal": 3308}, {"pc": [3117, 3118], "source": "contracts/validatorRegistry.algo.ts:755", "teal": 3309}, {"pc": [3119], "source": "contracts/validatorRegistry.algo.ts:755", "teal": 3310}, {"pc": [3120, 3121], "source": "contracts/validatorRegistry.algo.ts:756", "teal": 3311}, {"pc": [3122], "source": "contracts/validatorRegistry.algo.ts:756", "teal": 3312}, {"pc": [3123], "source": "contracts/validatorRegistry.algo.ts:756", "teal": 3313}, {"pc": [3124, 3125], "source": "contracts/validatorRegistry.algo.ts:759", "teal": 3314}, {"pc": [3126], "source": "contracts/validatorRegistry.algo.ts:759", "teal": 3315}, {"pc": [3127, 3128], "source": "contracts/validatorRegistry.algo.ts:758", "teal": 3316}, {"pc": [3129], "source": "contracts/validatorRegistry.algo.ts:758", "teal": 3317}, {"pc": [3130], "source": "contracts/validatorRegistry.algo.ts:751", "teal": 3318}, {"pc": [3131], "source": "contracts/validatorRegistry.algo.ts:751", "teal": 3319}, {"pc": [3132, 3133], "source": "contracts/validatorRegistry.algo.ts:763", "teal": 3325}, {"pc": [3134, 3135, 3136], "source": "contracts/validatorRegistry.algo.ts:763", "teal": 3326}, {"pc": [3137, 3138], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3331}, {"pc": [3139, 3140], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3332}, {"pc": [3141, 3142, 3143], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3333}, {"pc": [3144], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3334}, {"pc": [3145], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3335}, {"pc": [3146], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3336}, {"pc": [3147, 3148], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3337}, {"pc": [3149], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3338}, {"pc": [3150], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3339}, {"pc": [3151], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3340}, {"pc": [3152], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3341}, {"pc": [3153, 3154], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3342}, {"pc": [3155, 3156], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3343}, {"pc": [3157, 3158, 3159], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3344}, {"pc": [3160], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3345}, {"pc": [3161], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3346}, {"pc": [3162], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3347}, {"pc": [3163, 3164], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3348}, {"pc": [3165], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3349}, {"pc": [3166], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3350}, {"pc": [3167], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3351}, {"pc": [3168], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3352}, {"pc": [3169, 3170], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3353}, {"pc": [3171], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3354}, {"pc": [3172, 3173], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3355}, {"pc": [3174, 3175, 3176], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3356}, {"pc": [3177], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3357}, {"pc": [3178], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3358}, {"pc": [3179], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3359}, {"pc": [3180, 3181], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3360}, {"pc": [3182], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3361}, {"pc": [3183], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3362}, {"pc": [3184], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3363}, {"pc": [3185], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3364}, {"pc": [3186], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3365}, {"pc": [3187, 3188, 3189], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3366}, {"pc": [3190], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3367}, {"pc": [3191, 3192], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3368}, {"pc": [3193, 3194, 3195], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3369}, {"pc": [3196], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3370}, {"pc": [3197], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3371}, {"pc": [3198], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3372}, {"pc": [3199, 3200], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3373}, {"pc": [3201], "source": "contracts/validatorRegistry.algo.ts:765", "teal": 3374}, {"pc": [3202, 3203], "source": "contracts/validatorRegistry.algo.ts:768", "teal": 3382}, {"pc": [3204, 3205, 3206], "source": "contracts/validatorRegistry.algo.ts:768", "teal": 3383}, {"pc": [3207], "source": "contracts/validatorRegistry.algo.ts:768", "teal": 3384}, {"pc": [3208], "source": "contracts/validatorRegistry.algo.ts:768", "teal": 3385}, {"pc": [3209, 3210], "source": "contracts/validatorRegistry.algo.ts:769", "teal": 3386}, {"pc": [3211, 3212, 3213], "source": "contracts/validatorRegistry.algo.ts:769", "teal": 3387}, {"pc": [3214], "source": "contracts/validatorRegistry.algo.ts:769", "teal": 3388}, {"pc": [3215], "source": "contracts/validatorRegistry.algo.ts:769", "teal": 3389}, {"pc": [3216], "source": "contracts/validatorRegistry.algo.ts:769", "teal": 3390}, {"pc": [3217, 3218], "source": "contracts/validatorRegistry.algo.ts:770", "teal": 3391}, {"pc": [3219, 3220, 3221], "source": "contracts/validatorRegistry.algo.ts:770", "teal": 3392}, {"pc": [3222], "source": "contracts/validatorRegistry.algo.ts:770", "teal": 3393}, {"pc": [3223], "source": "contracts/validatorRegistry.algo.ts:770", "teal": 3394}, {"pc": [3224], "source": "contracts/validatorRegistry.algo.ts:770", "teal": 3395}, {"pc": [3225, 3226], "source": "contracts/validatorRegistry.algo.ts:767", "teal": 3396}, {"pc": [3227, 3228, 3229], "source": "contracts/validatorRegistry.algo.ts:767", "teal": 3397}, {"pc": [3230, 3231], "source": "contracts/validatorRegistry.algo.ts:767", "teal": 3398}, {"pc": [3232, 3233], "source": "contracts/validatorRegistry.algo.ts:772", "teal": 3402}, {"pc": [3234, 3235], "source": "contracts/validatorRegistry.algo.ts:772", "teal": 3403}, {"pc": [3236, 3237], "source": "contracts/validatorRegistry.algo.ts:772", "teal": 3404}, {"pc": [3238], "source": "contracts/validatorRegistry.algo.ts:772", "teal": 3405}, {"pc": [3239], "source": "contracts/validatorRegistry.algo.ts:772", "teal": 3406}, {"pc": [3240, 3241], "source": "contracts/validatorRegistry.algo.ts:772", "teal": 3407}, {"pc": [3242, 3243], "source": "contracts/validatorRegistry.algo.ts:773", "teal": 3411}, {"pc": [3244, 3245], "source": "contracts/validatorRegistry.algo.ts:773", "teal": 3412}, {"pc": [3246, 3247], "source": "contracts/validatorRegistry.algo.ts:773", "teal": 3413}, {"pc": [3248], "source": "contracts/validatorRegistry.algo.ts:773", "teal": 3414}, {"pc": [3249], "source": "contracts/validatorRegistry.algo.ts:773", "teal": 3415}, {"pc": [3250, 3251], "source": "contracts/validatorRegistry.algo.ts:773", "teal": 3416}, {"pc": [3252, 3253], "source": "contracts/validatorRegistry.algo.ts:775", "teal": 3421}, {"pc": [3254, 3255, 3256], "source": "contracts/validatorRegistry.algo.ts:775", "teal": 3422}, {"pc": [3257, 3258], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3427}, {"pc": [3259], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3428}, {"pc": [3260], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3429}, {"pc": [3261], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3430}, {"pc": [3262, 3263], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3431}, {"pc": [3264, 3265, 3266], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3432}, {"pc": [3267], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3433}, {"pc": [3268], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3434}, {"pc": [3269], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3435}, {"pc": [3270, 3271], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3436}, {"pc": [3272], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3437}, {"pc": [3273], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3438}, {"pc": [3274], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3439}, {"pc": [3275], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3440}, {"pc": [3276], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3441}, {"pc": [3277], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3442}, {"pc": [3278, 3279], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3443}, {"pc": [3280, 3281, 3282], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3444}, {"pc": [3283], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3445}, {"pc": [3284], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3446}, {"pc": [3285], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3447}, {"pc": [3286, 3287], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3448}, {"pc": [3288], "source": "contracts/validatorRegistry.algo.ts:776", "teal": 3449}, {"pc": [3289, 3290], "source": "contracts/validatorRegistry.algo.ts:779", "teal": 3455}, {"pc": [3291, 3292, 3293], "source": "contracts/validatorRegistry.algo.ts:779", "teal": 3456}, {"pc": [3294, 3295], "source": "contracts/validatorRegistry.algo.ts:780", "teal": 3461}, {"pc": [3296], "source": "contracts/validatorRegistry.algo.ts:780", "teal": 3462}, {"pc": [3297], "source": "contracts/validatorRegistry.algo.ts:780", "teal": 3463}, {"pc": [3298], "source": "contracts/validatorRegistry.algo.ts:780", "teal": 3464}, {"pc": [3299, 3300], "source": "contracts/validatorRegistry.algo.ts:780", "teal": 3465}, {"pc": [3301], "source": "contracts/validatorRegistry.algo.ts:780", "teal": 3466}, {"pc": [3302], "source": "contracts/validatorRegistry.algo.ts:780", "teal": 3467}, {"pc": [3303], "source": "contracts/validatorRegistry.algo.ts:700", "teal": 3472}, {"pc": [3304], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3477}, {"pc": [3305, 3306, 3307], "source": "contracts/validatorRegistry.algo.ts:800", "teal": 3480}, {"pc": [3308], "source": "contracts/validatorRegistry.algo.ts:800", "teal": 3481}, {"pc": [3309, 3310, 3311], "source": "contracts/validatorRegistry.algo.ts:799", "teal": 3484}, {"pc": [3312], "source": "contracts/validatorRegistry.algo.ts:799", "teal": 3485}, {"pc": [3313], "source": "contracts/validatorRegistry.algo.ts:799", "teal": 3486}, {"pc": [3314, 3315], "source": "contracts/validatorRegistry.algo.ts:799", "teal": 3487}, {"pc": [3316], "source": "contracts/validatorRegistry.algo.ts:799", "teal": 3488}, {"pc": [3317], "errorMessage": "argument 1 (staker) for findPoolForStaker must be a address", "source": "contracts/validatorRegistry.algo.ts:799", "teal": 3491}, {"pc": [3318, 3319, 3320], "source": "contracts/validatorRegistry.algo.ts:798", "teal": 3494}, {"pc": [3321], "source": "contracts/validatorRegistry.algo.ts:798", "teal": 3495}, {"pc": [3322, 3323, 3324], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3498}, {"pc": [3325], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3499}, {"pc": [3326], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3500}, {"pc": [3327], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3501}, {"pc": [3328], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3502}, {"pc": [3329, 3330, 3331], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3516}, {"pc": [3332], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3519}, {"pc": [3333, 3334], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3520}, {"pc": [3335], "source": "contracts/validatorRegistry.algo.ts:802", "teal": 3524}, {"pc": [3336, 3337], "source": "contracts/validatorRegistry.algo.ts:802", "teal": 3525}, {"pc": [3338], "source": "contracts/validatorRegistry.algo.ts:803", "teal": 3529}, {"pc": [3339, 3340], "source": "contracts/validatorRegistry.algo.ts:803", "teal": 3530}, {"pc": [3341, 3342], "source": "contracts/validatorRegistry.algo.ts:811", "teal": 3534}, {"pc": [3343, 3344, 3345], "source": "contracts/validatorRegistry.algo.ts:811", "teal": 3535}, {"pc": [3346, 3347], "source": "contracts/validatorRegistry.algo.ts:811", "teal": 3536}, {"pc": [3348], "source": "contracts/validatorRegistry.algo.ts:814", "teal": 3541}, {"pc": [3349, 3350], "source": "contracts/validatorRegistry.algo.ts:814", "teal": 3542}, {"pc": [3351], "source": "contracts/validatorRegistry.algo.ts:814", "teal": 3543}, {"pc": [3352], "source": "contracts/validatorRegistry.algo.ts:814", "teal": 3544}, {"pc": [3353], "source": "contracts/validatorRegistry.algo.ts:814", "teal": 3545}, {"pc": [3354], "source": "contracts/validatorRegistry.algo.ts:814", "teal": 3546}, {"pc": [3355, 3356, 3357], "source": "contracts/validatorRegistry.algo.ts:814", "teal": 3547}, {"pc": [3358], "source": "contracts/validatorRegistry.algo.ts:815", "teal": 3552}, {"pc": [3359, 3360], "source": "contracts/validatorRegistry.algo.ts:815", "teal": 3553}, {"pc": [3361], "source": "contracts/validatorRegistry.algo.ts:815", "teal": 3554}, {"pc": [3362], "source": "contracts/validatorRegistry.algo.ts:815", "teal": 3555}, {"pc": [3363], "errorMessage": "box value does not exist: this.stakerPoolSet(staker).value", "source": "contracts/validatorRegistry.algo.ts:815", "teal": 3558}, {"pc": [3364, 3365], "source": "contracts/validatorRegistry.algo.ts:815", "teal": 3559}, {"pc": [3366, 3367], "source": "contracts/validatorRegistry.algo.ts:816", "teal": 3563}, {"pc": [3368], "source": "contracts/validatorRegistry.algo.ts:816", "teal": 3564}, {"pc": [3369], "source": "contracts/validatorRegistry.algo.ts:816", "teal": 3565}, {"pc": [3370], "source": "contracts/validatorRegistry.algo.ts:816", "teal": 3566}, {"pc": [3371], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3570}, {"pc": [3372, 3373], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3571}, {"pc": [3374, 3375], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3576}, {"pc": [3376, 3377], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3577}, {"pc": [3378], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3578}, {"pc": [3379, 3380, 3381], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3579}, {"pc": [3382, 3383], "source": "contracts/validatorRegistry.algo.ts:818", "teal": 3584}, {"pc": [3384, 3385], "source": "contracts/validatorRegistry.algo.ts:818", "teal": 3585}, {"pc": [3386], "source": "contracts/validatorRegistry.algo.ts:818", "teal": 3586}, {"pc": [3387, 3388, 3389], "source": "contracts/validatorRegistry.algo.ts:818", "teal": 3587}, {"pc": [3390], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3592}, {"pc": [3391, 3392], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3593}, {"pc": [3393, 3394], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3594}, {"pc": [3395], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3595}, {"pc": [3396, 3397], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3596}, {"pc": [3398, 3399], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3597}, {"pc": [3400], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3598}, {"pc": [3401, 3402], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3599}, {"pc": [3403, 3404], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3600}, {"pc": [3405, 3406], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3601}, {"pc": [3407, 3408], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3602}, {"pc": [3409], "source": "contracts/validatorRegistry.algo.ts:819", "teal": 3603}, {"pc": [3410, 3411], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3609}, {"pc": [3412, 3413], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3610}, {"pc": [3414], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3611}, {"pc": [3415], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3612}, {"pc": [3416], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3613}, {"pc": [3417], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3614}, {"pc": [3418], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3615}, {"pc": [3419], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3616}, {"pc": [3420], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3617}, {"pc": [3421], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3618}, {"pc": [3422], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3619}, {"pc": [3423, 3424, 3425], "source": "contracts/validatorRegistry.algo.ts:821", "teal": 3620}, {"pc": [3426, 3427, 3428], "source": "contracts/validatorRegistry.algo.ts:822", "teal": 3623}, {"pc": [3429], "source": "contracts/validatorRegistry.algo.ts:824", "teal": 3628}, {"pc": [3430, 3431], "source": "contracts/validatorRegistry.algo.ts:824", "teal": 3629}, {"pc": [3432, 3433], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3634}, {"pc": [3434, 3435], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3635}, {"pc": [3436], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3636}, {"pc": [3437], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3637}, {"pc": [3438], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3638}, {"pc": [3439], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3639}, {"pc": [3440], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3640}, {"pc": [3441], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3641}, {"pc": [3442], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3642}, {"pc": [3443, 3444], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3643}, {"pc": [3445], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3644}, {"pc": [3446, 3447, 3448], "source": "contracts/validatorRegistry.algo.ts:825", "teal": 3645}, {"pc": [3449], "source": "contracts/validatorRegistry.algo.ts:827", "teal": 3650}, {"pc": [3450, 3451], "source": "contracts/validatorRegistry.algo.ts:827", "teal": 3651}, {"pc": [3452, 3453], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3658}, {"pc": [3454, 3455], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3659}, {"pc": [3456, 3457], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3660}, {"pc": [3458], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3661}, {"pc": [3459], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3662}, {"pc": [3460], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3663}, {"pc": [3461], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3664}, {"pc": [3462], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3665}, {"pc": [3463], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3666}, {"pc": [3464], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3667}, {"pc": [3465], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3668}, {"pc": [3466], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3669}, {"pc": [3467, 3468], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3670}, {"pc": [3469], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3671}, {"pc": [3470], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3672}, {"pc": [3471, 3472], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3673}, {"pc": [3473], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3674}, {"pc": [3474], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3675}, {"pc": [3475], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3676}, {"pc": [3476, 3477], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3677}, {"pc": [3478], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3678}, {"pc": [3479], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3679}, {"pc": [3480, 3481], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3680}, {"pc": [3482], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3681}, {"pc": [3483], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3682}, {"pc": [3484, 3485], "source": "contracts/validatorRegistry.algo.ts:830", "teal": 3683}, {"pc": [3486], "source": "contracts/validatorRegistry.algo.ts:829", "teal": 3684}, {"pc": [3487, 3488], "source": "contracts/validatorRegistry.algo.ts:831", "teal": 3685}, {"pc": [3489], "source": "contracts/validatorRegistry.algo.ts:830", "teal": 3686}, {"pc": [3490, 3491, 3492], "source": "contracts/validatorRegistry.algo.ts:828", "teal": 3687}, {"pc": [3493, 3494], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3692}, {"pc": [3495, 3496], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3693}, {"pc": [3497], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3694}, {"pc": [3498], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3695}, {"pc": [3499], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3696}, {"pc": [3500], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3697}, {"pc": [3501, 3502], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3698}, {"pc": [3503], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3699}, {"pc": [3504, 3505], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3700}, {"pc": [3506], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3701}, {"pc": [3507], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3702}, {"pc": [3508, 3509], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3703}, {"pc": [3510], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3704}, {"pc": [3511], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3705}, {"pc": [3512, 3513, 3514], "source": "contracts/validatorRegistry.algo.ts:833", "teal": 3706}, {"pc": [3515, 3516], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3715}, {"pc": [3517], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3716}, {"pc": [3518], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3717}, {"pc": [3519, 3520], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3718}, {"pc": [3521, 3522, 3523], "source": "contracts/validatorRegistry.algo.ts:817", "teal": 3719}, {"pc": [3524, 3525], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3729}, {"pc": [3526, 3527], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3730}, {"pc": [3528], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3731}, {"pc": [3529], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3732}, {"pc": [3530, 3531], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3733}, {"pc": [3532], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3734}, {"pc": [3533], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3735}, {"pc": [3534, 3535], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3736}, {"pc": [3536], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3737}, {"pc": [3537], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3738}, {"pc": [3538], "source": "contracts/validatorRegistry.algo.ts:841", "teal": 3739}, {"pc": [3539], "errorMessage": "must stake at least the minimum for this pool", "source": "contracts/validatorRegistry.algo.ts:840", "teal": 3742}, {"pc": [3540, 3541], "source": "contracts/validatorRegistry.algo.ts:846", "teal": 3746}, {"pc": [3542, 3543], "source": "contracts/validatorRegistry.algo.ts:846", "teal": 3747}, {"pc": [3544], "source": "contracts/validatorRegistry.algo.ts:846", "teal": 3748}, {"pc": [3545, 3546], "source": "contracts/validatorRegistry.algo.ts:846", "teal": 3749}, {"pc": [3547], "source": "contracts/validatorRegistry.algo.ts:846", "teal": 3750}, {"pc": [3548], "source": "contracts/validatorRegistry.algo.ts:846", "teal": 3751}, {"pc": [3549, 3550], "source": "contracts/validatorRegistry.algo.ts:846", "teal": 3752}, {"pc": [3551], "source": "contracts/validatorRegistry.algo.ts:846", "teal": 3753}, {"pc": [3552, 3553], "source": "contracts/validatorRegistry.algo.ts:846", "teal": 3754}, {"pc": [3554, 3555], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3758}, {"pc": [3556, 3557], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3759}, {"pc": [3558], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3760}, {"pc": [3559, 3560], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3761}, {"pc": [3561], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3762}, {"pc": [3562], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3763}, {"pc": [3563, 3564], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3764}, {"pc": [3565], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3765}, {"pc": [3566], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3766}, {"pc": [3567, 3568], "source": "contracts/validatorRegistry.algo.ts:847", "teal": 3767}, {"pc": [3569], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3771}, {"pc": [3570, 3571], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3772}, {"pc": [3572, 3573], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3777}, {"pc": [3574, 3575], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3778}, {"pc": [3576], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3779}, {"pc": [3577, 3578, 3579], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3780}, {"pc": [3580, 3581], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3785}, {"pc": [3582, 3583], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3786}, {"pc": [3584, 3585], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3787}, {"pc": [3586], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3788}, {"pc": [3587, 3588], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3789}, {"pc": [3589], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3790}, {"pc": [3590], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3791}, {"pc": [3591], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3792}, {"pc": [3592], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3793}, {"pc": [3593, 3594], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3794}, {"pc": [3595], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3795}, {"pc": [3596, 3597], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3796}, {"pc": [3598], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3797}, {"pc": [3599, 3600, 3601], "source": "contracts/validatorRegistry.algo.ts:849", "teal": 3798}, {"pc": [3602, 3603], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3807}, {"pc": [3604], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3808}, {"pc": [3605, 3606], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3809}, {"pc": [3607], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3810}, {"pc": [3608], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3811}, {"pc": [3609], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3812}, {"pc": [3610], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3813}, {"pc": [3611, 3612], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3814}, {"pc": [3613, 3614], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3815}, {"pc": [3615, 3616], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3816}, {"pc": [3617], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3817}, {"pc": [3618], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3818}, {"pc": [3619], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3819}, {"pc": [3620], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3820}, {"pc": [3621], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3821}, {"pc": [3622], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3822}, {"pc": [3623], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3823}, {"pc": [3624], "source": "contracts/validatorRegistry.algo.ts:851", "teal": 3824}, {"pc": [3625, 3626], "source": "contracts/validatorRegistry.algo.ts:852", "teal": 3825}, {"pc": [3627], "source": "contracts/validatorRegistry.algo.ts:852", "teal": 3826}, {"pc": [3628, 3629], "source": "contracts/validatorRegistry.algo.ts:852", "teal": 3827}, {"pc": [3630], "source": "contracts/validatorRegistry.algo.ts:852", "teal": 3828}, {"pc": [3631], "source": "contracts/validatorRegistry.algo.ts:853", "teal": 3829}, {"pc": [3632, 3633], "source": "contracts/validatorRegistry.algo.ts:853", "teal": 3830}, {"pc": [3634], "source": "contracts/validatorRegistry.algo.ts:853", "teal": 3831}, {"pc": [3635], "source": "contracts/validatorRegistry.algo.ts:850", "teal": 3832}, {"pc": [3636, 3637, 3638], "source": "contracts/validatorRegistry.algo.ts:850", "teal": 3833}, {"pc": [3639, 3640], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3840}, {"pc": [3641], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3841}, {"pc": [3642], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3842}, {"pc": [3643, 3644], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3843}, {"pc": [3645, 3646, 3647], "source": "contracts/validatorRegistry.algo.ts:848", "teal": 3844}, {"pc": [3648, 3649], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3849}, {"pc": [3650], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3850}, {"pc": [3651, 3652], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3851}, {"pc": [3653], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3852}, {"pc": [3654, 3655], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3853}, {"pc": [3656], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3854}, {"pc": [3657, 3658], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3855}, {"pc": [3659], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3856}, {"pc": [3660, 3661], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3857}, {"pc": [3662], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3858}, {"pc": [3663], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3859}, {"pc": [3664, 3665], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3860}, {"pc": [3666], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3861}, {"pc": [3667], "source": "contracts/validatorRegistry.algo.ts:858", "teal": 3862}, {"pc": [3668, 3669], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3866}, {"pc": [3670, 3671], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3869}, {"pc": [3672], "source": "contracts/validatorRegistry.algo.ts:796", "teal": 3870}, {"pc": [3673, 3674, 3675], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3875}, {"pc": [3676], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3876}, {"pc": [3677, 3678, 3679], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3879}, {"pc": [3680], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3880}, {"pc": [3681, 3682, 3683], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3883}, {"pc": [3684], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3884}, {"pc": [3685, 3686, 3687], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3887}, {"pc": [3688], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3888}, {"pc": [3689], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3889}, {"pc": [3690, 3691, 3692], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3903}, {"pc": [3693], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3906}, {"pc": [3694, 3695], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 3907}, {"pc": [3696, 3697], "source": "contracts/validatorRegistry.algo.ts:873", "teal": 3911}, {"pc": [3698, 3699, 3700], "source": "contracts/validatorRegistry.algo.ts:873", "teal": 3912}, {"pc": [3701, 3702], "source": "contracts/validatorRegistry.algo.ts:875", "teal": 3916}, {"pc": [3703, 3704], "source": "contracts/validatorRegistry.algo.ts:875", "teal": 3917}, {"pc": [3705], "source": "contracts/validatorRegistry.algo.ts:875", "teal": 3918}, {"pc": [3706, 3707], "source": "contracts/validatorRegistry.algo.ts:875", "teal": 3919}, {"pc": [3708], "source": "contracts/validatorRegistry.algo.ts:875", "teal": 3920}, {"pc": [3709], "source": "contracts/validatorRegistry.algo.ts:875", "teal": 3921}, {"pc": [3710, 3711], "source": "contracts/validatorRegistry.algo.ts:875", "teal": 3922}, {"pc": [3712], "source": "contracts/validatorRegistry.algo.ts:875", "teal": 3923}, {"pc": [3713, 3714], "source": "contracts/validatorRegistry.algo.ts:875", "teal": 3924}, {"pc": [3715, 3716], "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3928}, {"pc": [3717], "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3929}, {"pc": [3718], "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3930}, {"pc": [3719], "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3931}, {"pc": [3720, 3721, 3722], "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3932}, {"pc": [3723, 3724], "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3933}, {"pc": [3725], "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3934}, {"pc": [3726], "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3935}, {"pc": [3727], "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3936}, {"pc": [3728], "errorMessage": "node number out of allowable range", "source": "contracts/validatorRegistry.algo.ts:876", "teal": 3940}, {"pc": [3729], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 3944}, {"pc": [3730, 3731], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 3945}, {"pc": [3732, 3733], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 3950}, {"pc": [3734], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 3951}, {"pc": [3735], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 3952}, {"pc": [3736, 3737, 3738], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 3953}, {"pc": [3739], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 3957}, {"pc": [3740, 3741], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 3958}, {"pc": [3742, 3743], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 3963}, {"pc": [3744, 3745], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 3964}, {"pc": [3746], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 3965}, {"pc": [3747, 3748, 3749], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 3966}, {"pc": [3750, 3751], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3971}, {"pc": [3752], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3972}, {"pc": [3753, 3754], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3973}, {"pc": [3755], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3974}, {"pc": [3756], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3975}, {"pc": [3757], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3976}, {"pc": [3758], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3977}, {"pc": [3759], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3978}, {"pc": [3760, 3761], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3979}, {"pc": [3762], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3980}, {"pc": [3763], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3981}, {"pc": [3764], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3982}, {"pc": [3765], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3983}, {"pc": [3766], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3984}, {"pc": [3767], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3985}, {"pc": [3768, 3769], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3986}, {"pc": [3770], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3987}, {"pc": [3771, 3772, 3773], "source": "contracts/validatorRegistry.algo.ts:880", "teal": 3988}, {"pc": [3774, 3775], "source": "contracts/validatorRegistry.algo.ts:881", "teal": 3993}, {"pc": [3776], "source": "contracts/validatorRegistry.algo.ts:881", "teal": 3994}, {"pc": [3777], "source": "contracts/validatorRegistry.algo.ts:881", "teal": 3995}, {"pc": [3778, 3779], "source": "contracts/validatorRegistry.algo.ts:881", "teal": 3996}, {"pc": [3780], "source": "contracts/validatorRegistry.algo.ts:881", "teal": 3997}, {"pc": [3781], "errorMessage": "can't move to same node", "source": "contracts/validatorRegistry.algo.ts:881", "teal": 4000}, {"pc": [3782, 3783], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4004}, {"pc": [3784, 3785], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4005}, {"pc": [3786], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4006}, {"pc": [3787], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4007}, {"pc": [3788], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4008}, {"pc": [3789], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4009}, {"pc": [3790], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4010}, {"pc": [3791, 3792], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4011}, {"pc": [3793], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4012}, {"pc": [3794], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4013}, {"pc": [3795], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4014}, {"pc": [3796, 3797], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4015}, {"pc": [3798], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4016}, {"pc": [3799, 3800], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4017}, {"pc": [3801], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4018}, {"pc": [3802], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4019}, {"pc": [3803, 3804], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4020}, {"pc": [3805], "source": "contracts/validatorRegistry.algo.ts:883", "teal": 4021}, {"pc": [3806], "source": "contracts/validatorRegistry.algo.ts:886", "teal": 4027}, {"pc": [3807, 3808], "source": "contracts/validatorRegistry.algo.ts:886", "teal": 4028}, {"pc": [3809, 3810], "source": "contracts/validatorRegistry.algo.ts:886", "teal": 4029}, {"pc": [3811, 3812, 3813, 3814, 3815, 3816], "source": "contracts/validatorRegistry.algo.ts:886", "teal": 4030}, {"pc": [3817, 3818], "source": "contracts/validatorRegistry.algo.ts:886", "teal": 4031}, {"pc": [3819, 3820], "source": "contracts/validatorRegistry.algo.ts:887", "teal": 4035}, {"pc": [3821, 3822], "source": "contracts/validatorRegistry.algo.ts:887", "teal": 4036}, {"pc": [3823], "source": "contracts/validatorRegistry.algo.ts:886", "teal": 4039}, {"pc": [3824, 3825], "source": "contracts/validatorRegistry.algo.ts:886", "teal": 4040}, {"pc": [3826], "source": "contracts/validatorRegistry.algo.ts:886", "teal": 4043}, {"pc": [3827, 3828], "source": "contracts/validatorRegistry.algo.ts:891", "teal": 4047}, {"pc": [3829, 3830], "source": "contracts/validatorRegistry.algo.ts:891", "teal": 4048}, {"pc": [3831, 3832], "source": "contracts/validatorRegistry.algo.ts:891", "teal": 4049}, {"pc": [3833, 3834, 3835], "source": "contracts/validatorRegistry.algo.ts:891", "teal": 4050}, {"pc": [3836], "source": "contracts/validatorRegistry.algo.ts:892", "teal": 4054}, {"pc": [3837, 3838], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 4061}, {"pc": [3839], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 4062}, {"pc": [3840], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 4063}, {"pc": [3841, 3842], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 4064}, {"pc": [3843, 3844, 3845], "source": "contracts/validatorRegistry.algo.ts:879", "teal": 4065}, {"pc": [3846, 3847], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 4072}, {"pc": [3848], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 4073}, {"pc": [3849], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 4074}, {"pc": [3850, 3851], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 4075}, {"pc": [3852, 3853, 3854], "source": "contracts/validatorRegistry.algo.ts:878", "teal": 4076}, {"pc": [3855], "errorMessage": "couldn't find pool app id in nodes to move", "source": "contracts/validatorRegistry.algo.ts:896", "teal": 4080}, {"pc": [3856], "source": "contracts/validatorRegistry.algo.ts:872", "teal": 4081}, {"pc": [3857], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4086}, {"pc": [3858, 3859, 3860], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4089}, {"pc": [3861], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4090}, {"pc": [3862], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4091}, {"pc": [3863, 3864], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4092}, {"pc": [3865], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4093}, {"pc": [3866], "errorMessage": "argument 0 (receiver) for emptyTokenRewards must be a address", "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4096}, {"pc": [3867, 3868, 3869], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4099}, {"pc": [3870], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4100}, {"pc": [3871, 3872, 3873], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4103}, {"pc": [3874], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4104}, {"pc": [3875], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4105}, {"pc": [3876], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4106}, {"pc": [3877], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4107}, {"pc": [3878], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4108}, {"pc": [3879, 3880, 3881], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4122}, {"pc": [3882], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4125}, {"pc": [3883, 3884], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4126}, {"pc": [3885, 3886], "source": "contracts/validatorRegistry.algo.ts:911", "teal": 4130}, {"pc": [3887, 3888, 3889], "source": "contracts/validatorRegistry.algo.ts:911", "teal": 4131}, {"pc": [3890, 3891], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4135}, {"pc": [3892], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4136}, {"pc": [3893], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4137}, {"pc": [3894, 3895], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4138}, {"pc": [3896], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4139}, {"pc": [3897], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4140}, {"pc": [3898, 3899], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4141}, {"pc": [3900], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4142}, {"pc": [3901], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4143}, {"pc": [3902, 3903], "source": "contracts/validatorRegistry.algo.ts:912", "teal": 4144}, {"pc": [3904, 3905], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4148}, {"pc": [3906], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4149}, {"pc": [3907], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4150}, {"pc": [3908, 3909], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4151}, {"pc": [3910], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4152}, {"pc": [3911], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4153}, {"pc": [3912, 3913], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4154}, {"pc": [3914], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4155}, {"pc": [3915], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4156}, {"pc": [3916, 3917], "source": "contracts/validatorRegistry.algo.ts:913", "teal": 4157}, {"pc": [3918, 3919], "source": "contracts/validatorRegistry.algo.ts:914", "teal": 4161}, {"pc": [3920], "source": "contracts/validatorRegistry.algo.ts:914", "teal": 4162}, {"pc": [3921], "source": "contracts/validatorRegistry.algo.ts:914", "teal": 4163}, {"pc": [3922], "errorMessage": "this validator doesn't have a reward token defined", "source": "contracts/validatorRegistry.algo.ts:914", "teal": 4166}, {"pc": [3923, 3924], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4170}, {"pc": [3925], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4171}, {"pc": [3926], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4172}, {"pc": [3927, 3928], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4173}, {"pc": [3929], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4174}, {"pc": [3930], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4175}, {"pc": [3931, 3932], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4176}, {"pc": [3933], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4177}, {"pc": [3934], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4178}, {"pc": [3935, 3936], "source": "contracts/validatorRegistry.algo.ts:915", "teal": 4179}, {"pc": [3937, 3938], "source": "contracts/validatorRegistry.algo.ts:918", "teal": 4184}, {"pc": [3939, 3940], "source": "contracts/validatorRegistry.algo.ts:918", "teal": 4185}, {"pc": [3941], "source": "contracts/validatorRegistry.algo.ts:918", "teal": 4186}, {"pc": [3942, 3943], "source": "contracts/validatorRegistry.algo.ts:918", "teal": 4187}, {"pc": [3944, 3945], "source": "contracts/validatorRegistry.algo.ts:918", "teal": 4188}, {"pc": [3946], "source": "contracts/validatorRegistry.algo.ts:918", "teal": 4189}, {"pc": [3947, 3948], "source": "contracts/validatorRegistry.algo.ts:918", "teal": 4190}, {"pc": [3949], "source": "contracts/validatorRegistry.algo.ts:918", "teal": 4191}, {"pc": [3950, 3951], "source": "contracts/validatorRegistry.algo.ts:917", "teal": 4192}, {"pc": [3952], "source": "contracts/validatorRegistry.algo.ts:921", "teal": 4199}, {"pc": [3953, 3954], "source": "contracts/validatorRegistry.algo.ts:921", "teal": 4200}, {"pc": [3955, 3956], "source": "contracts/validatorRegistry.algo.ts:921", "teal": 4201}, {"pc": [3957, 3958], "source": "contracts/validatorRegistry.algo.ts:921", "teal": 4202}, {"pc": [3959, 3960], "source": "contracts/validatorRegistry.algo.ts:921", "teal": 4203}, {"pc": [3961, 3962], "source": "contracts/validatorRegistry.algo.ts:922", "teal": 4207}, {"pc": [3963, 3964], "source": "contracts/validatorRegistry.algo.ts:922", "teal": 4208}, {"pc": [3965, 3966], "source": "contracts/validatorRegistry.algo.ts:923", "teal": 4212}, {"pc": [3967, 3968], "source": "contracts/validatorRegistry.algo.ts:923", "teal": 4213}, {"pc": [3969, 3970], "source": "contracts/validatorRegistry.algo.ts:923", "teal": 4214}, {"pc": [3971], "source": "contracts/validatorRegistry.algo.ts:923", "teal": 4215}, {"pc": [3972, 3973], "source": "contracts/validatorRegistry.algo.ts:923", "teal": 4216}, {"pc": [3974, 3975], "source": "contracts/validatorRegistry.algo.ts:923", "teal": 4217}, {"pc": [3976], "source": "contracts/validatorRegistry.algo.ts:923", "teal": 4218}, {"pc": [3977, 3978], "source": "contracts/validatorRegistry.algo.ts:923", "teal": 4219}, {"pc": [3979], "source": "contracts/validatorRegistry.algo.ts:921", "teal": 4222}, {"pc": [3980, 3981], "source": "contracts/validatorRegistry.algo.ts:921", "teal": 4223}, {"pc": [3982], "source": "contracts/validatorRegistry.algo.ts:921", "teal": 4226}, {"pc": [3983, 3984], "source": "contracts/validatorRegistry.algo.ts:926", "teal": 4233}, {"pc": [3985, 3986], "source": "contracts/validatorRegistry.algo.ts:926", "teal": 4234}, {"pc": [3987], "source": "contracts/validatorRegistry.algo.ts:926", "teal": 4235}, {"pc": [3988, 3989], "source": "contracts/validatorRegistry.algo.ts:926", "teal": 4236}, {"pc": [3990, 3991], "source": "contracts/validatorRegistry.algo.ts:926", "teal": 4237}, {"pc": [3992], "source": "contracts/validatorRegistry.algo.ts:926", "teal": 4238}, {"pc": [3993, 3994], "source": "contracts/validatorRegistry.algo.ts:926", "teal": 4239}, {"pc": [3995], "source": "contracts/validatorRegistry.algo.ts:926", "teal": 4240}, {"pc": [3996], "errorMessage": "balance of remaining reward tokens should match the held back amount", "source": "contracts/validatorRegistry.algo.ts:925", "teal": 4243}, {"pc": [3997, 3998], "source": "contracts/validatorRegistry.algo.ts:929", "teal": 4247}, {"pc": [3999, 4000], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4250}, {"pc": [4001, 4002], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4253}, {"pc": [4003], "source": "contracts/validatorRegistry.algo.ts:910", "teal": 4254}, {"pc": [4004, 4005, 4006], "source": "contracts/validatorRegistry.algo.ts:1021", "teal": 4258}, {"pc": [4007, 4008], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4265}, {"pc": [4009], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4266}, {"pc": [4010, 4011], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4267}, {"pc": [4012], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4268}, {"pc": [4013, 4014], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4269}, {"pc": [4015], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4270}, {"pc": [4016], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4271}, {"pc": [4017, 4018], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4272}, {"pc": [4019], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4273}, {"pc": [4020], "source": "contracts/validatorRegistry.algo.ts:1023", "teal": 4274}, {"pc": [4021], "errorMessage": "can only be called by validator owner", "source": "contracts/validatorRegistry.algo.ts:1022", "teal": 4277}, {"pc": [4022], "source": "contracts/validatorRegistry.algo.ts:1021", "teal": 4278}, {"pc": [4023, 4024, 4025], "source": "contracts/validatorRegistry.algo.ts:1028", "teal": 4282}, {"pc": [4026, 4027], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4290}, {"pc": [4028], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4291}, {"pc": [4029, 4030], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4292}, {"pc": [4031], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4293}, {"pc": [4032, 4033], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4294}, {"pc": [4034], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4295}, {"pc": [4035], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4296}, {"pc": [4036, 4037], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4297}, {"pc": [4038], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4298}, {"pc": [4039], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4299}, {"pc": [4040], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4300}, {"pc": [4041, 4042, 4043], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4301}, {"pc": [4044, 4045], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4302}, {"pc": [4046, 4047], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4303}, {"pc": [4048, 4049], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4304}, {"pc": [4050], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4305}, {"pc": [4051, 4052], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4306}, {"pc": [4053], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4307}, {"pc": [4054], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4308}, {"pc": [4055, 4056], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4309}, {"pc": [4057], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4310}, {"pc": [4058], "source": "contracts/validatorRegistry.algo.ts:1031", "teal": 4311}, {"pc": [4059], "source": "contracts/validatorRegistry.algo.ts:1030", "teal": 4312}, {"pc": [4060], "errorMessage": "can only be called by owner or manager of validator", "source": "contracts/validatorRegistry.algo.ts:1029", "teal": 4316}, {"pc": [4061], "source": "contracts/validatorRegistry.algo.ts:1028", "teal": 4317}, {"pc": [4062, 4063, 4064], "source": "contracts/validatorRegistry.algo.ts:1041", "teal": 4325}, {"pc": [4065], "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4329}, {"pc": [4066, 4067], "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4330}, {"pc": [4068, 4069, 4070], "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4331}, {"pc": [4071], "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4332}, {"pc": [4072], "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4333}, {"pc": [4073], "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4334}, {"pc": [4074], "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4335}, {"pc": [4075], "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4336}, {"pc": [4076], "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4337}, {"pc": [4077], "errorMessage": "the specified validator id isn't valid", "source": "contracts/validatorRegistry.algo.ts:1042", "teal": 4340}, {"pc": [4078, 4079], "source": "contracts/validatorRegistry.algo.ts:1043", "teal": 4344}, {"pc": [4080, 4081, 4082], "source": "contracts/validatorRegistry.algo.ts:1043", "teal": 4345}, {"pc": [4083], "source": "contracts/validatorRegistry.algo.ts:1043", "teal": 4346}, {"pc": [4084], "source": "contracts/constants.algo.ts:30", "teal": 4347}, {"pc": [4085], "source": "contracts/validatorRegistry.algo.ts:1043", "teal": 4348}, {"pc": [4086], "errorMessage": "pool id not in valid range", "source": "contracts/validatorRegistry.algo.ts:1043", "teal": 4351}, {"pc": [4087, 4088], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4358}, {"pc": [4089, 4090, 4091], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4359}, {"pc": [4092], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4360}, {"pc": [4093], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4361}, {"pc": [4094], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4362}, {"pc": [4095], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4363}, {"pc": [4096, 4097, 4098], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4364}, {"pc": [4099, 4100], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4365}, {"pc": [4101, 4102, 4103], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4366}, {"pc": [4104], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4367}, {"pc": [4105, 4106], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4368}, {"pc": [4107, 4108], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4369}, {"pc": [4109], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4370}, {"pc": [4110, 4111], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4371}, {"pc": [4112, 4113, 4114], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4372}, {"pc": [4115], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4373}, {"pc": [4116], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4374}, {"pc": [4117], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4375}, {"pc": [4118, 4119], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4376}, {"pc": [4120], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4377}, {"pc": [4121], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4378}, {"pc": [4122], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4379}, {"pc": [4123], "source": "contracts/validatorRegistry.algo.ts:1045", "teal": 4380}, {"pc": [4124], "errorMessage": "pool id outside of range of pools created for this validator", "source": "contracts/validatorRegistry.algo.ts:1044", "teal": 4384}, {"pc": [4125, 4126], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4391}, {"pc": [4127, 4128, 4129], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4392}, {"pc": [4130], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4393}, {"pc": [4131, 4132], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4394}, {"pc": [4133, 4134], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4395}, {"pc": [4135, 4136, 4137], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4396}, {"pc": [4138], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4397}, {"pc": [4139], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4398}, {"pc": [4140], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4399}, {"pc": [4141, 4142], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4400}, {"pc": [4143], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4401}, {"pc": [4144], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4402}, {"pc": [4145], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4403}, {"pc": [4146], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4404}, {"pc": [4147], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4405}, {"pc": [4148], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4406}, {"pc": [4149, 4150], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4407}, {"pc": [4151, 4152, 4153], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4408}, {"pc": [4154], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4409}, {"pc": [4155], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4410}, {"pc": [4156], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4411}, {"pc": [4157, 4158], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4412}, {"pc": [4159], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4413}, {"pc": [4160], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4414}, {"pc": [4161], "source": "contracts/validatorRegistry.algo.ts:1051", "teal": 4415}, {"pc": [4162], "errorMessage": "The passed in app id doesn't match the passed in ids", "source": "contracts/validatorRegistry.algo.ts:1050", "teal": 4418}, {"pc": [4163, 4164], "source": "contracts/validatorRegistry.algo.ts:1055", "teal": 4422}, {"pc": [4165, 4166], "source": "contracts/validatorRegistry.algo.ts:1055", "teal": 4423}, {"pc": [4167, 4168, 4169], "source": "contracts/validatorRegistry.algo.ts:1055", "teal": 4424}, {"pc": [4170], "source": "contracts/validatorRegistry.algo.ts:1055", "teal": 4425}, {"pc": [4171, 4172], "source": "contracts/validatorRegistry.algo.ts:1055", "teal": 4426}, {"pc": [4173], "source": "contracts/validatorRegistry.algo.ts:1055", "teal": 4427}, {"pc": [4174], "source": "contracts/validatorRegistry.algo.ts:1055", "teal": 4428}, {"pc": [4175], "source": "contracts/validatorRegistry.algo.ts:1055", "teal": 4429}, {"pc": [4176, 4177], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4433}, {"pc": [4178, 4179, 4180], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4434}, {"pc": [4181], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4435}, {"pc": [4182, 4183], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4436}, {"pc": [4184, 4185, 4186], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4437}, {"pc": [4187], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4438}, {"pc": [4188, 4189, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4439}, {"pc": [4201], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4440}, {"pc": [4202], "errorMessage": "global state value does not exist: AppID.fromUint64(poolKey.poolAppId).globalState('validatorId')", "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4443}, {"pc": [4203], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4444}, {"pc": [4204], "source": "contracts/validatorRegistry.algo.ts:1057", "teal": 4445}, {"pc": [4205, 4206], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4449}, {"pc": [4207, 4208, 4209], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4450}, {"pc": [4210], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4451}, {"pc": [4211, 4212], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4452}, {"pc": [4213, 4214, 4215], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4453}, {"pc": [4216], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4454}, {"pc": [4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4455}, {"pc": [4225], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4456}, {"pc": [4226], "errorMessage": "global state value does not exist: AppID.fromUint64(poolKey.poolAppId).globalState('poolId')", "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4459}, {"pc": [4227], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4460}, {"pc": [4228], "source": "contracts/validatorRegistry.algo.ts:1058", "teal": 4461}, {"pc": [4229], "source": "contracts/validatorRegistry.algo.ts:1041", "teal": 4462}, {"pc": [4230, 4231, 4232], "source": "contracts/validatorRegistry.algo.ts:1067", "teal": 4471}, {"pc": [4233], "source": "contracts/validatorRegistry.algo.ts:1067", "teal": 4474}, {"pc": [4234], "source": "contracts/validatorRegistry.algo.ts:1067", "teal": 4475}, {"pc": [4235], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4479}, {"pc": [4236, 4237], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4480}, {"pc": [4238], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4481}, {"pc": [4239], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4482}, {"pc": [4240, 4241], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4483}, {"pc": [4242, 4243], "source": "contracts/validatorRegistry.algo.ts:1069", "teal": 4488}, {"pc": [4244], "source": "contracts/validatorRegistry.algo.ts:1069", "teal": 4489}, {"pc": [4245], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4490}, {"pc": [4246, 4247], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4491}, {"pc": [4248], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4492}, {"pc": [4249], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4493}, {"pc": [4250, 4251], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4494}, {"pc": [4252], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4495}, {"pc": [4253], "source": "contracts/validatorRegistry.algo.ts:1069", "teal": 4496}, {"pc": [4254], "source": "contracts/validatorRegistry.algo.ts:1069", "teal": 4497}, {"pc": [4255], "source": "contracts/validatorRegistry.algo.ts:1069", "teal": 4498}, {"pc": [4256, 4257, 4258], "source": "contracts/validatorRegistry.algo.ts:1069", "teal": 4499}, {"pc": [4259, 4260], "source": "contracts/validatorRegistry.algo.ts:1072", "teal": 4504}, {"pc": [4261], "source": "contracts/validatorRegistry.algo.ts:1072", "teal": 4505}, {"pc": [4262], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4506}, {"pc": [4263, 4264], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4507}, {"pc": [4265], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4508}, {"pc": [4266], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4509}, {"pc": [4267, 4268], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4510}, {"pc": [4269], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4511}, {"pc": [4270], "source": "contracts/validatorRegistry.algo.ts:1072", "teal": 4512}, {"pc": [4271, 4272], "source": "contracts/validatorRegistry.algo.ts:1072", "teal": 4513}, {"pc": [4273], "source": "contracts/validatorRegistry.algo.ts:1072", "teal": 4514}, {"pc": [4274], "errorMessage": "global state value does not exist: AppID.fromUint64(validatorConfig.nfdForInfo).globalState('i.owner.a')", "source": "contracts/validatorRegistry.algo.ts:1072", "teal": 4517}, {"pc": [4275, 4276], "source": "contracts/validatorRegistry.algo.ts:1072", "teal": 4518}, {"pc": [4277], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4523}, {"pc": [4278, 4279], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4524}, {"pc": [4280], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4525}, {"pc": [4281, 4282], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4526}, {"pc": [4283], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4527}, {"pc": [4284], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4528}, {"pc": [4285, 4286], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4529}, {"pc": [4287], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4530}, {"pc": [4288, 4289], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4531}, {"pc": [4290], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4532}, {"pc": [4291], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4533}, {"pc": [4292, 4293, 4294], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4534}, {"pc": [4295, 4296], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4535}, {"pc": [4297, 4298], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4536}, {"pc": [4299], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4537}, {"pc": [4300, 4301], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4538}, {"pc": [4302], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4539}, {"pc": [4303], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4540}, {"pc": [4304, 4305], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4541}, {"pc": [4306], "source": "contracts/validatorRegistry.algo.ts:1068", "teal": 4542}, {"pc": [4307, 4308], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4543}, {"pc": [4309], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4544}, {"pc": [4310], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4545}, {"pc": [4311, 4312, 4313], "source": "contracts/validatorRegistry.algo.ts:1074", "teal": 4548}, {"pc": [4314, 4315], "source": "contracts/validatorRegistry.algo.ts:1076", "teal": 4553}, {"pc": [4316, 4317], "source": "contracts/validatorRegistry.algo.ts:1076", "teal": 4554}, {"pc": [4318], "source": "contracts/validatorRegistry.algo.ts:1076", "teal": 4555}, {"pc": [4319, 4320], "source": "contracts/validatorRegistry.algo.ts:1076", "teal": 4556}, {"pc": [4321], "source": "contracts/validatorRegistry.algo.ts:1076", "teal": 4557}, {"pc": [4322], "source": "contracts/validatorRegistry.algo.ts:1076", "teal": 4558}, {"pc": [4323, 4324], "source": "contracts/validatorRegistry.algo.ts:1076", "teal": 4559}, {"pc": [4325], "source": "contracts/validatorRegistry.algo.ts:1076", "teal": 4560}, {"pc": [4326], "source": "contracts/validatorRegistry.algo.ts:1067", "teal": 4565}, {"pc": [4327, 4328, 4329], "source": "contracts/validatorRegistry.algo.ts:1081", "teal": 4569}, {"pc": [4330, 4331], "source": "contracts/validatorRegistry.algo.ts:1083", "teal": 4573}, {"pc": [4332, 4333, 4334], "source": "contracts/validatorRegistry.algo.ts:1083", "teal": 4574}, {"pc": [4335, 4336], "source": "contracts/validatorRegistry.algo.ts:1083", "teal": 4575}, {"pc": [4337], "source": "contracts/validatorRegistry.algo.ts:1083", "teal": 4576}, {"pc": [4338], "source": "contracts/validatorRegistry.algo.ts:1083", "teal": 4577}, {"pc": [4339, 4340], "source": "contracts/validatorRegistry.algo.ts:1084", "teal": 4581}, {"pc": [4341, 4342, 4343], "source": "contracts/validatorRegistry.algo.ts:1084", "teal": 4582}, {"pc": [4344, 4345], "source": "contracts/validatorRegistry.algo.ts:1084", "teal": 4583}, {"pc": [4346], "source": "contracts/validatorRegistry.algo.ts:1084", "teal": 4584}, {"pc": [4347], "source": "contracts/validatorRegistry.algo.ts:1084", "teal": 4585}, {"pc": [4348, 4349], "source": "contracts/validatorRegistry.algo.ts:1085", "teal": 4589}, {"pc": [4350, 4351], "source": "contracts/validatorRegistry.algo.ts:1085", "teal": 4590}, {"pc": [4352, 4353, 4354], "source": "contracts/validatorRegistry.algo.ts:1085", "teal": 4591}, {"pc": [4355], "source": "contracts/validatorRegistry.algo.ts:1085", "teal": 4592}, {"pc": [4356], "errorMessage": "sender must be owner to add new validator", "source": "contracts/validatorRegistry.algo.ts:1085", "teal": 4595}, {"pc": [4357, 4358], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4602}, {"pc": [4359, 4360, 4361], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4603}, {"pc": [4362], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4604}, {"pc": [4363], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4605}, {"pc": [4364], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4606}, {"pc": [4365], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4607}, {"pc": [4366, 4367, 4368], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4608}, {"pc": [4369, 4370], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4609}, {"pc": [4371, 4372, 4373], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4610}, {"pc": [4374], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4611}, {"pc": [4375, 4376], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4612}, {"pc": [4377], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4613}, {"pc": [4378], "source": "contracts/validatorRegistry.algo.ts:1088", "teal": 4614}, {"pc": [4379], "errorMessage": "gating type not valid", "source": "contracts/validatorRegistry.algo.ts:1087", "teal": 4618}, {"pc": [4380, 4381], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4625}, {"pc": [4382, 4383, 4384], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4626}, {"pc": [4385], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4627}, {"pc": [4386], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4628}, {"pc": [4387], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4629}, {"pc": [4388], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4630}, {"pc": [4389, 4390, 4391], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4631}, {"pc": [4392, 4393], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4632}, {"pc": [4394, 4395, 4396], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4633}, {"pc": [4397], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4634}, {"pc": [4398, 4399], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4635}, {"pc": [4400], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4636}, {"pc": [4401], "source": "contracts/validatorRegistry.algo.ts:1092", "teal": 4637}, {"pc": [4402], "errorMessage": "epoch length not in allowable range", "source": "contracts/validatorRegistry.algo.ts:1091", "teal": 4641}, {"pc": [4403, 4404], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4648}, {"pc": [4405, 4406, 4407], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4649}, {"pc": [4408], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4650}, {"pc": [4409], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4651}, {"pc": [4410], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4652}, {"pc": [4411], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4653}, {"pc": [4412, 4413, 4414], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4654}, {"pc": [4415, 4416], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4655}, {"pc": [4417, 4418, 4419], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4656}, {"pc": [4420], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4657}, {"pc": [4421, 4422], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4658}, {"pc": [4423], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4659}, {"pc": [4424], "source": "contracts/validatorRegistry.algo.ts:1096", "teal": 4660}, {"pc": [4425], "errorMessage": "commission percentage not valid", "source": "contracts/validatorRegistry.algo.ts:1095", "teal": 4664}, {"pc": [4426, 4427], "source": "contracts/validatorRegistry.algo.ts:1099", "teal": 4669}, {"pc": [4428, 4429, 4430], "source": "contracts/validatorRegistry.algo.ts:1099", "teal": 4670}, {"pc": [4431], "source": "contracts/validatorRegistry.algo.ts:1099", "teal": 4671}, {"pc": [4432], "source": "contracts/validatorRegistry.algo.ts:1099", "teal": 4672}, {"pc": [4433], "source": "contracts/validatorRegistry.algo.ts:1099", "teal": 4673}, {"pc": [4434, 4435, 4436], "source": "contracts/validatorRegistry.algo.ts:1099", "teal": 4674}, {"pc": [4437, 4438], "source": "contracts/validatorRegistry.algo.ts:1101", "teal": 4682}, {"pc": [4439, 4440, 4441], "source": "contracts/validatorRegistry.algo.ts:1101", "teal": 4683}, {"pc": [4442, 4443], "source": "contracts/validatorRegistry.algo.ts:1101", "teal": 4684}, {"pc": [4444], "source": "contracts/validatorRegistry.algo.ts:1101", "teal": 4685}, {"pc": [4445], "errorMessage": "validatorCommissionAddress must be set if percent to validator is not 0", "source": "contracts/validatorRegistry.algo.ts:1100", "teal": 4688}, {"pc": [4446, 4447], "source": "contracts/validatorRegistry.algo.ts:1105", "teal": 4693}, {"pc": [4448, 4449, 4450], "source": "contracts/validatorRegistry.algo.ts:1105", "teal": 4694}, {"pc": [4451], "source": "contracts/validatorRegistry.algo.ts:1105", "teal": 4695}, {"pc": [4452, 4453], "source": "contracts/validatorRegistry.algo.ts:1105", "teal": 4696}, {"pc": [4454], "source": "contracts/validatorRegistry.algo.ts:1105", "teal": 4697}, {"pc": [4455], "errorMessage": "staking pool must have minimum entry of 1 algo", "source": "contracts/validatorRegistry.algo.ts:1105", "teal": 4700}, {"pc": [4456, 4457], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4707}, {"pc": [4458, 4459, 4460], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4708}, {"pc": [4461], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4709}, {"pc": [4462], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4710}, {"pc": [4463], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4711}, {"pc": [4464], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4712}, {"pc": [4465, 4466, 4467], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4713}, {"pc": [4468, 4469], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4714}, {"pc": [4470, 4471, 4472], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4715}, {"pc": [4473], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4716}, {"pc": [4474, 4475], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4717}, {"pc": [4476], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4718}, {"pc": [4477], "source": "contracts/validatorRegistry.algo.ts:1108", "teal": 4719}, {"pc": [4478], "errorMessage": "number of pools per node must be be between 1 and the maximum allowed number", "source": "contracts/validatorRegistry.algo.ts:1107", "teal": 4723}, {"pc": [4479, 4480], "source": "contracts/validatorRegistry.algo.ts:1111", "teal": 4728}, {"pc": [4481, 4482, 4483], "source": "contracts/validatorRegistry.algo.ts:1111", "teal": 4729}, {"pc": [4484], "source": "contracts/validatorRegistry.algo.ts:1111", "teal": 4730}, {"pc": [4485], "source": "contracts/validatorRegistry.algo.ts:1111", "teal": 4731}, {"pc": [4486], "source": "contracts/validatorRegistry.algo.ts:1111", "teal": 4732}, {"pc": [4487, 4488, 4489], "source": "contracts/validatorRegistry.algo.ts:1111", "teal": 4733}, {"pc": [4490, 4491], "source": "contracts/validatorRegistry.algo.ts:1112", "teal": 4738}, {"pc": [4492, 4493, 4494], "source": "contracts/validatorRegistry.algo.ts:1112", "teal": 4739}, {"pc": [4495], "source": "contracts/validatorRegistry.algo.ts:1112", "teal": 4740}, {"pc": [4496, 4497], "source": "contracts/validatorRegistry.algo.ts:1112", "teal": 4741}, {"pc": [4498], "source": "contracts/validatorRegistry.algo.ts:1112", "teal": 4742}, {"pc": [4499], "errorMessage": "sunsettingOn must be later than now if set", "source": "contracts/validatorRegistry.algo.ts:1112", "teal": 4745}, {"pc": [4500], "source": "contracts/validatorRegistry.algo.ts:1081", "teal": 4748}, {"pc": [4501, 4502, 4503], "source": "contracts/validatorRegistry.algo.ts:1127", "teal": 4762}, {"pc": [4504], "source": "contracts/validatorRegistry.algo.ts:1127", "teal": 4765}, {"pc": [4505, 4506], "source": "contracts/validatorRegistry.algo.ts:1127", "teal": 4766}, {"pc": [4507, 4508], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4770}, {"pc": [4509, 4510], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4771}, {"pc": [4511, 4512, 4513], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4772}, {"pc": [4514], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4773}, {"pc": [4515], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4774}, {"pc": [4516], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4775}, {"pc": [4517, 4518], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4776}, {"pc": [4519], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4777}, {"pc": [4520], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4778}, {"pc": [4521], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4779}, {"pc": [4522], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4780}, {"pc": [4523], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4781}, {"pc": [4524], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4782}, {"pc": [4525, 4526], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4783}, {"pc": [4527, 4528, 4529], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4784}, {"pc": [4530], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4785}, {"pc": [4531], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4786}, {"pc": [4532], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4787}, {"pc": [4533, 4534], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4788}, {"pc": [4535], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4789}, {"pc": [4536], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4790}, {"pc": [4537, 4538], "source": "contracts/validatorRegistry.algo.ts:1134", "teal": 4791}, {"pc": [4539], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4804}, {"pc": [4540], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4805}, {"pc": [4541, 4542], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4806}, {"pc": [4543, 4544], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4810}, {"pc": [4545, 4546], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4811}, {"pc": [4547, 4548], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4812}, {"pc": [4549], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4813}, {"pc": [4550, 4551], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4814}, {"pc": [4552, 4553], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4818}, {"pc": [4554, 4555], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4819}, {"pc": [4556], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4820}, {"pc": [4557, 4558], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4821}, {"pc": [4559], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4824}, {"pc": [4560, 4561], "source": "contracts/validatorRegistry.algo.ts:1143", "teal": 4825}, {"pc": [4562], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4826}, {"pc": [4563, 4564], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4827}, {"pc": [4565, 4566], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4828}, {"pc": [4567, 4568, 4569, 4570, 4571, 4572], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4829}, {"pc": [4573, 4574], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4830}, {"pc": [4575, 4576], "source": "contracts/validatorRegistry.algo.ts:1139", "teal": 4834}, {"pc": [4577, 4578], "source": "contracts/validatorRegistry.algo.ts:1139", "teal": 4835}, {"pc": [4579, 4580], "source": "contracts/validatorRegistry.algo.ts:1145", "teal": 4845}, {"pc": [4581, 4582], "source": "contracts/validatorRegistry.algo.ts:1145", "teal": 4846}, {"pc": [4583, 4584], "source": "contracts/validatorRegistry.algo.ts:1145", "teal": 4847}, {"pc": [4585], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4850}, {"pc": [4586, 4587], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4851}, {"pc": [4588], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4854}, {"pc": [4589, 4590], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4855}, {"pc": [4591], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4856}, {"pc": [4592], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4857}, {"pc": [4593, 4594], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4858}, {"pc": [4595, 4596, 4597], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4859}, {"pc": [4598], "source": "contracts/validatorRegistry.algo.ts:1138", "teal": 4860}, {"pc": [4599, 4600], "source": "contracts/validatorRegistry.algo.ts:1148", "teal": 4865}, {"pc": [4601, 4602, 4603], "source": "contracts/validatorRegistry.algo.ts:1148", "teal": 4866}, {"pc": [4604], "source": "contracts/validatorRegistry.algo.ts:1148", "teal": 4867}, {"pc": [4605, 4606, 4607], "source": "contracts/validatorRegistry.algo.ts:1148", "teal": 4868}, {"pc": [4608], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4873}, {"pc": [4609, 4610], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4874}, {"pc": [4611, 4612], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4875}, {"pc": [4613], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4876}, {"pc": [4614, 4615], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4877}, {"pc": [4616, 4617], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4878}, {"pc": [4618], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4879}, {"pc": [4619, 4620], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4880}, {"pc": [4621, 4622], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4881}, {"pc": [4623, 4624], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4882}, {"pc": [4625, 4626], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4883}, {"pc": [4627], "source": "contracts/validatorRegistry.algo.ts:1149", "teal": 4884}, {"pc": [4628, 4629], "source": "contracts/validatorRegistry.algo.ts:1153", "teal": 4889}, {"pc": [4630, 4631], "source": "contracts/validatorRegistry.algo.ts:1153", "teal": 4890}, {"pc": [4632], "source": "contracts/validatorRegistry.algo.ts:1153", "teal": 4891}, {"pc": [4633], "errorMessage": "global state value does not exist: AppID.fromUint64(poolAppId).globalState('numStakers')", "source": "contracts/validatorRegistry.algo.ts:1153", "teal": 4894}, {"pc": [4634, 4635], "source": "contracts/validatorRegistry.algo.ts:1153", "teal": 4895}, {"pc": [4636, 4637], "source": "contracts/validatorRegistry.algo.ts:1154", "teal": 4899}, {"pc": [4638, 4639], "source": "contracts/validatorRegistry.algo.ts:1154", "teal": 4900}, {"pc": [4640], "source": "contracts/validatorRegistry.algo.ts:1154", "teal": 4901}, {"pc": [4641], "errorMessage": "global state value does not exist: AppID.fromUint64(poolAppId).globalState('staked')", "source": "contracts/validatorRegistry.algo.ts:1154", "teal": 4904}, {"pc": [4642, 4643], "source": "contracts/validatorRegistry.algo.ts:1154", "teal": 4905}, {"pc": [4644, 4645], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4909}, {"pc": [4646, 4647], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4910}, {"pc": [4648, 4649, 4650], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4911}, {"pc": [4651], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4912}, {"pc": [4652], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4913}, {"pc": [4653], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4914}, {"pc": [4654, 4655], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4915}, {"pc": [4656], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4916}, {"pc": [4657], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4917}, {"pc": [4658], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4918}, {"pc": [4659], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4919}, {"pc": [4660, 4661], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4920}, {"pc": [4662], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4921}, {"pc": [4663, 4664, 4665], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4922}, {"pc": [4666], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4923}, {"pc": [4667, 4668], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4924}, {"pc": [4669, 4670, 4671], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4925}, {"pc": [4672], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4926}, {"pc": [4673], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4927}, {"pc": [4674], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4928}, {"pc": [4675, 4676], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4929}, {"pc": [4677], "source": "contracts/validatorRegistry.algo.ts:1155", "teal": 4930}, {"pc": [4678, 4679], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4934}, {"pc": [4680, 4681], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4935}, {"pc": [4682, 4683, 4684], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4936}, {"pc": [4685], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4937}, {"pc": [4686], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4938}, {"pc": [4687], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4939}, {"pc": [4688, 4689], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4940}, {"pc": [4690], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4941}, {"pc": [4691], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4942}, {"pc": [4692, 4693], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4943}, {"pc": [4694], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4944}, {"pc": [4695, 4696], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4945}, {"pc": [4697], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4946}, {"pc": [4698], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4947}, {"pc": [4699, 4700], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4948}, {"pc": [4701, 4702, 4703], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4949}, {"pc": [4704], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4950}, {"pc": [4705], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4951}, {"pc": [4706], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4952}, {"pc": [4707, 4708], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4953}, {"pc": [4709], "source": "contracts/validatorRegistry.algo.ts:1156", "teal": 4954}, {"pc": [4710, 4711], "source": "contracts/validatorRegistry.algo.ts:1159", "teal": 4959}, {"pc": [4712, 4713, 4714], "source": "contracts/validatorRegistry.algo.ts:1159", "teal": 4960}, {"pc": [4715, 4716], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4965}, {"pc": [4717], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4966}, {"pc": [4718], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4967}, {"pc": [4719], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4968}, {"pc": [4720, 4721], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4969}, {"pc": [4722, 4723, 4724], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4970}, {"pc": [4725], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4971}, {"pc": [4726], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4972}, {"pc": [4727], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4973}, {"pc": [4728, 4729], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4974}, {"pc": [4730], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4975}, {"pc": [4731], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4976}, {"pc": [4732], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4977}, {"pc": [4733], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4978}, {"pc": [4734], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4979}, {"pc": [4735], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4980}, {"pc": [4736, 4737], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4981}, {"pc": [4738, 4739, 4740], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4982}, {"pc": [4741], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4983}, {"pc": [4742], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4984}, {"pc": [4743], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4985}, {"pc": [4744, 4745], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4986}, {"pc": [4746], "source": "contracts/validatorRegistry.algo.ts:1160", "teal": 4987}, {"pc": [4747, 4748], "source": "contracts/validatorRegistry.algo.ts:1162", "teal": 4993}, {"pc": [4749, 4750, 4751], "source": "contracts/validatorRegistry.algo.ts:1162", "teal": 4994}, {"pc": [4752, 4753], "source": "contracts/validatorRegistry.algo.ts:1163", "teal": 4999}, {"pc": [4754], "source": "contracts/validatorRegistry.algo.ts:1163", "teal": 5000}, {"pc": [4755], "source": "contracts/validatorRegistry.algo.ts:1163", "teal": 5001}, {"pc": [4756], "source": "contracts/validatorRegistry.algo.ts:1163", "teal": 5002}, {"pc": [4757, 4758], "source": "contracts/validatorRegistry.algo.ts:1163", "teal": 5003}, {"pc": [4759], "source": "contracts/validatorRegistry.algo.ts:1163", "teal": 5004}, {"pc": [4760], "source": "contracts/validatorRegistry.algo.ts:1163", "teal": 5005}, {"pc": [4761, 4762], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5010}, {"pc": [4763], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5011}, {"pc": [4764], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5012}, {"pc": [4765], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5013}, {"pc": [4766, 4767], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5014}, {"pc": [4768, 4769, 4770], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5015}, {"pc": [4771], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5016}, {"pc": [4772], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5017}, {"pc": [4773], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5018}, {"pc": [4774, 4775], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5019}, {"pc": [4776], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5020}, {"pc": [4777], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5021}, {"pc": [4778, 4779], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5022}, {"pc": [4780, 4781], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5023}, {"pc": [4782, 4783], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5024}, {"pc": [4784], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5025}, {"pc": [4785], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5026}, {"pc": [4786], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5027}, {"pc": [4787], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5028}, {"pc": [4788, 4789], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5029}, {"pc": [4790, 4791, 4792], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5030}, {"pc": [4793], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5031}, {"pc": [4794], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5032}, {"pc": [4795], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5033}, {"pc": [4796, 4797], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5034}, {"pc": [4798], "source": "contracts/validatorRegistry.algo.ts:1165", "teal": 5035}, {"pc": [4799, 4800], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5039}, {"pc": [4801], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5040}, {"pc": [4802, 4803], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5041}, {"pc": [4804, 4805], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5042}, {"pc": [4806, 4807], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5043}, {"pc": [4808], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5044}, {"pc": [4809], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5045}, {"pc": [4810, 4811], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5046}, {"pc": [4812], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5047}, {"pc": [4813], "source": "contracts/validatorRegistry.algo.ts:1166", "teal": 5048}, {"pc": [4814], "source": "contracts/validatorRegistry.algo.ts:1127", "teal": 5049}, {"pc": [4815, 4816, 4817], "source": "contracts/validatorRegistry.algo.ts:1169", "teal": 5053}, {"pc": [4818], "source": "contracts/validatorRegistry.algo.ts:1169", "teal": 5056}, {"pc": [4819, 4820], "source": "contracts/validatorRegistry.algo.ts:1169", "teal": 5057}, {"pc": [4821], "source": "contracts/validatorRegistry.algo.ts:1170", "teal": 5061}, {"pc": [4822, 4823], "source": "contracts/validatorRegistry.algo.ts:1170", "teal": 5062}, {"pc": [4824], "source": "contracts/validatorRegistry.algo.ts:1170", "teal": 5063}, {"pc": [4825], "source": "contracts/validatorRegistry.algo.ts:1170", "teal": 5064}, {"pc": [4826], "source": "contracts/validatorRegistry.algo.ts:1170", "teal": 5065}, {"pc": [4827], "source": "contracts/validatorRegistry.algo.ts:1170", "teal": 5066}, {"pc": [4828], "source": "contracts/validatorRegistry.algo.ts:1170", "teal": 5067}, {"pc": [4829], "source": "contracts/validatorRegistry.algo.ts:1172", "teal": 5071}, {"pc": [4830, 4831], "source": "contracts/validatorRegistry.algo.ts:1172", "teal": 5072}, {"pc": [4832], "source": "contracts/validatorRegistry.algo.ts:1172", "teal": 5073}, {"pc": [4833], "source": "contracts/validatorRegistry.algo.ts:1172", "teal": 5074}, {"pc": [4834], "errorMessage": "box value does not exist: this.stakerPoolSet(staker).value", "source": "contracts/validatorRegistry.algo.ts:1172", "teal": 5077}, {"pc": [4835, 4836], "source": "contracts/validatorRegistry.algo.ts:1172", "teal": 5078}, {"pc": [4837], "source": "contracts/validatorRegistry.algo.ts:1173", "teal": 5082}, {"pc": [4838, 4839], "source": "contracts/validatorRegistry.algo.ts:1173", "teal": 5083}, {"pc": [4840], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5087}, {"pc": [4841, 4842], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5088}, {"pc": [4843, 4844], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5093}, {"pc": [4845, 4846], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5094}, {"pc": [4847], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5095}, {"pc": [4848, 4849, 4850], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5096}, {"pc": [4851, 4852], "source": "contracts/validatorRegistry.algo.ts:1175", "teal": 5101}, {"pc": [4853, 4854], "source": "contracts/validatorRegistry.algo.ts:1175", "teal": 5102}, {"pc": [4855], "source": "contracts/validatorRegistry.algo.ts:1175", "teal": 5103}, {"pc": [4856], "source": "contracts/validatorRegistry.algo.ts:1175", "teal": 5104}, {"pc": [4857], "source": "contracts/validatorRegistry.algo.ts:1175", "teal": 5105}, {"pc": [4858], "source": "contracts/validatorRegistry.algo.ts:1175", "teal": 5106}, {"pc": [4859, 4860], "source": "contracts/validatorRegistry.algo.ts:1175", "teal": 5107}, {"pc": [4861], "source": "contracts/validatorRegistry.algo.ts:1175", "teal": 5108}, {"pc": [4862, 4863, 4864], "source": "contracts/validatorRegistry.algo.ts:1175", "teal": 5109}, {"pc": [4865], "source": "contracts/validatorRegistry.algo.ts:1177", "teal": 5114}, {"pc": [4866, 4867], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5120}, {"pc": [4868], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5121}, {"pc": [4869], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5122}, {"pc": [4870], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5123}, {"pc": [4871, 4872, 4873], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5124}, {"pc": [4874, 4875], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5125}, {"pc": [4876, 4877], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5126}, {"pc": [4878], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5127}, {"pc": [4879], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5128}, {"pc": [4880], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5129}, {"pc": [4881], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5130}, {"pc": [4882], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5131}, {"pc": [4883], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5132}, {"pc": [4884], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5133}, {"pc": [4885], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5134}, {"pc": [4886], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5135}, {"pc": [4887], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5136}, {"pc": [4888, 4889, 4890], "source": "contracts/validatorRegistry.algo.ts:1179", "teal": 5139}, {"pc": [4891, 4892], "source": "contracts/validatorRegistry.algo.ts:1180", "teal": 5144}, {"pc": [4893], "source": "contracts/validatorRegistry.algo.ts:1180", "teal": 5145}, {"pc": [4894], "source": "contracts/validatorRegistry.algo.ts:1180", "teal": 5146}, {"pc": [4895, 4896], "source": "contracts/validatorRegistry.algo.ts:1180", "teal": 5147}, {"pc": [4897, 4898], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5154}, {"pc": [4899], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5155}, {"pc": [4900], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5156}, {"pc": [4901, 4902], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5157}, {"pc": [4903, 4904, 4905], "source": "contracts/validatorRegistry.algo.ts:1174", "teal": 5158}, {"pc": [4906, 4907], "source": "contracts/validatorRegistry.algo.ts:1183", "teal": 5164}, {"pc": [4908], "source": "contracts/validatorRegistry.algo.ts:1183", "teal": 5165}, {"pc": [4909], "source": "contracts/validatorRegistry.algo.ts:1183", "teal": 5166}, {"pc": [4910, 4911, 4912], "source": "contracts/validatorRegistry.algo.ts:1183", "teal": 5167}, {"pc": [4913], "errorMessage": "No empty slot available in the staker pool set", "source": "contracts/validatorRegistry.algo.ts:1184", "teal": 5171}, {"pc": [4914, 4915], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5176}, {"pc": [4916], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5177}, {"pc": [4917], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5178}, {"pc": [4918], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5179}, {"pc": [4919], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5180}, {"pc": [4920, 4921], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5181}, {"pc": [4922], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5182}, {"pc": [4923, 4924], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5183}, {"pc": [4925], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5184}, {"pc": [4926, 4927], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5185}, {"pc": [4928], "source": "contracts/validatorRegistry.algo.ts:1186", "teal": 5186}, {"pc": [4929], "source": "contracts/validatorRegistry.algo.ts:1169", "teal": 5187}, {"pc": [4930, 4931, 4932], "source": "contracts/validatorRegistry.algo.ts:1197", "teal": 5198}, {"pc": [4933], "source": "contracts/validatorRegistry.algo.ts:1197", "teal": 5201}, {"pc": [4934, 4935], "source": "contracts/validatorRegistry.algo.ts:1197", "teal": 5202}, {"pc": [4936], "source": "contracts/validatorRegistry.algo.ts:1199", "teal": 5206}, {"pc": [4937, 4938], "source": "contracts/validatorRegistry.algo.ts:1199", "teal": 5207}, {"pc": [4939], "source": "contracts/validatorRegistry.algo.ts:1200", "teal": 5211}, {"pc": [4940, 4941], "source": "contracts/validatorRegistry.algo.ts:1200", "teal": 5212}, {"pc": [4942], "source": "contracts/validatorRegistry.algo.ts:1201", "teal": 5216}, {"pc": [4943, 4944], "source": "contracts/validatorRegistry.algo.ts:1201", "teal": 5217}, {"pc": [4945], "source": "contracts/validatorRegistry.algo.ts:1203", "teal": 5221}, {"pc": [4946, 4947], "source": "contracts/validatorRegistry.algo.ts:1203", "teal": 5222}, {"pc": [4948], "source": "contracts/validatorRegistry.algo.ts:1203", "teal": 5223}, {"pc": [4949], "source": "contracts/validatorRegistry.algo.ts:1203", "teal": 5224}, {"pc": [4950], "errorMessage": "box value does not exist: this.stakerPoolSet(staker).value", "source": "contracts/validatorRegistry.algo.ts:1203", "teal": 5227}, {"pc": [4951, 4952], "source": "contracts/validatorRegistry.algo.ts:1203", "teal": 5228}, {"pc": [4953], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5232}, {"pc": [4954, 4955], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5233}, {"pc": [4956, 4957], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5238}, {"pc": [4958, 4959], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5239}, {"pc": [4960], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5240}, {"pc": [4961, 4962, 4963], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5241}, {"pc": [4964, 4965], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5246}, {"pc": [4966, 4967], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5247}, {"pc": [4968], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5248}, {"pc": [4969], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5249}, {"pc": [4970], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5250}, {"pc": [4971], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5251}, {"pc": [4972], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5252}, {"pc": [4973], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5253}, {"pc": [4974], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5254}, {"pc": [4975], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5255}, {"pc": [4976], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5256}, {"pc": [4977, 4978, 4979], "source": "contracts/validatorRegistry.algo.ts:1205", "teal": 5257}, {"pc": [4980, 4981, 4982], "source": "contracts/validatorRegistry.algo.ts:1206", "teal": 5260}, {"pc": [4983, 4984], "source": "contracts/validatorRegistry.algo.ts:1208", "teal": 5265}, {"pc": [4985], "source": "contracts/validatorRegistry.algo.ts:1208", "teal": 5266}, {"pc": [4986], "source": "contracts/validatorRegistry.algo.ts:1208", "teal": 5267}, {"pc": [4987, 4988], "source": "contracts/validatorRegistry.algo.ts:1208", "teal": 5268}, {"pc": [4989, 4990], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5273}, {"pc": [4991, 4992], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5274}, {"pc": [4993], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5275}, {"pc": [4994], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5276}, {"pc": [4995], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5277}, {"pc": [4996], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5278}, {"pc": [4997], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5279}, {"pc": [4998], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5280}, {"pc": [4999], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5281}, {"pc": [5000, 5001], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5282}, {"pc": [5002, 5003, 5004], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5283}, {"pc": [5005], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5284}, {"pc": [5006], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5285}, {"pc": [5007, 5008, 5009], "source": "contracts/validatorRegistry.algo.ts:1209", "teal": 5286}, {"pc": [5010, 5011], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5292}, {"pc": [5012, 5013], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5293}, {"pc": [5014], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5294}, {"pc": [5015], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5295}, {"pc": [5016], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5296}, {"pc": [5017], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5297}, {"pc": [5018, 5019], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5298}, {"pc": [5020], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5299}, {"pc": [5021, 5022, 5023], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5300}, {"pc": [5024], "source": "contracts/validatorRegistry.algo.ts:1211", "teal": 5305}, {"pc": [5025, 5026], "source": "contracts/validatorRegistry.algo.ts:1211", "teal": 5306}, {"pc": [5027, 5028], "source": "contracts/validatorRegistry.algo.ts:1213", "teal": 5310}, {"pc": [5029], "source": "contracts/validatorRegistry.algo.ts:1213", "teal": 5311}, {"pc": [5030], "source": "contracts/validatorRegistry.algo.ts:1213", "teal": 5312}, {"pc": [5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056], "source": "contracts/validatorRegistry.algo.ts:1213", "teal": 5313}, {"pc": [5057], "source": "contracts/validatorRegistry.algo.ts:1213", "teal": 5314}, {"pc": [5058, 5059], "source": "contracts/validatorRegistry.algo.ts:1213", "teal": 5315}, {"pc": [5060], "source": "contracts/validatorRegistry.algo.ts:1213", "teal": 5316}, {"pc": [5061, 5062], "source": "contracts/validatorRegistry.algo.ts:1213", "teal": 5317}, {"pc": [5063], "source": "contracts/validatorRegistry.algo.ts:1213", "teal": 5318}, {"pc": [5064, 5065, 5066], "source": "contracts/validatorRegistry.algo.ts:1210", "teal": 5319}, {"pc": [5067, 5068], "source": "contracts/validatorRegistry.algo.ts:1215", "teal": 5324}, {"pc": [5069], "source": "contracts/validatorRegistry.algo.ts:1215", "teal": 5325}, {"pc": [5070], "source": "contracts/validatorRegistry.algo.ts:1215", "teal": 5326}, {"pc": [5071, 5072], "source": "contracts/validatorRegistry.algo.ts:1215", "teal": 5327}, {"pc": [5073, 5074], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5336}, {"pc": [5075], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5337}, {"pc": [5076], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5338}, {"pc": [5077, 5078], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5339}, {"pc": [5079, 5080, 5081], "source": "contracts/validatorRegistry.algo.ts:1204", "teal": 5340}, {"pc": [5082, 5083], "source": "contracts/validatorRegistry.algo.ts:1219", "teal": 5346}, {"pc": [5084], "source": "contracts/validatorRegistry.algo.ts:1219", "teal": 5347}, {"pc": [5085, 5086, 5087], "source": "contracts/validatorRegistry.algo.ts:1219", "teal": 5348}, {"pc": [5088], "errorMessage": "No matching slot found when told to remove a pool from the stakers set", "source": "contracts/validatorRegistry.algo.ts:1220", "teal": 5352}, {"pc": [5089, 5090], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5357}, {"pc": [5091], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5358}, {"pc": [5092, 5093], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5359}, {"pc": [5094], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5360}, {"pc": [5095], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5361}, {"pc": [5096], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5362}, {"pc": [5097], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5363}, {"pc": [5098, 5099], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5364}, {"pc": [5100], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5365}, {"pc": [5101], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5366}, {"pc": [5102], "source": "contracts/validatorRegistry.algo.ts:1223", "teal": 5367}, {"pc": [5103, 5104], "source": "contracts/validatorRegistry.algo.ts:1197", "teal": 5370}, {"pc": [5105, 5106], "source": "contracts/validatorRegistry.algo.ts:1197", "teal": 5373}, {"pc": [5107], "source": "contracts/validatorRegistry.algo.ts:1197", "teal": 5374}, {"pc": [5108, 5109, 5110], "source": "contracts/validatorRegistry.algo.ts:1226", "teal": 5378}, {"pc": [5111], "source": "contracts/validatorRegistry.algo.ts:1226", "teal": 5381}, {"pc": [5112, 5113], "source": "contracts/validatorRegistry.algo.ts:1226", "teal": 5382}, {"pc": [5114, 5115], "source": "contracts/validatorRegistry.algo.ts:1227", "teal": 5386}, {"pc": [5116, 5117], "source": "contracts/validatorRegistry.algo.ts:1227", "teal": 5387}, {"pc": [5118], "source": "contracts/validatorRegistry.algo.ts:1227", "teal": 5388}, {"pc": [5119, 5120], "source": "contracts/validatorRegistry.algo.ts:1227", "teal": 5389}, {"pc": [5121], "source": "contracts/validatorRegistry.algo.ts:1227", "teal": 5390}, {"pc": [5122], "source": "contracts/validatorRegistry.algo.ts:1227", "teal": 5391}, {"pc": [5123, 5124], "source": "contracts/validatorRegistry.algo.ts:1227", "teal": 5392}, {"pc": [5125], "source": "contracts/validatorRegistry.algo.ts:1227", "teal": 5393}, {"pc": [5126, 5127], "source": "contracts/validatorRegistry.algo.ts:1227", "teal": 5394}, {"pc": [5128, 5129, 5130], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5398}, {"pc": [5131], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5399}, {"pc": [5132], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5400}, {"pc": [5133, 5134], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5401}, {"pc": [5135], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5402}, {"pc": [5136], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5403}, {"pc": [5137, 5138], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5404}, {"pc": [5139], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5405}, {"pc": [5140], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5406}, {"pc": [5141, 5142], "source": "contracts/validatorRegistry.algo.ts:1228", "teal": 5407}, {"pc": [5143, 5144], "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5411}, {"pc": [5145], "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5412}, {"pc": [5146], "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5413}, {"pc": [5147], "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5414}, {"pc": [5148, 5149, 5150], "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5415}, {"pc": [5151, 5152], "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5416}, {"pc": [5153], "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5417}, {"pc": [5154], "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5418}, {"pc": [5155], "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5419}, {"pc": [5156], "errorMessage": "node number not in valid range", "source": "contracts/validatorRegistry.algo.ts:1230", "teal": 5423}, {"pc": [5157], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5427}, {"pc": [5158, 5159], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5428}, {"pc": [5160, 5161], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5433}, {"pc": [5162, 5163], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5434}, {"pc": [5164], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5435}, {"pc": [5165, 5166, 5167], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5436}, {"pc": [5168, 5169], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5441}, {"pc": [5170], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5442}, {"pc": [5171, 5172], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5443}, {"pc": [5173], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5444}, {"pc": [5174], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5445}, {"pc": [5175], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5446}, {"pc": [5176], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5447}, {"pc": [5177], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5448}, {"pc": [5178], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5449}, {"pc": [5179], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5450}, {"pc": [5180, 5181], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5451}, {"pc": [5182], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5452}, {"pc": [5183], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5453}, {"pc": [5184], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5454}, {"pc": [5185], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5455}, {"pc": [5186], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5456}, {"pc": [5187], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5457}, {"pc": [5188], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5458}, {"pc": [5189], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5459}, {"pc": [5190, 5191, 5192], "source": "contracts/validatorRegistry.algo.ts:1233", "teal": 5460}, {"pc": [5193, 5194], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5465}, {"pc": [5195, 5196], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5466}, {"pc": [5197], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5467}, {"pc": [5198], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5468}, {"pc": [5199], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5469}, {"pc": [5200], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5470}, {"pc": [5201], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5471}, {"pc": [5202], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5472}, {"pc": [5203], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5473}, {"pc": [5204, 5205], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5474}, {"pc": [5206], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5475}, {"pc": [5207], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5476}, {"pc": [5208], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5477}, {"pc": [5209, 5210], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5478}, {"pc": [5211], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5479}, {"pc": [5212], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5480}, {"pc": [5213, 5214], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5481}, {"pc": [5215], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5482}, {"pc": [5216], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5483}, {"pc": [5217, 5218], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5484}, {"pc": [5219], "source": "contracts/validatorRegistry.algo.ts:1235", "teal": 5485}, {"pc": [5220], "source": "contracts/validatorRegistry.algo.ts:1236", "teal": 5489}, {"pc": [5221, 5222], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5496}, {"pc": [5223], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5497}, {"pc": [5224], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5498}, {"pc": [5225, 5226], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5499}, {"pc": [5227, 5228, 5229], "source": "contracts/validatorRegistry.algo.ts:1232", "teal": 5500}, {"pc": [5230], "errorMessage": "no available space in specified node for this pool", "source": "contracts/validatorRegistry.algo.ts:1239", "teal": 5504}, {"pc": [5231], "source": "contracts/validatorRegistry.algo.ts:1226", "teal": 5505}, {"pc": [5232, 5233, 5234], "source": "contracts/validatorRegistry.algo.ts:1249", "teal": 5515}, {"pc": [5235], "source": "contracts/validatorRegistry.algo.ts:1249", "teal": 5518}, {"pc": [5236, 5237], "source": "contracts/validatorRegistry.algo.ts:1249", "teal": 5519}, {"pc": [5238, 5239], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5523}, {"pc": [5240], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5524}, {"pc": [5241], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5525}, {"pc": [5242, 5243], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5526}, {"pc": [5244], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5527}, {"pc": [5245], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5528}, {"pc": [5246, 5247], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5529}, {"pc": [5248], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5530}, {"pc": [5249], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5531}, {"pc": [5250, 5251], "source": "contracts/validatorRegistry.algo.ts:1250", "teal": 5532}, {"pc": [5252, 5253], "source": "contracts/validatorRegistry.algo.ts:1251", "teal": 5537}, {"pc": [5254], "source": "contracts/validatorRegistry.algo.ts:1251", "teal": 5538}, {"pc": [5255], "source": "contracts/validatorRegistry.algo.ts:1251", "teal": 5539}, {"pc": [5256, 5257, 5258], "source": "contracts/validatorRegistry.algo.ts:1251", "teal": 5540}, {"pc": [5259], "source": "contracts/validatorRegistry.algo.ts:1252", "teal": 5545}, {"pc": [5260, 5261], "source": "contracts/validatorRegistry.algo.ts:1254", "teal": 5550}, {"pc": [5262, 5263], "source": "contracts/validatorRegistry.algo.ts:1254", "teal": 5551}, {"pc": [5264], "source": "contracts/validatorRegistry.algo.ts:1255", "teal": 5555}, {"pc": [5265, 5266], "source": "contracts/validatorRegistry.algo.ts:1255", "teal": 5556}, {"pc": [5267], "source": "contracts/validatorRegistry.algo.ts:1255", "teal": 5557}, {"pc": [5268, 5269], "source": "contracts/validatorRegistry.algo.ts:1255", "teal": 5558}, {"pc": [5270], "source": "contracts/validatorRegistry.algo.ts:1255", "teal": 5559}, {"pc": [5271], "source": "contracts/validatorRegistry.algo.ts:1255", "teal": 5560}, {"pc": [5272, 5273], "source": "contracts/validatorRegistry.algo.ts:1255", "teal": 5561}, {"pc": [5274], "source": "contracts/validatorRegistry.algo.ts:1255", "teal": 5562}, {"pc": [5275, 5276], "source": "contracts/validatorRegistry.algo.ts:1255", "teal": 5563}, {"pc": [5277, 5278], "source": "contracts/validatorRegistry.algo.ts:1259", "teal": 5570}, {"pc": [5279], "source": "contracts/validatorRegistry.algo.ts:1259", "teal": 5571}, {"pc": [5280], "source": "contracts/validatorRegistry.algo.ts:1259", "teal": 5572}, {"pc": [5281], "source": "contracts/validatorRegistry.algo.ts:1259", "teal": 5573}, {"pc": [5282, 5283, 5284], "source": "contracts/validatorRegistry.algo.ts:1259", "teal": 5574}, {"pc": [5285, 5286], "source": "contracts/validatorRegistry.algo.ts:1260", "teal": 5575}, {"pc": [5287, 5288], "source": "contracts/validatorRegistry.algo.ts:1260", "teal": 5576}, {"pc": [5289], "source": "contracts/validatorRegistry.algo.ts:1260", "teal": 5577}, {"pc": [5290], "source": "contracts/validatorRegistry.algo.ts:1259", "teal": 5578}, {"pc": [5291], "source": "contracts/validatorRegistry.algo.ts:1260", "teal": 5581}, {"pc": [5292, 5293, 5294], "source": "contracts/validatorRegistry.algo.ts:1260", "teal": 5582}, {"pc": [5295, 5296], "source": "contracts/validatorRegistry.algo.ts:1261", "teal": 5583}, {"pc": [5297, 5298], "source": "contracts/validatorRegistry.algo.ts:1261", "teal": 5584}, {"pc": [5299], "source": "contracts/validatorRegistry.algo.ts:1261", "teal": 5585}, {"pc": [5300], "source": "contracts/validatorRegistry.algo.ts:1260", "teal": 5586}, {"pc": [5301, 5302, 5303], "source": "contracts/validatorRegistry.algo.ts:1258", "teal": 5589}, {"pc": [5304, 5305], "source": "contracts/validatorRegistry.algo.ts:1263", "teal": 5594}, {"pc": [5306], "source": "contracts/validatorRegistry.algo.ts:1263", "teal": 5595}, {"pc": [5307], "source": "contracts/validatorRegistry.algo.ts:1263", "teal": 5596}, {"pc": [5308], "source": "contracts/validatorRegistry.algo.ts:1263", "teal": 5597}, {"pc": [5309, 5310], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5601}, {"pc": [5311], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5602}, {"pc": [5312], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5603}, {"pc": [5313, 5314], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5604}, {"pc": [5315], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5605}, {"pc": [5316], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5606}, {"pc": [5317, 5318], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5607}, {"pc": [5319], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5608}, {"pc": [5320], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5609}, {"pc": [5321, 5322], "source": "contracts/validatorRegistry.algo.ts:1264", "teal": 5610}, {"pc": [5323, 5324], "source": "contracts/validatorRegistry.algo.ts:1265", "teal": 5615}, {"pc": [5325], "source": "contracts/validatorRegistry.algo.ts:1265", "teal": 5616}, {"pc": [5326], "source": "contracts/validatorRegistry.algo.ts:1265", "teal": 5617}, {"pc": [5327, 5328, 5329], "source": "contracts/validatorRegistry.algo.ts:1265", "teal": 5618}, {"pc": [5330], "source": "contracts/validatorRegistry.algo.ts:1266", "teal": 5623}, {"pc": [5331, 5332], "source": "contracts/validatorRegistry.algo.ts:1266", "teal": 5624}, {"pc": [5333, 5334], "source": "contracts/validatorRegistry.algo.ts:1269", "teal": 5632}, {"pc": [5335, 5336], "source": "contracts/validatorRegistry.algo.ts:1269", "teal": 5633}, {"pc": [5337, 5338], "source": "contracts/validatorRegistry.algo.ts:1269", "teal": 5634}, {"pc": [5339], "source": "contracts/validatorRegistry.algo.ts:1269", "teal": 5635}, {"pc": [5340, 5341], "source": "contracts/validatorRegistry.algo.ts:1269", "teal": 5636}, {"pc": [5342], "source": "contracts/validatorRegistry.algo.ts:1269", "teal": 5637}, {"pc": [5343], "errorMessage": "must have required minimum balance of validator defined token to add stake", "source": "contracts/validatorRegistry.algo.ts:1268", "teal": 5640}, {"pc": [5344, 5345], "source": "contracts/validatorRegistry.algo.ts:1273", "teal": 5646}, {"pc": [5346], "source": "contracts/validatorRegistry.algo.ts:1273", "teal": 5647}, {"pc": [5347], "source": "contracts/validatorRegistry.algo.ts:1273", "teal": 5648}, {"pc": [5348, 5349, 5350], "source": "contracts/validatorRegistry.algo.ts:1273", "teal": 5649}, {"pc": [5351, 5352], "source": "contracts/validatorRegistry.algo.ts:1275", "teal": 5657}, {"pc": [5353, 5354], "source": "contracts/validatorRegistry.algo.ts:1275", "teal": 5658}, {"pc": [5355], "source": "contracts/validatorRegistry.algo.ts:1275", "teal": 5659}, {"pc": [5356, 5357], "source": "contracts/validatorRegistry.algo.ts:1275", "teal": 5660}, {"pc": [5358, 5359, 5360], "source": "contracts/validatorRegistry.algo.ts:1275", "teal": 5661}, {"pc": [5361], "source": "contracts/validatorRegistry.algo.ts:1275", "teal": 5662}, {"pc": [5362], "errorMessage": "specified asset must be created by creator that the validator defined as a requirement to stake", "source": "contracts/validatorRegistry.algo.ts:1274", "teal": 5665}, {"pc": [5363, 5364], "source": "contracts/validatorRegistry.algo.ts:1279", "teal": 5671}, {"pc": [5365, 5366], "source": "contracts/validatorRegistry.algo.ts:1279", "teal": 5672}, {"pc": [5367], "source": "contracts/validatorRegistry.algo.ts:1279", "teal": 5673}, {"pc": [5368, 5369, 5370], "source": "contracts/validatorRegistry.algo.ts:1279", "teal": 5674}, {"pc": [5371], "source": "contracts/validatorRegistry.algo.ts:1280", "teal": 5679}, {"pc": [5372, 5373], "source": "contracts/validatorRegistry.algo.ts:1280", "teal": 5680}, {"pc": [5374, 5375], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5684}, {"pc": [5376, 5377, 5378], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5685}, {"pc": [5379], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5686}, {"pc": [5380, 5381], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5687}, {"pc": [5382, 5383, 5384], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5688}, {"pc": [5385], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5689}, {"pc": [5386, 5387], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5690}, {"pc": [5388], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5691}, {"pc": [5389, 5390], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5692}, {"pc": [5391, 5392], "source": "contracts/validatorRegistry.algo.ts:1282", "teal": 5698}, {"pc": [5393, 5394], "source": "contracts/validatorRegistry.algo.ts:1282", "teal": 5699}, {"pc": [5395], "source": "contracts/validatorRegistry.algo.ts:1282", "teal": 5700}, {"pc": [5396, 5397, 5398], "source": "contracts/validatorRegistry.algo.ts:1282", "teal": 5701}, {"pc": [5399], "source": "contracts/validatorRegistry.algo.ts:1283", "teal": 5706}, {"pc": [5400, 5401], "source": "contracts/validatorRegistry.algo.ts:1283", "teal": 5707}, {"pc": [5402, 5403, 5404], "source": "contracts/validatorRegistry.algo.ts:1284", "teal": 5708}, {"pc": [5405, 5406], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5714}, {"pc": [5407], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5715}, {"pc": [5408], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5716}, {"pc": [5409], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5717}, {"pc": [5410, 5411], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5718}, {"pc": [5412], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5719}, {"pc": [5413, 5414, 5415], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5720}, {"pc": [5416, 5417], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5721}, {"pc": [5418, 5419], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5722}, {"pc": [5420, 5421], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5723}, {"pc": [5422], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5724}, {"pc": [5423], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5725}, {"pc": [5424], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5726}, {"pc": [5425, 5426], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5727}, {"pc": [5427, 5428, 5429], "source": "contracts/validatorRegistry.algo.ts:1281", "teal": 5728}, {"pc": [5430, 5431], "source": "contracts/validatorRegistry.algo.ts:1287", "teal": 5733}, {"pc": [5432], "errorMessage": "specified asset must be identical to the asset id defined as a requirement to stake", "source": "contracts/validatorRegistry.algo.ts:1287", "teal": 5736}, {"pc": [5433, 5434], "source": "contracts/validatorRegistry.algo.ts:1289", "teal": 5742}, {"pc": [5435, 5436], "source": "contracts/validatorRegistry.algo.ts:1289", "teal": 5743}, {"pc": [5437], "source": "contracts/validatorRegistry.algo.ts:1289", "teal": 5744}, {"pc": [5438, 5439, 5440], "source": "contracts/validatorRegistry.algo.ts:1289", "teal": 5745}, {"pc": [5441, 5442], "source": "contracts/validatorRegistry.algo.ts:1293", "teal": 5753}, {"pc": [5443, 5444], "source": "contracts/validatorRegistry.algo.ts:1293", "teal": 5754}, {"pc": [5445], "source": "contracts/validatorRegistry.algo.ts:1293", "teal": 5755}, {"pc": [5446, 5447], "source": "contracts/validatorRegistry.algo.ts:1293", "teal": 5756}, {"pc": [5448, 5449, 5450], "source": "contracts/validatorRegistry.algo.ts:1293", "teal": 5757}, {"pc": [5451], "source": "contracts/validatorRegistry.algo.ts:1293", "teal": 5758}, {"pc": [5452, 5453, 5454], "source": "contracts/validatorRegistry.algo.ts:1293", "teal": 5759}, {"pc": [5455], "errorMessage": "specified asset must be created by creator that is one of the linked addresses in an nfd", "source": "contracts/validatorRegistry.algo.ts:1292", "teal": 5762}, {"pc": [5456, 5457], "source": "contracts/validatorRegistry.algo.ts:1297", "teal": 5768}, {"pc": [5458, 5459], "source": "contracts/validatorRegistry.algo.ts:1297", "teal": 5769}, {"pc": [5460], "source": "contracts/validatorRegistry.algo.ts:1297", "teal": 5770}, {"pc": [5461, 5462, 5463], "source": "contracts/validatorRegistry.algo.ts:1297", "teal": 5771}, {"pc": [5464, 5465], "source": "contracts/validatorRegistry.algo.ts:1299", "teal": 5776}, {"pc": [5466, 5467], "source": "contracts/validatorRegistry.algo.ts:1299", "teal": 5777}, {"pc": [5468, 5469], "source": "contracts/validatorRegistry.algo.ts:1300", "teal": 5781}, {"pc": [5470, 5471, 5472], "source": "contracts/validatorRegistry.algo.ts:1300", "teal": 5782}, {"pc": [5473], "errorMessage": "provided NFD must be valid", "source": "contracts/validatorRegistry.algo.ts:1300", "teal": 5785}, {"pc": [5474, 5475], "source": "contracts/validatorRegistry.algo.ts:1304", "teal": 5793}, {"pc": [5476, 5477], "source": "contracts/validatorRegistry.algo.ts:1304", "teal": 5794}, {"pc": [5478], "source": "contracts/validatorRegistry.algo.ts:1304", "teal": 5795}, {"pc": [5479], "errorMessage": "global state value does not exist: AppID.fromUint64(userOfferedNFDAppID).globalState('i.owner.a')", "source": "contracts/validatorRegistry.algo.ts:1304", "teal": 5798}, {"pc": [5480, 5481], "source": "contracts/validatorRegistry.algo.ts:1305", "teal": 5799}, {"pc": [5482], "source": "contracts/validatorRegistry.algo.ts:1304", "teal": 5800}, {"pc": [5483], "source": "contracts/validatorRegistry.algo.ts:1305", "teal": 5801}, {"pc": [5484, 5485, 5486], "source": "contracts/validatorRegistry.algo.ts:1305", "teal": 5802}, {"pc": [5487, 5488], "source": "contracts/validatorRegistry.algo.ts:1305", "teal": 5803}, {"pc": [5489, 5490], "source": "contracts/validatorRegistry.algo.ts:1305", "teal": 5804}, {"pc": [5491, 5492, 5493], "source": "contracts/validatorRegistry.algo.ts:1305", "teal": 5805}, {"pc": [5494], "source": "contracts/validatorRegistry.algo.ts:1305", "teal": 5806}, {"pc": [5495], "errorMessage": "provided nfd for entry isn't owned or linked to the staker", "source": "contracts/validatorRegistry.algo.ts:1303", "teal": 5810}, {"pc": [5496, 5497], "source": "contracts/validatorRegistry.algo.ts:1311", "teal": 5818}, {"pc": [5498, 5499, 5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512], "source": "contracts/validatorRegistry.algo.ts:1311", "teal": 5819}, {"pc": [5513], "source": "contracts/validatorRegistry.algo.ts:1311", "teal": 5820}, {"pc": [5514], "errorMessage": "global state value does not exist: AppID.fromUint64(userOfferedNFDAppID).globalState('i.parentAppID')", "source": "contracts/validatorRegistry.algo.ts:1311", "teal": 5823}, {"pc": [5515], "source": "contracts/validatorRegistry.algo.ts:1311", "teal": 5824}, {"pc": [5516, 5517], "source": "contracts/validatorRegistry.algo.ts:1312", "teal": 5825}, {"pc": [5518, 5519, 5520], "source": "contracts/validatorRegistry.algo.ts:1312", "teal": 5826}, {"pc": [5521], "source": "contracts/validatorRegistry.algo.ts:1312", "teal": 5827}, {"pc": [5522], "source": "contracts/validatorRegistry.algo.ts:1311", "teal": 5828}, {"pc": [5523], "errorMessage": "specified nfd must be a segment of the nfd the validator specified as a requirement", "source": "contracts/validatorRegistry.algo.ts:1310", "teal": 5831}, {"pc": [5524], "source": "contracts/validatorRegistry.algo.ts:1249", "teal": 5834}, {"pc": [5525, 5526, 5527], "source": "contracts/validatorRegistry.algo.ts:1327", "teal": 5846}, {"pc": [5528], "source": "contracts/validatorRegistry.algo.ts:1327", "teal": 5849}, {"pc": [5529, 5530], "source": "contracts/validatorRegistry.algo.ts:1329", "teal": 5853}, {"pc": [5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538], "source": "contracts/validatorRegistry.algo.ts:1329", "teal": 5854}, {"pc": [5539], "source": "contracts/validatorRegistry.algo.ts:1329", "teal": 5855}, {"pc": [5540], "errorMessage": "global state value does not exist: AppID.fromUint64(nfdAppID).globalState('i.name')", "source": "contracts/validatorRegistry.algo.ts:1329", "teal": 5858}, {"pc": [5541, 5542], "source": "contracts/validatorRegistry.algo.ts:1329", "teal": 5859}, {"pc": [5543], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5867}, {"pc": [5544, 5545], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5868}, {"pc": [5546, 5547], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5869}, {"pc": [5548, 5549, 5550, 5551, 5552, 5553], "source": "contracts/validatorRegistry.algo.ts:1333", "teal": 5870}, {"pc": [5554, 5555], "source": "contracts/validatorRegistry.algo.ts:1333", "teal": 5871}, {"pc": [5556, 5557], "source": "contracts/validatorRegistry.algo.ts:1332", "teal": 5875}, {"pc": [5558, 5559], "source": "contracts/validatorRegistry.algo.ts:1332", "teal": 5876}, {"pc": [5560, 5561], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5880}, {"pc": [5562], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5881}, {"pc": [5563], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5882}, {"pc": [5564], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5883}, {"pc": [5565, 5566, 5567], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5884}, {"pc": [5568], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5885}, {"pc": [5569], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5886}, {"pc": [5570, 5571], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5887}, {"pc": [5572, 5573], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5888}, {"pc": [5574], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5889}, {"pc": [5575, 5576], "source": "contracts/validatorRegistry.algo.ts:1334", "teal": 5890}, {"pc": [5577], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5893}, {"pc": [5578, 5579], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5894}, {"pc": [5580], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5897}, {"pc": [5581, 5582], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5898}, {"pc": [5583], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5899}, {"pc": [5584], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5900}, {"pc": [5585, 5586], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5901}, {"pc": [5587, 5588, 5589], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5902}, {"pc": [5590], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5903}, {"pc": [5591], "source": "contracts/validatorRegistry.algo.ts:1331", "teal": 5904}, {"pc": [5592, 5593], "source": "contracts/validatorRegistry.algo.ts:1327", "teal": 5907}, {"pc": [5594], "source": "contracts/validatorRegistry.algo.ts:1327", "teal": 5908}, {"pc": [5595, 5596, 5597], "source": "contracts/validatorRegistry.algo.ts:1346", "teal": 5919}, {"pc": [5598], "source": "contracts/validatorRegistry.algo.ts:1346", "teal": 5922}, {"pc": [5599, 5600], "source": "contracts/validatorRegistry.algo.ts:1346", "teal": 5923}, {"pc": [5601], "source": "contracts/validatorRegistry.algo.ts:1347", "teal": 5930}, {"pc": [5602, 5603], "source": "contracts/validatorRegistry.algo.ts:1347", "teal": 5931}, {"pc": [5604, 5605], "source": "contracts/validatorRegistry.algo.ts:1347", "teal": 5932}, {"pc": [5606, 5607], "source": "contracts/validatorRegistry.algo.ts:1348", "teal": 5936}, {"pc": [5608, 5609], "source": "contracts/validatorRegistry.algo.ts:1348", "teal": 5937}, {"pc": [5610, 5611, 5612, 5613, 5614, 5615, 5616, 5617, 5618, 5619, 5620, 5621, 5622, 5623, 5624], "source": "contracts/validatorRegistry.algo.ts:1349", "teal": 5941}, {"pc": [5625, 5626], "source": "contracts/validatorRegistry.algo.ts:1349", "teal": 5942}, {"pc": [5627, 5628, 5629, 5630, 5631, 5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641], "source": "contracts/validatorRegistry.algo.ts:1349", "teal": 5943}, {"pc": [5642, 5643], "source": "contracts/validatorRegistry.algo.ts:1349", "teal": 5944}, {"pc": [5644], "source": "contracts/validatorRegistry.algo.ts:1347", "teal": 5947}, {"pc": [5645, 5646], "source": "contracts/validatorRegistry.algo.ts:1347", "teal": 5948}, {"pc": [5647], "source": "contracts/validatorRegistry.algo.ts:1347", "teal": 5951}, {"pc": [5648, 5649], "source": "contracts/validatorRegistry.algo.ts:1351", "teal": 5955}, {"pc": [5650, 5651], "source": "contracts/validatorRegistry.algo.ts:1351", "teal": 5956}, {"pc": [5652], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 5960}, {"pc": [5653, 5654], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 5961}, {"pc": [5655, 5656], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 5966}, {"pc": [5657, 5658], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 5967}, {"pc": [5659], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 5968}, {"pc": [5660], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 5969}, {"pc": [5661, 5662, 5663], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 5970}, {"pc": [5664, 5665], "source": "contracts/validatorRegistry.algo.ts:1353", "teal": 5974}, {"pc": [5666, 5667], "source": "contracts/validatorRegistry.algo.ts:1353", "teal": 5975}, {"pc": [5668, 5669], "source": "contracts/validatorRegistry.algo.ts:1353", "teal": 5976}, {"pc": [5670], "source": "contracts/validatorRegistry.algo.ts:1353", "teal": 5977}, {"pc": [5671, 5672], "source": "contracts/validatorRegistry.algo.ts:1353", "teal": 5978}, {"pc": [5673, 5674], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5983}, {"pc": [5675, 5676], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5984}, {"pc": [5677], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5985}, {"pc": [5678], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5986}, {"pc": [5679, 5680, 5681], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5987}, {"pc": [5682, 5683], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5988}, {"pc": [5684, 5685], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5989}, {"pc": [5686], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5990}, {"pc": [5687], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5991}, {"pc": [5688, 5689, 5690], "source": "contracts/validatorRegistry.algo.ts:1354", "teal": 5994}, {"pc": [5691], "source": "contracts/validatorRegistry.algo.ts:1355", "teal": 5999}, {"pc": [5692, 5693, 5694], "source": "contracts/validatorRegistry.algo.ts:1355", "teal": 6000}, {"pc": [5695, 5696], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 6007}, {"pc": [5697, 5698], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 6008}, {"pc": [5699], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 6009}, {"pc": [5700, 5701], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 6010}, {"pc": [5702, 5703, 5704], "source": "contracts/validatorRegistry.algo.ts:1352", "teal": 6011}, {"pc": [5705], "source": "contracts/validatorRegistry.algo.ts:1358", "teal": 6016}, {"pc": [5706, 5707], "source": "contracts/validatorRegistry.algo.ts:1346", "teal": 6020}, {"pc": [5708, 5709], "source": "contracts/validatorRegistry.algo.ts:1346", "teal": 6023}, {"pc": [5710], "source": "contracts/validatorRegistry.algo.ts:1346", "teal": 6024}, {"pc": [5711, 5712, 5713], "source": "contracts/validatorRegistry.algo.ts:1366", "teal": 6032}, {"pc": [5714], "source": "contracts/validatorRegistry.algo.ts:1366", "teal": 6035}, {"pc": [5715, 5716, 5717], "source": "contracts/validatorRegistry.algo.ts:1367", "teal": 6039}, {"pc": [5718, 5719], "source": "contracts/validatorRegistry.algo.ts:1367", "teal": 6040}, {"pc": [5720, 5721], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6044}, {"pc": [5722, 5723], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6045}, {"pc": [5724], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6046}, {"pc": [5725], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6047}, {"pc": [5726, 5727], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6048}, {"pc": [5728], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6049}, {"pc": [5729], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6050}, {"pc": [5730], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6051}, {"pc": [5731], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6052}, {"pc": [5732], "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6053}, {"pc": [5733], "errorMessage": "wideRatio failed", "source": "contracts/validatorRegistry.algo.ts:1369", "teal": 6056}, {"pc": [5734, 5735], "source": "contracts/validatorRegistry.algo.ts:1366", "teal": 6059}, {"pc": [5736], "source": "contracts/validatorRegistry.algo.ts:1366", "teal": 6060}, {"pc": [5737, 5738, 5739], "source": "contracts/validatorRegistry.algo.ts:1376", "teal": 6067}, {"pc": [5740], "source": "contracts/validatorRegistry.algo.ts:1376", "teal": 6070}, {"pc": [5741, 5742, 5743], "source": "contracts/validatorRegistry.algo.ts:1377", "teal": 6074}, {"pc": [5744, 5745], "source": "contracts/validatorRegistry.algo.ts:1377", "teal": 6075}, {"pc": [5746, 5747], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6079}, {"pc": [5748, 5749, 5750], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6080}, {"pc": [5751], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6081}, {"pc": [5752], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6082}, {"pc": [5753, 5754], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6083}, {"pc": [5755], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6084}, {"pc": [5756], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6085}, {"pc": [5757], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6086}, {"pc": [5758], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6087}, {"pc": [5759], "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6088}, {"pc": [5760], "errorMessage": "wideRatio failed", "source": "contracts/validatorRegistry.algo.ts:1379", "teal": 6091}, {"pc": [5761, 5762], "source": "contracts/validatorRegistry.algo.ts:1376", "teal": 6094}, {"pc": [5763], "source": "contracts/validatorRegistry.algo.ts:1376", "teal": 6095}, {"pc": [5764, 5765, 5766], "source": "contracts/validatorRegistry.algo.ts:1385", "teal": 6101}, {"pc": [5767, 5768], "source": "contracts/validatorRegistry.algo.ts:1386", "teal": 6105}, {"pc": [5769], "source": "contracts/validatorRegistry.algo.ts:1385", "teal": 6106}, {"pc": [5770, 5771, 5772], "source": "contracts/validatorRegistry.algo.ts:1389", "teal": 6110}, {"pc": [5773], "source": "contracts/validatorRegistry.algo.ts:1390", "teal": 6114}, {"pc": [5774], "source": "contracts/validatorRegistry.algo.ts:1389", "teal": 6115}, {"pc": [5775, 5776, 5777], "source": "contracts/validatorRegistry.algo.ts:1393", "teal": 6119}, {"pc": [5778], "source": "contracts/validatorRegistry.algo.ts:1393", "teal": 6122}, {"pc": [5779, 5780], "source": "contracts/validatorRegistry.algo.ts:1402", "teal": 6126}, {"pc": [5781, 5782], "source": "contracts/validatorRegistry.algo.ts:1402", "teal": 6127}, {"pc": [5783, 5784], "source": "contracts/validatorRegistry.algo.ts:1403", "teal": 6131}, {"pc": [5785, 5786], "source": "contracts/validatorRegistry.algo.ts:1403", "teal": 6132}, {"pc": [5787, 5788], "source": "contracts/validatorRegistry.algo.ts:1403", "teal": 6133}, {"pc": [5789], "source": "contracts/validatorRegistry.algo.ts:1403", "teal": 6134}, {"pc": [5790], "source": "contracts/validatorRegistry.algo.ts:1403", "teal": 6135}, {"pc": [5791, 5792], "source": "contracts/validatorRegistry.algo.ts:1403", "teal": 6136}, {"pc": [5793, 5794], "source": "contracts/validatorRegistry.algo.ts:1404", "teal": 6140}, {"pc": [5795, 5796], "source": "contracts/validatorRegistry.algo.ts:1404", "teal": 6141}, {"pc": [5797, 5798], "source": "contracts/validatorRegistry.algo.ts:1404", "teal": 6142}, {"pc": [5799], "source": "contracts/validatorRegistry.algo.ts:1404", "teal": 6143}, {"pc": [5800], "source": "contracts/validatorRegistry.algo.ts:1404", "teal": 6144}, {"pc": [5801, 5802], "source": "contracts/validatorRegistry.algo.ts:1404", "teal": 6145}, {"pc": [5803, 5804], "source": "contracts/validatorRegistry.algo.ts:1405", "teal": 6149}, {"pc": [5805, 5806], "source": "contracts/validatorRegistry.algo.ts:1405", "teal": 6150}, {"pc": [5807, 5808], "source": "contracts/validatorRegistry.algo.ts:1405", "teal": 6151}, {"pc": [5809], "source": "contracts/validatorRegistry.algo.ts:1405", "teal": 6152}, {"pc": [5810], "source": "contracts/validatorRegistry.algo.ts:1405", "teal": 6153}, {"pc": [5811, 5812], "source": "contracts/validatorRegistry.algo.ts:1405", "teal": 6154}, {"pc": [5813, 5814], "source": "contracts/validatorRegistry.algo.ts:1406", "teal": 6158}, {"pc": [5815, 5816], "source": "contracts/validatorRegistry.algo.ts:1406", "teal": 6159}, {"pc": [5817, 5818], "source": "contracts/validatorRegistry.algo.ts:1406", "teal": 6160}, {"pc": [5819], "source": "contracts/validatorRegistry.algo.ts:1406", "teal": 6161}, {"pc": [5820], "source": "contracts/validatorRegistry.algo.ts:1406", "teal": 6162}, {"pc": [5821, 5822], "source": "contracts/validatorRegistry.algo.ts:1406", "teal": 6163}, {"pc": [5823, 5824], "source": "contracts/validatorRegistry.algo.ts:1407", "teal": 6167}, {"pc": [5825, 5826], "source": "contracts/validatorRegistry.algo.ts:1407", "teal": 6168}, {"pc": [5827, 5828], "source": "contracts/validatorRegistry.algo.ts:1407", "teal": 6169}, {"pc": [5829], "source": "contracts/validatorRegistry.algo.ts:1407", "teal": 6170}, {"pc": [5830], "source": "contracts/validatorRegistry.algo.ts:1407", "teal": 6171}, {"pc": [5831, 5832], "source": "contracts/validatorRegistry.algo.ts:1407", "teal": 6172}, {"pc": [5833, 5834], "source": "contracts/validatorRegistry.algo.ts:1408", "teal": 6176}, {"pc": [5835, 5836], "source": "contracts/validatorRegistry.algo.ts:1408", "teal": 6177}, {"pc": [5837, 5838], "source": "contracts/validatorRegistry.algo.ts:1408", "teal": 6178}, {"pc": [5839], "source": "contracts/validatorRegistry.algo.ts:1408", "teal": 6179}, {"pc": [5840], "source": "contracts/validatorRegistry.algo.ts:1408", "teal": 6180}, {"pc": [5841, 5842], "source": "contracts/validatorRegistry.algo.ts:1408", "teal": 6181}, {"pc": [5843, 5844], "source": "contracts/validatorRegistry.algo.ts:1409", "teal": 6185}, {"pc": [5845, 5846], "source": "contracts/validatorRegistry.algo.ts:1409", "teal": 6186}, {"pc": [5847, 5848], "source": "contracts/validatorRegistry.algo.ts:1409", "teal": 6187}, {"pc": [5849], "source": "contracts/validatorRegistry.algo.ts:1409", "teal": 6188}, {"pc": [5850], "source": "contracts/validatorRegistry.algo.ts:1409", "teal": 6189}, {"pc": [5851, 5852], "source": "contracts/validatorRegistry.algo.ts:1409", "teal": 6190}, {"pc": [5853, 5854], "source": "contracts/validatorRegistry.algo.ts:1410", "teal": 6194}, {"pc": [5855, 5856], "source": "contracts/validatorRegistry.algo.ts:1393", "teal": 6197}, {"pc": [5857], "source": "contracts/validatorRegistry.algo.ts:1393", "teal": 6198}, {"pc": [5858, 5859, 5860], "source": "contracts/validatorRegistry.algo.ts:1413", "teal": 6202}, {"pc": [5861, 5862, 5863], "source": "contracts/validatorRegistry.algo.ts:1417", "teal": 6206}, {"pc": [5864, 5865], "source": "contracts/validatorRegistry.algo.ts:1417", "teal": 6207}, {"pc": [5866, 5867, 5868], "source": "contracts/validatorRegistry.algo.ts:1417", "teal": 6208}, {"pc": [5869], "source": "contracts/validatorRegistry.algo.ts:1417", "teal": 6209}, {"pc": [5870], "source": "contracts/validatorRegistry.algo.ts:1417", "teal": 6210}, {"pc": [5871], "source": "contracts/validatorRegistry.algo.ts:1413", "teal": 6211}, {"pc": [5872, 5873, 5874, 5875, 5876, 5877], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6214}, {"pc": [5878, 5879, 5880], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6215}, {"pc": [5881, 5882, 5883, 5884], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6216}, {"pc": [5885], "errorMessage": "this contract does not implement the given ABI method for create NoOp", "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6219}, {"pc": [5886, 5887, 5888, 5889, 5890, 5891], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6222}, {"pc": [5892, 5893, 5894, 5895, 5896, 5897], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6223}, {"pc": [5898, 5899, 5900, 5901, 5902, 5903], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6224}, {"pc": [5904, 5905, 5906, 5907, 5908, 5909], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6225}, {"pc": [5910, 5911, 5912, 5913, 5914, 5915], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6226}, {"pc": [5916, 5917, 5918, 5919, 5920, 5921], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6227}, {"pc": [5922, 5923, 5924, 5925, 5926, 5927], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6228}, {"pc": [5928, 5929, 5930, 5931, 5932, 5933], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6229}, {"pc": [5934, 5935, 5936, 5937, 5938, 5939], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6230}, {"pc": [5940, 5941, 5942, 5943, 5944, 5945], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6231}, {"pc": [5946, 5947, 5948, 5949, 5950, 5951], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6232}, {"pc": [5952, 5953, 5954, 5955, 5956, 5957], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6233}, {"pc": [5958, 5959, 5960, 5961, 5962, 5963], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6234}, {"pc": [5964, 5965, 5966, 5967, 5968, 5969], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6235}, {"pc": [5970, 5971, 5972, 5973, 5974, 5975], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6236}, {"pc": [5976, 5977, 5978, 5979, 5980, 5981], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6237}, {"pc": [5982, 5983, 5984, 5985, 5986, 5987], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6238}, {"pc": [5988, 5989, 5990, 5991, 5992, 5993], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6239}, {"pc": [5994, 5995, 5996, 5997, 5998, 5999], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6240}, {"pc": [6000, 6001, 6002, 6003, 6004, 6005], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6241}, {"pc": [6006, 6007, 6008, 6009, 6010, 6011], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6242}, {"pc": [6012, 6013, 6014, 6015, 6016, 6017], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6243}, {"pc": [6018, 6019, 6020, 6021, 6022, 6023], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6244}, {"pc": [6024, 6025, 6026, 6027, 6028, 6029], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6245}, {"pc": [6030, 6031, 6032, 6033, 6034, 6035], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6246}, {"pc": [6036, 6037, 6038, 6039, 6040, 6041], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6247}, {"pc": [6042, 6043, 6044, 6045, 6046, 6047], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6248}, {"pc": [6048, 6049, 6050, 6051, 6052, 6053], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6249}, {"pc": [6054, 6055, 6056, 6057, 6058, 6059], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6250}, {"pc": [6060, 6061, 6062, 6063, 6064, 6065], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6251}, {"pc": [6066, 6067, 6068, 6069, 6070, 6071], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6252}, {"pc": [6072, 6073, 6074, 6075, 6076, 6077], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6253}, {"pc": [6078, 6079, 6080, 6081, 6082, 6083], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6254}, {"pc": [6084, 6085, 6086], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6255}, {"pc": [6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6103, 6104, 6105, 6106, 6107, 6108, 6109, 6110, 6111, 6112, 6113, 6114, 6115, 6116, 6117, 6118, 6119, 6120, 6121, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143, 6144, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6153, 6154], "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6256}, {"pc": [6155], "errorMessage": "this contract does not implement the given ABI method for call NoOp", "source": "contracts/validatorRegistry.algo.ts:50", "teal": 6259}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {"nfd_registry_app_id": {"type": "uint64"}}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: typing.Any | None = None) -> list[typing.Any] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: typing.Any) -> typing.Any:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class Constraints:
    """Struct for Constraints"""
    epochPayoutRoundsMin: int
    epochPayoutRoundsMax: int
    minPctToValidatorWFourDecimals: int
    maxPctToValidatorWFourDecimals: int
    minEntryStake: int
    maxAlgoPerPool: int
    maxAlgoPerValidator: int
    amtConsideredSaturated: int
    maxNodes: int
    maxPoolsPerNode: int
    maxStakersPerPool: int

@dataclasses.dataclass(frozen=True)
class MbrAmounts:
    """Struct for MbrAmounts"""
    addValidatorMbr: int
    addPoolMbr: int
    poolInitMbr: int
    addStakerMbr: int

@dataclasses.dataclass(frozen=True)
class NodePoolAssignmentConfig:
    """Struct for NodePoolAssignmentConfig"""
    nodes: tuple[tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]]]

@dataclasses.dataclass(frozen=True)
class PoolInfo:
    """Struct for PoolInfo"""
    poolAppId: int
    totalStakers: int
    totalAlgoStaked: int

@dataclasses.dataclass(frozen=True)
class PoolTokenPayoutRatio:
    """Struct for PoolTokenPayoutRatio"""
    poolPctOfWhole: tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    updatedForPayout: int

@dataclasses.dataclass(frozen=True)
class ValidatorConfig:
    """Struct for ValidatorConfig"""
    id: int
    owner: str
    manager: str
    nfdForInfo: int
    entryGatingType: int
    entryGatingAddress: str
    entryGatingAssets: tuple[int, int, int, int]
    gatingAssetMinBalance: int
    rewardTokenId: int
    rewardPerPayout: int
    epochRoundLength: int
    percentToValidator: int
    validatorCommissionAddress: str
    minEntryStake: int
    maxAlgoPerPool: int
    poolsPerNode: int
    sunsettingOn: int
    sunsettingTo: int

@dataclasses.dataclass(frozen=True)
class ValidatorCurState:
    """Struct for ValidatorCurState"""
    numPools: int
    totalStakers: int
    totalAlgoStaked: int
    rewardTokenHeldBack: int

@dataclasses.dataclass(frozen=True)
class ValidatorInfoConfig:
    """Struct for ValidatorInfoConfig"""
    id: int
    owner: str
    manager: str
    nfdForInfo: int
    entryGatingType: int
    entryGatingAddress: str
    entryGatingAssets: tuple[int, int, int, int]
    gatingAssetMinBalance: int
    rewardTokenId: int
    rewardPerPayout: int
    epochRoundLength: int
    percentToValidator: int
    validatorCommissionAddress: str
    minEntryStake: int
    maxAlgoPerPool: int
    poolsPerNode: int
    sunsettingOn: int
    sunsettingTo: int

@dataclasses.dataclass(frozen=True)
class ValidatorInfoState:
    """Struct for ValidatorInfoState"""
    numPools: int
    totalStakers: int
    totalAlgoStaked: int
    rewardTokenHeldBack: int

@dataclasses.dataclass(frozen=True)
class ValidatorInfoTokenPayoutRatio:
    """Struct for ValidatorInfoTokenPayoutRatio"""
    poolPctOfWhole: tuple[int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int]
    updatedForPayout: int

@dataclasses.dataclass(frozen=True)
class ValidatorInfoNodePoolAssignments:
    """Struct for ValidatorInfoNodePoolAssignments"""
    nodes: tuple[tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]], tuple[tuple[int, int, int]]]

@dataclasses.dataclass(frozen=True)
class ValidatorInfo:
    """Struct for ValidatorInfo"""
    config: ValidatorInfoConfig
    state: ValidatorInfoState
    pools: tuple[tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int]]
    tokenPayoutRatio: ValidatorInfoTokenPayoutRatio
    nodePoolAssignments: ValidatorInfoNodePoolAssignments

@dataclasses.dataclass(frozen=True)
class ValidatorPoolKey:
    """Struct for ValidatorPoolKey"""
    id: int
    poolId: int
    poolAppId: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class InitStakingContractArgs:
    """Dataclass for init_staking_contract arguments"""
    approvalProgramSize: int

    @property
    def abi_method_signature(self) -> str:
        return "initStakingContract(uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class LoadStakingContractDataArgs:
    """Dataclass for load_staking_contract_data arguments"""
    offset: int
    data: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "loadStakingContractData(uint64,byte[])void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetValidatorConfigArgs:
    """Dataclass for get_validator_config arguments"""
    validatorId: int

    @property
    def abi_method_signature(self) -> str:
        return "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetValidatorStateArgs:
    """Dataclass for get_validator_state arguments"""
    validatorId: int

    @property
    def abi_method_signature(self) -> str:
        return "getValidatorState(uint64)(uint16,uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetValidatorOwnerAndManagerArgs:
    """Dataclass for get_validator_owner_and_manager arguments"""
    validatorId: int

    @property
    def abi_method_signature(self) -> str:
        return "getValidatorOwnerAndManager(uint64)(address,address)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPoolsArgs:
    """Dataclass for get_pools arguments"""
    validatorId: int

    @property
    def abi_method_signature(self) -> str:
        return "getPools(uint64)(uint64,uint16,uint64)[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPoolAppIdArgs:
    """Dataclass for get_pool_app_id arguments"""
    validatorId: int
    poolId: int

    @property
    def abi_method_signature(self) -> str:
        return "getPoolAppId(uint64,uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetPoolInfoArgs:
    """Dataclass for get_pool_info arguments"""
    poolKey: ValidatorPoolKey

    @property
    def abi_method_signature(self) -> str:
        return "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetCurMaxStakePerPoolArgs:
    """Dataclass for get_cur_max_stake_per_pool arguments"""
    validatorId: int

    @property
    def abi_method_signature(self) -> str:
        return "getCurMaxStakePerPool(uint64)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class DoesStakerNeedToPayMbrArgs:
    """Dataclass for does_staker_need_to_pay_mbr arguments"""
    staker: str

    @property
    def abi_method_signature(self) -> str:
        return "doesStakerNeedToPayMBR(address)bool"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetStakedPoolsForAccountArgs:
    """Dataclass for get_staked_pools_for_account arguments"""
    staker: str

    @property
    def abi_method_signature(self) -> str:
        return "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetTokenPayoutRatioArgs:
    """Dataclass for get_token_payout_ratio arguments"""
    validatorId: int

    @property
    def abi_method_signature(self) -> str:
        return "getTokenPayoutRatio(uint64)(uint64[24],uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetNodePoolAssignmentsArgs:
    """Dataclass for get_node_pool_assignments arguments"""
    validatorId: int

    @property
    def abi_method_signature(self) -> str:
        return "getNodePoolAssignments(uint64)((uint64[3])[8])"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AddValidatorArgs:
    """Dataclass for add_validator arguments"""
    mbrPayment: algokit_utils.AppMethodCallTransactionArgument
    nfdName: str
    config: ValidatorConfig

    @property
    def abi_method_signature(self) -> str:
        return "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ChangeValidatorManagerArgs:
    """Dataclass for change_validator_manager arguments"""
    validatorId: int
    manager: str

    @property
    def abi_method_signature(self) -> str:
        return "changeValidatorManager(uint64,address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ChangeValidatorSunsetInfoArgs:
    """Dataclass for change_validator_sunset_info arguments"""
    validatorId: int
    sunsettingOn: int
    sunsettingTo: int

    @property
    def abi_method_signature(self) -> str:
        return "changeValidatorSunsetInfo(uint64,uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ChangeValidatorNfdArgs:
    """Dataclass for change_validator_nfd arguments"""
    validatorId: int
    nfdAppID: int
    nfdName: str

    @property
    def abi_method_signature(self) -> str:
        return "changeValidatorNFD(uint64,uint64,string)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ChangeValidatorCommissionAddressArgs:
    """Dataclass for change_validator_commission_address arguments"""
    validatorId: int
    commissionAddress: str

    @property
    def abi_method_signature(self) -> str:
        return "changeValidatorCommissionAddress(uint64,address)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ChangeValidatorRewardInfoArgs:
    """Dataclass for change_validator_reward_info arguments"""
    validatorId: int
    EntryGatingType: int
    EntryGatingAddress: str
    EntryGatingAssets: tuple[int, int, int, int]
    GatingAssetMinBalance: int
    RewardPerPayout: int

    @property
    def abi_method_signature(self) -> str:
        return "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AddPoolArgs:
    """Dataclass for add_pool arguments"""
    mbrPayment: algokit_utils.AppMethodCallTransactionArgument
    validatorId: int
    nodeNum: int

    @property
    def abi_method_signature(self) -> str:
        return "addPool(pay,uint64,uint64)(uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class AddStakeArgs:
    """Dataclass for add_stake arguments"""
    stakedAmountPayment: algokit_utils.AppMethodCallTransactionArgument
    validatorId: int
    valueToVerify: int

    @property
    def abi_method_signature(self) -> str:
        return "addStake(pay,uint64,uint64)(uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetTokenPayoutRatioArgs:
    """Dataclass for set_token_payout_ratio arguments"""
    validatorId: int

    @property
    def abi_method_signature(self) -> str:
        return "setTokenPayoutRatio(uint64)(uint64[24],uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class StakeUpdatedViaRewardsArgs:
    """Dataclass for stake_updated_via_rewards arguments"""
    poolKey: ValidatorPoolKey
    algoToAdd: int
    rewardTokenAmountReserved: int
    validatorCommission: int
    saturatedBurnToFeeSink: int

    @property
    def abi_method_signature(self) -> str:
        return "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class StakeRemovedArgs:
    """Dataclass for stake_removed arguments"""
    poolKey: ValidatorPoolKey
    staker: str
    amountRemoved: int
    rewardRemoved: int
    stakerRemoved: bool

    @property
    def abi_method_signature(self) -> str:
        return "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class FindPoolForStakerArgs:
    """Dataclass for find_pool_for_staker arguments"""
    validatorId: int
    staker: str
    amountToStake: int

    @property
    def abi_method_signature(self) -> str:
        return "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class MovePoolToNodeArgs:
    """Dataclass for move_pool_to_node arguments"""
    validatorId: int
    poolAppId: int
    nodeNum: int

    @property
    def abi_method_signature(self) -> str:
        return "movePoolToNode(uint64,uint64,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class EmptyTokenRewardsArgs:
    """Dataclass for empty_token_rewards arguments"""
    validatorId: int
    receiver: str

    @property
    def abi_method_signature(self) -> str:
        return "emptyTokenRewards(uint64,address)uint64"


class ValidatorRegistryParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def init_staking_contract(
        self,
        args: tuple[int] | InitStakingContractArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initStakingContract(uint64)void",
            "args": method_args,
        }))

    def load_staking_contract_data(
        self,
        args: tuple[int, bytes | str] | LoadStakingContractDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "loadStakingContractData(uint64,byte[])void",
            "args": method_args,
        }))

    def finalize_staking_contract(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalizeStakingContract()void",
        }))

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gas()void",
        }))

    def get_mbr_amounts(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getMbrAmounts()(uint64,uint64,uint64,uint64)",
        }))

    def get_protocol_constraints(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
        }))

    def get_num_validators(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getNumValidators()uint64",
        }))

    def get_validator_config(
        self,
        args: tuple[int] | GetValidatorConfigArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
            "args": method_args,
        }))

    def get_validator_state(
        self,
        args: tuple[int] | GetValidatorStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getValidatorState(uint64)(uint16,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_validator_owner_and_manager(
        self,
        args: tuple[int] | GetValidatorOwnerAndManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getValidatorOwnerAndManager(uint64)(address,address)",
            "args": method_args,
        }))

    def get_pools(
        self,
        args: tuple[int] | GetPoolsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getPools(uint64)(uint64,uint16,uint64)[]",
            "args": method_args,
        }))

    def get_pool_app_id(
        self,
        args: tuple[int, int] | GetPoolAppIdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getPoolAppId(uint64,uint64)uint64",
            "args": method_args,
        }))

    def get_pool_info(
        self,
        args: tuple[ValidatorPoolKey] | GetPoolInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)",
            "args": method_args,
        }))

    def get_cur_max_stake_per_pool(
        self,
        args: tuple[int] | GetCurMaxStakePerPoolArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getCurMaxStakePerPool(uint64)uint64",
            "args": method_args,
        }))

    def does_staker_need_to_pay_mbr(
        self,
        args: tuple[str] | DoesStakerNeedToPayMbrArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "doesStakerNeedToPayMBR(address)bool",
            "args": method_args,
        }))

    def get_staked_pools_for_account(
        self,
        args: tuple[str] | GetStakedPoolsForAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]",
            "args": method_args,
        }))

    def get_token_payout_ratio(
        self,
        args: tuple[int] | GetTokenPayoutRatioArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getTokenPayoutRatio(uint64)(uint64[24],uint64)",
            "args": method_args,
        }))

    def get_node_pool_assignments(
        self,
        args: tuple[int] | GetNodePoolAssignmentsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getNodePoolAssignments(uint64)((uint64[3])[8])",
            "args": method_args,
        }))

    def get_nfd_registry_id(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getNFDRegistryID()uint64",
        }))

    def add_validator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, ValidatorConfig] | AddValidatorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64",
            "args": method_args,
        }))

    def change_validator_manager(
        self,
        args: tuple[int, str] | ChangeValidatorManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorManager(uint64,address)void",
            "args": method_args,
        }))

    def change_validator_sunset_info(
        self,
        args: tuple[int, int, int] | ChangeValidatorSunsetInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorSunsetInfo(uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def change_validator_nfd(
        self,
        args: tuple[int, int, str] | ChangeValidatorNfdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorNFD(uint64,uint64,string)void",
            "args": method_args,
        }))

    def change_validator_commission_address(
        self,
        args: tuple[int, str] | ChangeValidatorCommissionAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorCommissionAddress(uint64,address)void",
            "args": method_args,
        }))

    def change_validator_reward_info(
        self,
        args: tuple[int, int, str, tuple[int, int, int, int], int, int] | ChangeValidatorRewardInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void",
            "args": method_args,
        }))

    def add_pool(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddPoolArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "addPool(pay,uint64,uint64)(uint64,uint64,uint64)",
            "args": method_args,
        }))

    def add_stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddStakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "addStake(pay,uint64,uint64)(uint64,uint64,uint64)",
            "args": method_args,
        }))

    def set_token_payout_ratio(
        self,
        args: tuple[int] | SetTokenPayoutRatioArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "setTokenPayoutRatio(uint64)(uint64[24],uint64)",
            "args": method_args,
        }))

    def stake_updated_via_rewards(
        self,
        args: tuple[ValidatorPoolKey, int, int, int, int] | StakeUpdatedViaRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def stake_removed(
        self,
        args: tuple[ValidatorPoolKey, str, int, int, bool] | StakeRemovedArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void",
            "args": method_args,
        }))

    def find_pool_for_staker(
        self,
        args: tuple[int, str, int] | FindPoolForStakerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)",
            "args": method_args,
        }))

    def move_pool_to_node(
        self,
        args: tuple[int, int, int] | MovePoolToNodeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "movePoolToNode(uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def empty_token_rewards(
        self,
        args: tuple[int, str] | EmptyTokenRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "emptyTokenRewards(uint64,address)uint64",
            "args": method_args,
        }))

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class ValidatorRegistryCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def init_staking_contract(
        self,
        args: tuple[int] | InitStakingContractArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initStakingContract(uint64)void",
            "args": method_args,
        }))

    def load_staking_contract_data(
        self,
        args: tuple[int, bytes | str] | LoadStakingContractDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "loadStakingContractData(uint64,byte[])void",
            "args": method_args,
        }))

    def finalize_staking_contract(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalizeStakingContract()void",
        }))

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gas()void",
        }))

    def get_mbr_amounts(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getMbrAmounts()(uint64,uint64,uint64,uint64)",
        }))

    def get_protocol_constraints(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
        }))

    def get_num_validators(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getNumValidators()uint64",
        }))

    def get_validator_config(
        self,
        args: tuple[int] | GetValidatorConfigArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
            "args": method_args,
        }))

    def get_validator_state(
        self,
        args: tuple[int] | GetValidatorStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getValidatorState(uint64)(uint16,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def get_validator_owner_and_manager(
        self,
        args: tuple[int] | GetValidatorOwnerAndManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getValidatorOwnerAndManager(uint64)(address,address)",
            "args": method_args,
        }))

    def get_pools(
        self,
        args: tuple[int] | GetPoolsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getPools(uint64)(uint64,uint16,uint64)[]",
            "args": method_args,
        }))

    def get_pool_app_id(
        self,
        args: tuple[int, int] | GetPoolAppIdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getPoolAppId(uint64,uint64)uint64",
            "args": method_args,
        }))

    def get_pool_info(
        self,
        args: tuple[ValidatorPoolKey] | GetPoolInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)",
            "args": method_args,
        }))

    def get_cur_max_stake_per_pool(
        self,
        args: tuple[int] | GetCurMaxStakePerPoolArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getCurMaxStakePerPool(uint64)uint64",
            "args": method_args,
        }))

    def does_staker_need_to_pay_mbr(
        self,
        args: tuple[str] | DoesStakerNeedToPayMbrArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "doesStakerNeedToPayMBR(address)bool",
            "args": method_args,
        }))

    def get_staked_pools_for_account(
        self,
        args: tuple[str] | GetStakedPoolsForAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]",
            "args": method_args,
        }))

    def get_token_payout_ratio(
        self,
        args: tuple[int] | GetTokenPayoutRatioArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getTokenPayoutRatio(uint64)(uint64[24],uint64)",
            "args": method_args,
        }))

    def get_node_pool_assignments(
        self,
        args: tuple[int] | GetNodePoolAssignmentsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getNodePoolAssignments(uint64)((uint64[3])[8])",
            "args": method_args,
        }))

    def get_nfd_registry_id(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getNFDRegistryID()uint64",
        }))

    def add_validator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, ValidatorConfig] | AddValidatorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64",
            "args": method_args,
        }))

    def change_validator_manager(
        self,
        args: tuple[int, str] | ChangeValidatorManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorManager(uint64,address)void",
            "args": method_args,
        }))

    def change_validator_sunset_info(
        self,
        args: tuple[int, int, int] | ChangeValidatorSunsetInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorSunsetInfo(uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def change_validator_nfd(
        self,
        args: tuple[int, int, str] | ChangeValidatorNfdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorNFD(uint64,uint64,string)void",
            "args": method_args,
        }))

    def change_validator_commission_address(
        self,
        args: tuple[int, str] | ChangeValidatorCommissionAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorCommissionAddress(uint64,address)void",
            "args": method_args,
        }))

    def change_validator_reward_info(
        self,
        args: tuple[int, int, str, tuple[int, int, int, int], int, int] | ChangeValidatorRewardInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void",
            "args": method_args,
        }))

    def add_pool(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddPoolArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "addPool(pay,uint64,uint64)(uint64,uint64,uint64)",
            "args": method_args,
        }))

    def add_stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddStakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "addStake(pay,uint64,uint64)(uint64,uint64,uint64)",
            "args": method_args,
        }))

    def set_token_payout_ratio(
        self,
        args: tuple[int] | SetTokenPayoutRatioArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "setTokenPayoutRatio(uint64)(uint64[24],uint64)",
            "args": method_args,
        }))

    def stake_updated_via_rewards(
        self,
        args: tuple[ValidatorPoolKey, int, int, int, int] | StakeUpdatedViaRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def stake_removed(
        self,
        args: tuple[ValidatorPoolKey, str, int, int, bool] | StakeRemovedArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void",
            "args": method_args,
        }))

    def find_pool_for_staker(
        self,
        args: tuple[int, str, int] | FindPoolForStakerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)",
            "args": method_args,
        }))

    def move_pool_to_node(
        self,
        args: tuple[int, int, int] | MovePoolToNodeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "movePoolToNode(uint64,uint64,uint64)void",
            "args": method_args,
        }))

    def empty_token_rewards(
        self,
        args: tuple[int, str] | EmptyTokenRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "emptyTokenRewards(uint64,address)uint64",
            "args": method_args,
        }))

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication()void",
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class ValidatorRegistrySend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def init_staking_contract(
        self,
        args: tuple[int] | InitStakingContractArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initStakingContract(uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def load_staking_contract_data(
        self,
        args: tuple[int, bytes | str] | LoadStakingContractDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "loadStakingContractData(uint64,byte[])void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def finalize_staking_contract(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "finalizeStakingContract()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gas()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_mbr_amounts(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[MbrAmounts]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getMbrAmounts()(uint64,uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(MbrAmounts, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[MbrAmounts], parsed_response)

    def get_protocol_constraints(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[Constraints]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(Constraints, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[Constraints], parsed_response)

    def get_num_validators(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getNumValidators()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_validator_config(
        self,
        args: tuple[int] | GetValidatorConfigArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[ValidatorConfig]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(ValidatorConfig, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[ValidatorConfig], parsed_response)

    def get_validator_state(
        self,
        args: tuple[int] | GetValidatorStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[ValidatorCurState]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getValidatorState(uint64)(uint16,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(ValidatorCurState, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[ValidatorCurState], parsed_response)

    def get_validator_owner_and_manager(
        self,
        args: tuple[int] | GetValidatorOwnerAndManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[str, str]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getValidatorOwnerAndManager(uint64)(address,address)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[str, str]], parsed_response)

    def get_pools(
        self,
        args: tuple[int] | GetPoolsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[tuple[int, int, int]]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getPools(uint64)(uint64,uint16,uint64)[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[tuple[int, int, int]]], parsed_response)

    def get_pool_app_id(
        self,
        args: tuple[int, int] | GetPoolAppIdArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getPoolAppId(uint64,uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def get_pool_info(
        self,
        args: tuple[ValidatorPoolKey] | GetPoolInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PoolInfo]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(PoolInfo, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PoolInfo], parsed_response)

    def get_cur_max_stake_per_pool(
        self,
        args: tuple[int] | GetCurMaxStakePerPoolArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getCurMaxStakePerPool(uint64)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def does_staker_need_to_pay_mbr(
        self,
        args: tuple[str] | DoesStakerNeedToPayMbrArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[bool]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "doesStakerNeedToPayMBR(address)bool",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[bool], parsed_response)

    def get_staked_pools_for_account(
        self,
        args: tuple[str] | GetStakedPoolsForAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[list[tuple[int, int, int]]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[list[tuple[int, int, int]]], parsed_response)

    def get_token_payout_ratio(
        self,
        args: tuple[int] | GetTokenPayoutRatioArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PoolTokenPayoutRatio]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getTokenPayoutRatio(uint64)(uint64[24],uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(PoolTokenPayoutRatio, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PoolTokenPayoutRatio], parsed_response)

    def get_node_pool_assignments(
        self,
        args: tuple[int] | GetNodePoolAssignmentsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[NodePoolAssignmentConfig]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getNodePoolAssignments(uint64)((uint64[3])[8])",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(NodePoolAssignmentConfig, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[NodePoolAssignmentConfig], parsed_response)

    def get_nfd_registry_id(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "getNFDRegistryID()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def add_validator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, ValidatorConfig] | AddValidatorArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def change_validator_manager(
        self,
        args: tuple[int, str] | ChangeValidatorManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorManager(uint64,address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def change_validator_sunset_info(
        self,
        args: tuple[int, int, int] | ChangeValidatorSunsetInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorSunsetInfo(uint64,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def change_validator_nfd(
        self,
        args: tuple[int, int, str] | ChangeValidatorNfdArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorNFD(uint64,uint64,string)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def change_validator_commission_address(
        self,
        args: tuple[int, str] | ChangeValidatorCommissionAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorCommissionAddress(uint64,address)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def change_validator_reward_info(
        self,
        args: tuple[int, int, str, tuple[int, int, int, int], int, int] | ChangeValidatorRewardInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def add_pool(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddPoolArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[ValidatorPoolKey]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "addPool(pay,uint64,uint64)(uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(ValidatorPoolKey, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[ValidatorPoolKey], parsed_response)

    def add_stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddStakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[ValidatorPoolKey]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "addStake(pay,uint64,uint64)(uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(ValidatorPoolKey, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[ValidatorPoolKey], parsed_response)

    def set_token_payout_ratio(
        self,
        args: tuple[int] | SetTokenPayoutRatioArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[PoolTokenPayoutRatio]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "setTokenPayoutRatio(uint64)(uint64[24],uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = dataclasses.replace(response, abi_return=_init_dataclass(PoolTokenPayoutRatio, typing.cast(dict, response.abi_return))) # type: ignore
        return typing.cast(algokit_utils.SendAppTransactionResult[PoolTokenPayoutRatio], parsed_response)

    def stake_updated_via_rewards(
        self,
        args: tuple[ValidatorPoolKey, int, int, int, int] | StakeUpdatedViaRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def stake_removed(
        self,
        args: tuple[ValidatorPoolKey, str, int, int, bool] | StakeRemovedArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def find_pool_for_staker(
        self,
        args: tuple[int, str, int] | FindPoolForStakerArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[tuple[int, int, int], bool, bool]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[tuple[int, int, int], bool, bool]], parsed_response)

    def move_pool_to_node(
        self,
        args: tuple[int, int, int] | MovePoolToNodeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "movePoolToNode(uint64,uint64,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def empty_token_rewards(
        self,
        args: tuple[int, str] | EmptyTokenRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "emptyTokenRewards(uint64,address)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "createApplication()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    staking_pool_initialized: bool
    num_validators: int
    num_stakers: int
    total_algo_staked: int

class BoxStateValue(typing.TypedDict):
    """Shape of box state key values"""
    staking_pool_approval_program: bytes

class ValidatorRegistryState:
    """Methods to access state for the current ValidatorRegistry app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def staking_pool_initialized(self) -> bool:
        """Get the current value of the staking_pool_initialized key in global_state state"""
        value = self.app_client.state.global_state.get_value("staking_pool_initialized")
        if isinstance(value, dict) and "bool" in self._struct_classes:
            return _init_dataclass(self._struct_classes["bool"], value)  # type: ignore
        return typing.cast(bool, value)

    @property
    def num_validators(self) -> int:
        """Get the current value of the num_validators key in global_state state"""
        value = self.app_client.state.global_state.get_value("num_validators")
        if isinstance(value, dict) and "uint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["uint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def num_stakers(self) -> int:
        """Get the current value of the num_stakers key in global_state state"""
        value = self.app_client.state.global_state.get_value("num_stakers")
        if isinstance(value, dict) and "uint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["uint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def total_algo_staked(self) -> int:
        """Get the current value of the total_algo_staked key in global_state state"""
        value = self.app_client.state.global_state.get_value("total_algo_staked")
        if isinstance(value, dict) and "uint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["uint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "ValidatorInfo": ValidatorInfo
        }

    def get_all(self) -> BoxStateValue:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return typing.cast(BoxStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(BoxStateValue, converted)

    @property
    def staking_pool_approval_program(self) -> bytes:
        """Get the current value of the staking_pool_approval_program key in box state"""
        value = self.app_client.state.box.get_value("staking_pool_approval_program")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def validator_list(self) -> "_MapState[int, ValidatorInfo]":
        """Get values from the validator_list map in box state"""
        return _MapState(
            self.app_client.state.box,
            "validator_list",
            self._struct_classes.get("ValidatorInfo")
        )

    @property
    def staker_pool_set(self) -> "_MapState[str, tuple[tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int], tuple[int, int, int]]]":
        """Get values from the staker_pool_set map in box state"""
        return _MapState(
            self.app_client.state.box,
            "staker_pool_set",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class ValidatorRegistryClient:
    """Client for interacting with ValidatorRegistry smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = ValidatorRegistryParams(self.app_client)
        self.create_transaction = ValidatorRegistryCreateTransactionParams(self.app_client)
        self.send = ValidatorRegistrySend(self.app_client)
        self.state = ValidatorRegistryState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "ValidatorRegistryClient":
        return ValidatorRegistryClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ValidatorRegistryClient":
        return ValidatorRegistryClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "ValidatorRegistryClient":
        return ValidatorRegistryClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "ValidatorRegistryComposer":
        return ValidatorRegistryComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["initStakingContract(uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["loadStakingContractData(uint64,byte[])void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["finalizeStakingContract()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["gas()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getMbrAmounts()(uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> MbrAmounts | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> Constraints | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getNumValidators()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> ValidatorConfig | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getValidatorState(uint64)(uint16,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> ValidatorCurState | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getValidatorOwnerAndManager(uint64)(address,address)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[str, str] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getPools(uint64)(uint64,uint16,uint64)[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[tuple[int, int, int]] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getPoolAppId(uint64,uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PoolInfo | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getCurMaxStakePerPool(uint64)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["doesStakerNeedToPayMBR(address)bool"],
        return_value: algokit_utils.ABIReturn | None
    ) -> bool | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]"],
        return_value: algokit_utils.ABIReturn | None
    ) -> list[tuple[int, int, int]] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getTokenPayoutRatio(uint64)(uint64[24],uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PoolTokenPayoutRatio | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getNodePoolAssignments(uint64)((uint64[3])[8])"],
        return_value: algokit_utils.ABIReturn | None
    ) -> NodePoolAssignmentConfig | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["getNFDRegistryID()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["changeValidatorManager(uint64,address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["changeValidatorSunsetInfo(uint64,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["changeValidatorNFD(uint64,uint64,string)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["changeValidatorCommissionAddress(uint64,address)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["addPool(pay,uint64,uint64)(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> ValidatorPoolKey | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["addStake(pay,uint64,uint64)(uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> ValidatorPoolKey | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["setTokenPayoutRatio(uint64)(uint64[24],uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> PoolTokenPayoutRatio | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[tuple[int, int, int], bool, bool] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["movePoolToNode(uint64,uint64,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["emptyTokenRewards(uint64,address)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["createApplication()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | Constraints | MbrAmounts | NodePoolAssignmentConfig | None | PoolInfo | PoolTokenPayoutRatio | ValidatorConfig | ValidatorCurState | ValidatorPoolKey | bool | int | list[tuple[int, int, int]] | tuple[str, str] | tuple[tuple[int, int, int], bool, bool]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class ValidatorRegistryMethodCallCreateParams(
    algokit_utils.AppClientCreateSchema, algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for creating ValidatorRegistry contract using ABI"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallCreateParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallCreateParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class ValidatorRegistryFactory(algokit_utils.TypedAppFactoryProtocol[ValidatorRegistryMethodCallCreateParams, None, None]):
    """Factory for deploying and managing ValidatorRegistryClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = ValidatorRegistryFactoryParams(self.app_factory)
        self.create_transaction = ValidatorRegistryFactoryCreateTransaction(self.app_factory)
        self.send = ValidatorRegistryFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: ValidatorRegistryMethodCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[ValidatorRegistryClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return ValidatorRegistryClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ValidatorRegistryClient:
        """Get an app client by creator address and name"""
        return ValidatorRegistryClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> ValidatorRegistryClient:
        """Get an app client by app ID"""
        return ValidatorRegistryClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class ValidatorRegistryFactoryParams:
    """Parameters for creating transactions for ValidatorRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ValidatorRegistryFactoryCreateParams(app_factory)
        self.update = ValidatorRegistryFactoryUpdateParams(app_factory)
        self.delete = ValidatorRegistryFactoryDeleteParams(app_factory)

class ValidatorRegistryFactoryCreateParams:
    """Parameters for 'create' operations of ValidatorRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def init_staking_contract(
        self,
        args: tuple[int] | InitStakingContractArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the initStakingContract(uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "initStakingContract(uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def load_staking_contract_data(
        self,
        args: tuple[int, bytes | str] | LoadStakingContractDataArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the loadStakingContractData(uint64,byte[])void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "loadStakingContractData(uint64,byte[])void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def finalize_staking_contract(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the finalizeStakingContract()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "finalizeStakingContract()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def gas(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the gas()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "gas()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_mbr_amounts(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getMbrAmounts()(uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getMbrAmounts()(uint64,uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_protocol_constraints(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_num_validators(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getNumValidators()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getNumValidators()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def get_validator_config(
        self,
        args: tuple[int] | GetValidatorConfigArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_validator_state(
        self,
        args: tuple[int] | GetValidatorStateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getValidatorState(uint64)(uint16,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getValidatorState(uint64)(uint16,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_validator_owner_and_manager(
        self,
        args: tuple[int] | GetValidatorOwnerAndManagerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getValidatorOwnerAndManager(uint64)(address,address) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getValidatorOwnerAndManager(uint64)(address,address)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_pools(
        self,
        args: tuple[int] | GetPoolsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getPools(uint64)(uint64,uint16,uint64)[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getPools(uint64)(uint64,uint16,uint64)[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_pool_app_id(
        self,
        args: tuple[int, int] | GetPoolAppIdArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getPoolAppId(uint64,uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getPoolAppId(uint64,uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_pool_info(
        self,
        args: tuple[ValidatorPoolKey] | GetPoolInfoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_cur_max_stake_per_pool(
        self,
        args: tuple[int] | GetCurMaxStakePerPoolArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getCurMaxStakePerPool(uint64)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getCurMaxStakePerPool(uint64)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def does_staker_need_to_pay_mbr(
        self,
        args: tuple[str] | DoesStakerNeedToPayMbrArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the doesStakerNeedToPayMBR(address)bool ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "doesStakerNeedToPayMBR(address)bool",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_staked_pools_for_account(
        self,
        args: tuple[str] | GetStakedPoolsForAccountArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getStakedPoolsForAccount(address)(uint64,uint64,uint64)[] ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_token_payout_ratio(
        self,
        args: tuple[int] | GetTokenPayoutRatioArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getTokenPayoutRatio(uint64)(uint64[24],uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_node_pool_assignments(
        self,
        args: tuple[int] | GetNodePoolAssignmentsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getNodePoolAssignments(uint64)((uint64[3])[8]) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getNodePoolAssignments(uint64)((uint64[3])[8])",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_nfd_registry_id(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the getNFDRegistryID()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "getNFDRegistryID()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def add_validator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, ValidatorConfig] | AddValidatorArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def change_validator_manager(
        self,
        args: tuple[int, str] | ChangeValidatorManagerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the changeValidatorManager(uint64,address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "changeValidatorManager(uint64,address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def change_validator_sunset_info(
        self,
        args: tuple[int, int, int] | ChangeValidatorSunsetInfoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the changeValidatorSunsetInfo(uint64,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "changeValidatorSunsetInfo(uint64,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def change_validator_nfd(
        self,
        args: tuple[int, int, str] | ChangeValidatorNfdArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the changeValidatorNFD(uint64,uint64,string)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "changeValidatorNFD(uint64,uint64,string)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def change_validator_commission_address(
        self,
        args: tuple[int, str] | ChangeValidatorCommissionAddressArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the changeValidatorCommissionAddress(uint64,address)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "changeValidatorCommissionAddress(uint64,address)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def change_validator_reward_info(
        self,
        args: tuple[int, int, str, tuple[int, int, int, int], int, int] | ChangeValidatorRewardInfoArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def add_pool(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddPoolArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the addPool(pay,uint64,uint64)(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "addPool(pay,uint64,uint64)(uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def add_stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddStakeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the addStake(pay,uint64,uint64)(uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "addStake(pay,uint64,uint64)(uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_token_payout_ratio(
        self,
        args: tuple[int] | SetTokenPayoutRatioArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the setTokenPayoutRatio(uint64)(uint64[24],uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "setTokenPayoutRatio(uint64)(uint64[24],uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def stake_updated_via_rewards(
        self,
        args: tuple[ValidatorPoolKey, int, int, int, int] | StakeUpdatedViaRewardsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def stake_removed(
        self,
        args: tuple[ValidatorPoolKey, str, int, int, bool] | StakeRemovedArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def find_pool_for_staker(
        self,
        args: tuple[int, str, int] | FindPoolForStakerArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def move_pool_to_node(
        self,
        args: tuple[int, int, int] | MovePoolToNodeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the movePoolToNode(uint64,uint64,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "movePoolToNode(uint64,uint64,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def empty_token_rewards(
        self,
        args: tuple[int, str] | EmptyTokenRewardsArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the emptyTokenRewards(uint64,address)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "emptyTokenRewards(uint64,address)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_application(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the createApplication()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "createApplication()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class ValidatorRegistryFactoryUpdateParams:
    """Parameters for 'update' operations of ValidatorRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class ValidatorRegistryFactoryDeleteParams:
    """Parameters for 'delete' operations of ValidatorRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class ValidatorRegistryFactoryCreateTransaction:
    """Create transactions for ValidatorRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ValidatorRegistryFactoryCreateTransactionCreate(app_factory)


class ValidatorRegistryFactoryCreateTransactionCreate:
    """Create new instances of ValidatorRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class ValidatorRegistryFactorySend:
    """Send calls to ValidatorRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = ValidatorRegistryFactorySendCreate(app_factory)


class ValidatorRegistryFactorySendCreate:
    """Send create calls to ValidatorRegistry contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[ValidatorRegistryClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return ValidatorRegistryClient(result[0]), result[1]

    def create_application(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> tuple[ValidatorRegistryClient, algokit_utils.AppFactoryCreateMethodCallResult[None]]:
            """Creates and sends a transaction using the createApplication()void ABI method"""
            params = params or algokit_utils.CommonAppCallCreateParams()
            client, result = self.app_factory.send.create(
                algokit_utils.AppFactoryCreateMethodCallParams(
                    **{
                    **dataclasses.asdict(params),
                    "method": "createApplication()void",
                    "args": None,
                    }
                ),
                send_params=send_params,
                compilation_params=compilation_params
            )
            return_value = None if result.abi_return is None else typing.cast(None, result.abi_return)
    
            return ValidatorRegistryClient(client), algokit_utils.AppFactoryCreateMethodCallResult[None](
                **{
                    **result.__dict__,
                    "app_id": result.app_id,
                    "abi_return": return_value,
                    "transaction": result.transaction,
                    "confirmation": result.confirmation,
                    "group_id": result.group_id,
                    "tx_ids": result.tx_ids,
                    "transactions": result.transactions,
                    "confirmations": result.confirmations,
                    "app_address": result.app_address,
                }
            )


class ValidatorRegistryComposer:
    """Composer for creating transaction groups for ValidatorRegistry contract calls"""

    def __init__(self, client: "ValidatorRegistryClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], typing.Any] | None] = []

    def init_staking_contract(
        self,
        args: tuple[int] | InitStakingContractArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.init_staking_contract(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "initStakingContract(uint64)void", v
            )
        )
        return self

    def load_staking_contract_data(
        self,
        args: tuple[int, bytes | str] | LoadStakingContractDataArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.load_staking_contract_data(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "loadStakingContractData(uint64,byte[])void", v
            )
        )
        return self

    def finalize_staking_contract(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.finalize_staking_contract(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "finalizeStakingContract()void", v
            )
        )
        return self

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.gas(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "gas()void", v
            )
        )
        return self

    def get_mbr_amounts(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_mbr_amounts(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getMbrAmounts()(uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def get_protocol_constraints(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_protocol_constraints(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def get_num_validators(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_num_validators(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getNumValidators()uint64", v
            )
        )
        return self

    def get_validator_config(
        self,
        args: tuple[int] | GetValidatorConfigArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_validator_config(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)", v
            )
        )
        return self

    def get_validator_state(
        self,
        args: tuple[int] | GetValidatorStateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_validator_state(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getValidatorState(uint64)(uint16,uint64,uint64,uint64)", v
            )
        )
        return self

    def get_validator_owner_and_manager(
        self,
        args: tuple[int] | GetValidatorOwnerAndManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_validator_owner_and_manager(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getValidatorOwnerAndManager(uint64)(address,address)", v
            )
        )
        return self

    def get_pools(
        self,
        args: tuple[int] | GetPoolsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_pools(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getPools(uint64)(uint64,uint16,uint64)[]", v
            )
        )
        return self

    def get_pool_app_id(
        self,
        args: tuple[int, int] | GetPoolAppIdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_pool_app_id(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getPoolAppId(uint64,uint64)uint64", v
            )
        )
        return self

    def get_pool_info(
        self,
        args: tuple[ValidatorPoolKey] | GetPoolInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_pool_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)", v
            )
        )
        return self

    def get_cur_max_stake_per_pool(
        self,
        args: tuple[int] | GetCurMaxStakePerPoolArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_cur_max_stake_per_pool(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getCurMaxStakePerPool(uint64)uint64", v
            )
        )
        return self

    def does_staker_need_to_pay_mbr(
        self,
        args: tuple[str] | DoesStakerNeedToPayMbrArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.does_staker_need_to_pay_mbr(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "doesStakerNeedToPayMBR(address)bool", v
            )
        )
        return self

    def get_staked_pools_for_account(
        self,
        args: tuple[str] | GetStakedPoolsForAccountArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_staked_pools_for_account(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]", v
            )
        )
        return self

    def get_token_payout_ratio(
        self,
        args: tuple[int] | GetTokenPayoutRatioArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_token_payout_ratio(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getTokenPayoutRatio(uint64)(uint64[24],uint64)", v
            )
        )
        return self

    def get_node_pool_assignments(
        self,
        args: tuple[int] | GetNodePoolAssignmentsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_node_pool_assignments(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getNodePoolAssignments(uint64)((uint64[3])[8])", v
            )
        )
        return self

    def get_nfd_registry_id(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_nfd_registry_id(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "getNFDRegistryID()uint64", v
            )
        )
        return self

    def add_validator(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, str, ValidatorConfig] | AddValidatorArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add_validator(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64", v
            )
        )
        return self

    def change_validator_manager(
        self,
        args: tuple[int, str] | ChangeValidatorManagerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.change_validator_manager(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "changeValidatorManager(uint64,address)void", v
            )
        )
        return self

    def change_validator_sunset_info(
        self,
        args: tuple[int, int, int] | ChangeValidatorSunsetInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.change_validator_sunset_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "changeValidatorSunsetInfo(uint64,uint64,uint64)void", v
            )
        )
        return self

    def change_validator_nfd(
        self,
        args: tuple[int, int, str] | ChangeValidatorNfdArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.change_validator_nfd(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "changeValidatorNFD(uint64,uint64,string)void", v
            )
        )
        return self

    def change_validator_commission_address(
        self,
        args: tuple[int, str] | ChangeValidatorCommissionAddressArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.change_validator_commission_address(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "changeValidatorCommissionAddress(uint64,address)void", v
            )
        )
        return self

    def change_validator_reward_info(
        self,
        args: tuple[int, int, str, tuple[int, int, int, int], int, int] | ChangeValidatorRewardInfoArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.change_validator_reward_info(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void", v
            )
        )
        return self

    def add_pool(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddPoolArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add_pool(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "addPool(pay,uint64,uint64)(uint64,uint64,uint64)", v
            )
        )
        return self

    def add_stake(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | AddStakeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.add_stake(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "addStake(pay,uint64,uint64)(uint64,uint64,uint64)", v
            )
        )
        return self

    def set_token_payout_ratio(
        self,
        args: tuple[int] | SetTokenPayoutRatioArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_token_payout_ratio(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "setTokenPayoutRatio(uint64)(uint64[24],uint64)", v
            )
        )
        return self

    def stake_updated_via_rewards(
        self,
        args: tuple[ValidatorPoolKey, int, int, int, int] | StakeUpdatedViaRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.stake_updated_via_rewards(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void", v
            )
        )
        return self

    def stake_removed(
        self,
        args: tuple[ValidatorPoolKey, str, int, int, bool] | StakeRemovedArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.stake_removed(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void", v
            )
        )
        return self

    def find_pool_for_staker(
        self,
        args: tuple[int, str, int] | FindPoolForStakerArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.find_pool_for_staker(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)", v
            )
        )
        return self

    def move_pool_to_node(
        self,
        args: tuple[int, int, int] | MovePoolToNodeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.move_pool_to_node(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "movePoolToNode(uint64,uint64,uint64)void", v
            )
        )
        return self

    def empty_token_rewards(
        self,
        args: tuple[int, str] | EmptyTokenRewardsArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.empty_token_rewards(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "emptyTokenRewards(uint64,address)uint64", v
            )
        )
        return self

    def create_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_application(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "createApplication()void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "ValidatorRegistryComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "ValidatorRegistryComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
